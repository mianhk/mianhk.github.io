<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on mianhk&#39;s notes</title>
    <link>http://yuguocong.cn/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on mianhk&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 24 Jun 2018 22:02:20 +0800</lastBuildDate><atom:link href="http://yuguocong.cn/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面试总结-C&#43;&#43;</title>
      <link>http://yuguocong.cn/posts/interview_cpp/</link>
      <pubDate>Sun, 24 Jun 2018 22:02:20 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/interview_cpp/</guid>
      <description>编程基础 C++ 内存管理方式 堆、栈、自由存储区、全局/静态存储区、常量存储区 自由存储区存储malloc申请的内存 (1)从静态存储区域分配 。内存在程</description>
    </item>
    
    <item>
      <title>剑指offer-刷题总结</title>
      <link>http://yuguocong.cn/posts/re_sword_to_offer/</link>
      <pubDate>Wed, 20 Jun 2018 21:40:02 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/re_sword_to_offer/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;重刷剑指offer总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-60-Permutation-Sequence</title>
      <link>http://yuguocong.cn/posts/leetcode-60-permutation-sequence/</link>
      <pubDate>Tue, 06 Feb 2018 17:32:24 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-60-permutation-sequence/</guid>
      <description>LeetCode-60-Permutation-Sequence The set [1,2,3,…,n] contains a total of n! unique permutations. By listing and labeling all of the permutations in order, We get the following sequence (ie, for n = 3): &amp;quot;123&amp;quot; &amp;quot;132&amp;quot; &amp;quot;213&amp;quot; &amp;quot;231&amp;quot; &amp;quot;312&amp;quot; &amp;quot;321&amp;quot; Given n and k, return the kth permutation sequence. 同样是排列 组合的问题，这次不</description>
    </item>
    
    <item>
      <title>LeetCode-56and57-Merge-Intervals</title>
      <link>http://yuguocong.cn/posts/leetcode-56-merge-intervals/</link>
      <pubDate>Tue, 30 Jan 2018 16:00:00 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-56-merge-intervals/</guid>
      <description>LeetCode-56-Merge-Intervals Given a collection of intervals, merge all overlapping intervals. For example, Given [1,3],[2,6],[8,10],[15,18], return [1,6],[8,10],[15,18]. 如例子中所示，每个数组的前后分别表示开始和结束，工作是合并有重叠的数组。例如，由于[1,3]和[2,6]有重</description>
    </item>
    
    <item>
      <title>LeetCode-55-Jump-Game</title>
      <link>http://yuguocong.cn/posts/leetcode-55-jump-game/</link>
      <pubDate>Tue, 30 Jan 2018 15:39:55 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-55-jump-game/</guid>
      <description>LeetCode-55-Jump-Game Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index. For example: A = [2,3,1,1,4], return true. A = [3,2,1,0,4], return false. 由题可知，数组的位置表示从该位置可</description>
    </item>
    
    <item>
      <title>LeetCode-53-Maximum-Subarray</title>
      <link>http://yuguocong.cn/posts/leetcode-53-maximum-subarray/</link>
      <pubDate>Fri, 26 Jan 2018 17:57:03 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-53-maximum-subarray/</guid>
      <description>LeetCode-53-Maximum-Subarray Find the contiguous subarray within an array (containing at least one number) which has the largest sum. For example, given the array [-2,1,-3,4,-1,2,1,-5,4], the contiguous subarray [4,-1,2,1] has the largest sum = 6. 最长子序列，又是一个动态规划的问题，关于动态规划，我们最主要的是要维护D</description>
    </item>
    
    <item>
      <title>LeetCode-52-N-Queens-II</title>
      <link>http://yuguocong.cn/posts/leetcode-52-n-queens-ii/</link>
      <pubDate>Fri, 26 Jan 2018 17:00:24 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-52-n-queens-ii/</guid>
      <description>LeetCode-52-N-Queens-II Follow up for N-Queens problem. Now, instead outputting board configurations, return the total number of distinct solutions. 只返回N皇后问题结果的种数。 因此不需要每一个字符串置位了，只需要判断一个位置的横竖，斜45度和斜135度</description>
    </item>
    
    <item>
      <title>LeetCode-51-N-Queens</title>
      <link>http://yuguocong.cn/posts/leetcode-51-n-queens/</link>
      <pubDate>Fri, 26 Jan 2018 10:12:49 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-51-n-queens/</guid>
      <description>LeetCode-51-N-Queens 经典的N皇后问题，重点是全排列的问题，但是这里由于N皇后的不重复行、列、斜的要求，在排列的过程中，比如从行开始排列，只能保证同行不重复，所</description>
    </item>
    
    <item>
      <title>LeetCode-49-Group-Anagrams</title>
      <link>http://yuguocong.cn/posts/leetcode-49-group-anagrams/</link>
      <pubDate>Thu, 25 Jan 2018 21:44:37 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-49-group-anagrams/</guid>
      <description>LeetCode-49-Group-Anagrams Given an array of strings, group anagrams together. For example, given: [&amp;ldquo;eat&amp;rdquo;, &amp;ldquo;tea&amp;rdquo;, &amp;ldquo;tan&amp;rdquo;, &amp;ldquo;ate&amp;rdquo;, &amp;ldquo;nat&amp;rdquo;, &amp;ldquo;bat&amp;rdquo;], Return: [ [&amp;quot;ate&amp;quot;, &amp;quot;eat&amp;quot;,&amp;quot;tea&amp;quot;], [&amp;quot;nat&amp;quot;,&amp;quot;tan&amp;quot;], [&amp;quot;bat&amp;quot;] ] 输入一个字符串数组，输出的是：将相同字符的字符串放在一个数组的二维数组。相同字符的处理，基</description>
    </item>
    
    <item>
      <title>Leetcode-48-Rotate-Image</title>
      <link>http://yuguocong.cn/posts/leetcode-48-rotate-image/</link>
      <pubDate>Thu, 25 Jan 2018 20:44:32 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-48-rotate-image/</guid>
      <description>Leetcode-48-Rotate-Image ou are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). Note: You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example : Given input matrix = [ [1,2,3], [4,5,6], [7,8,9] ], rotate the input matrix in-place such that it becomes: [</description>
    </item>
    
    <item>
      <title>LeetCode-36-Valid-Sudoku</title>
      <link>http://yuguocong.cn/posts/leetcode-36-valid-sudoku/</link>
      <pubDate>Sun, 14 Jan 2018 21:53:42 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-36-valid-sudoku/</guid>
      <description>LeetCode-36-Valid-Sudoku Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules. The Sudoku board could be partially filled, where empty cells are filled with the character &amp;lsquo;.&amp;rsquo;. 判断一个二维数组是不是数独数组。要求是：同行同列，斜对角不能有相同的数组，这里需</description>
    </item>
    
    <item>
      <title>LeetCode-34-Search-for-a-Range</title>
      <link>http://yuguocong.cn/posts/leetcode-34-search-for-a-range/</link>
      <pubDate>Sun, 14 Jan 2018 21:52:38 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-34-search-for-a-range/</guid>
      <description>LeetCode-34-Search-for-a-Range Given an array of integers sorted in ascending order, find the starting and ending position of a given target value. Your algorithm&amp;rsquo;s runtime complexity must be in the order of O(log n). If the target is not found in the array, return [-1, -1]. 在一个排序的数组中找到出现这个值的起点和重点。很容</description>
    </item>
    
    <item>
      <title>LeetCode-32-Longest-Valid-Parentheses</title>
      <link>http://yuguocong.cn/posts/leetcode-32-longest-valid-parentheses/</link>
      <pubDate>Fri, 12 Jan 2018 17:28:31 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-32-longest-valid-parentheses/</guid>
      <description>LeetCode-32-Longest-Valid-Parentheses Given a string containing just the characters &amp;lsquo;(&amp;rsquo; and &amp;lsquo;)&amp;rsquo;, find the length of the longest valid (well-formed) parentheses substring. For &amp;ldquo;(()&amp;rdquo;, the longest valid parentheses substring is &amp;ldquo;()&amp;rdquo;, which has length = 2. Another example is &amp;ldquo;)()())&amp;rdquo;, where the longest valid parentheses substring is &amp;ldquo;()()&amp;rdquo;, which has length = 4. 表示这是一道没有看懂题目的题，看到题</description>
    </item>
    
    <item>
      <title>LeetCode-31-Next-Permutation</title>
      <link>http://yuguocong.cn/posts/leetcode-31-next-permutation/</link>
      <pubDate>Fri, 12 Jan 2018 17:26:20 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-31-next-permutation/</guid>
      <description>LeetCode-31-Next-Permutation Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order). The replacement must be in-place, do not allocate extra memory. 这个排序主要是有两种情况，一个是类似于3 1 2 这样的</description>
    </item>
    
    <item>
      <title>LeetCode-19-Remove-Nth-Node-From-End-of-List</title>
      <link>http://yuguocong.cn/posts/leetcode-19-remove-nth-node-from-end-of-list/</link>
      <pubDate>Fri, 12 Jan 2018 17:25:23 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-19-remove-nth-node-from-end-of-list/</guid>
      <description>Given a linked list, remove the nth node from the end of list and return its head. For example, Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5. 这个题目之前在剑指offer上就有，记得当时的方法是：采用两</description>
    </item>
    
    <item>
      <title>LeetCode-23-Merge-k-Sorted-Lists</title>
      <link>http://yuguocong.cn/posts/leetcode-23-merge-k-sorted-lists/</link>
      <pubDate>Thu, 11 Jan 2018 22:23:23 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-23-merge-k-sorted-lists/</guid>
      <description>23. Merge k Sorted Lists Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity. 这个题乍一看只是对链表的一个排序，因为是很多个链表，所以很简单的想法就是将整个数组里面的两个链表</description>
    </item>
    
    <item>
      <title>LeetCode-15-3Sum&amp;&amp;4Sum</title>
      <link>http://yuguocong.cn/posts/leetcode-15-3sum/</link>
      <pubDate>Wed, 10 Jan 2018 21:57:08 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-15-3sum/</guid>
      <description>15. 3Sum Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets. For example, given array S = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1,</description>
    </item>
    
    <item>
      <title>LeetCode-8-String to Integer (atoi)</title>
      <link>http://yuguocong.cn/posts/leetcode-8-string-to-integer-atoi/</link>
      <pubDate>Tue, 09 Jan 2018 22:24:41 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/leetcode-8-string-to-integer-atoi/</guid>
      <description>8.String to Integer (atoi) Implement atoi to convert a string to an integer. 讲字符串转化为整型。当然过程很简单，但是需要考虑的乱七八糟的情况很多，空格和正负号之类的。提交了一百次，终于过了，</description>
    </item>
    
    <item>
      <title>牛客网-剑指offer-11</title>
      <link>http://yuguocong.cn/posts/nowcoder-sword-to-offer11/</link>
      <pubDate>Sun, 03 Dec 2017 20:44:21 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/nowcoder-sword-to-offer11/</guid>
      <description>T31：把数组排成最小的数 输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32</description>
    </item>
    
    <item>
      <title>牛客网-剑指offer-10</title>
      <link>http://yuguocong.cn/posts/nowcoder-sword-to-offer10/</link>
      <pubDate>Fri, 01 Dec 2017 21:11:56 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/nowcoder-sword-to-offer10/</guid>
      <description>T28：最小的K个数 输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,</description>
    </item>
    
    <item>
      <title>牛客网-剑指offer-3</title>
      <link>http://yuguocong.cn/posts/nowcoder-sword-to-offer3/</link>
      <pubDate>Fri, 17 Nov 2017 19:50:52 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/nowcoder-sword-to-offer3/</guid>
      <description>T7：斐波那契数列 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。 n&amp;lt;=39 斐波那契数列是很常用的数列，也是很简单的递</description>
    </item>
    
    <item>
      <title>我的专业书阅读</title>
      <link>http://yuguocong.cn/posts/books/</link>
      <pubDate>Sun, 12 Nov 2017 20:47:37 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/books/</guid>
      <description></description>
    </item>
    
    <item>
      <title>牛客网-剑指offer-2</title>
      <link>http://yuguocong.cn/posts/nowcoder-sword-to-offer2/</link>
      <pubDate>Fri, 27 Oct 2017 19:50:52 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/nowcoder-sword-to-offer2/</guid>
      <description>T4：重建二叉树 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序</description>
    </item>
    
    <item>
      <title>牛客网刷题总结-剑指offer(1)</title>
      <link>http://yuguocong.cn/posts/nowcoder-sword-to-offer1/</link>
      <pubDate>Sun, 15 Oct 2017 21:26:46 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/nowcoder-sword-to-offer1/</guid>
      <description>说在前面：刷题真的是一件残酷的事情，就好比以前大学的时候只剩两天就考试了，刚刚看了一遍就开始先做题一样的感觉，面对无数的套路，幸运的时候还能</description>
    </item>
    
    <item>
      <title>《effective C&#43;&#43;》from line 1 to line 12</title>
      <link>http://yuguocong.cn/posts/effective-cpp-1/</link>
      <pubDate>Mon, 09 Oct 2017 19:16:31 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/effective-cpp-1/</guid>
      <description>前面两章的内容主要是习惯使用c++，大部分都是《C++ primer》中的需要注意的一些东西，由于刚刚看完前面一本，所以有些还是有些印象的。这</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch16 模板与泛型编程</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch16/</link>
      <pubDate>Tue, 19 Sep 2017 12:47:04 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch16/</guid>
      <description>泛型编程与面向对象编程的区别是：面向对象编程能处理类型在程序运行之前都未知的情况；而在泛型编程中，在编译时就能获知类型了。 16.1 定义模板 模板程序</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch15-面向对象程序设计</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch15/</link>
      <pubDate>Tue, 19 Sep 2017 12:44:24 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch15/</guid>
      <description>面向对象三个基本概念：数据抽象、继承和动态绑定（java里说的多态）。这章主要内容是继承和动态绑定。 15.1 OOP：概述 15.2 定义基类和派生类 基类希望</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch13 拷贝控制</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch13/</link>
      <pubDate>Thu, 14 Sep 2017 11:55:33 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch13/</guid>
      <description>通过定义的五种特殊的成员函数，控制类的对象在拷贝。赋值、移动或销毁时做什么。包括：拷贝构造函数、拷贝赋值运算符、拷贝赋值运算符、移动赋值运算</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch14 重载运算符和类型转换</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch14/</link>
      <pubDate>Thu, 14 Sep 2017 11:55:33 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch14/</guid>
      <description>&lt;h3 id=&#34;ch14-重载运算与类型转化&#34;&gt;ch14 重载运算与类型转化&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;当运算符作用于类的对象的时，通过重载运算符，使不同的运算符对于不同的类有着特定的含义，一方面能够简化类的使用者的逻辑，另一方面也能是程序更易于编写和阅读，而不至于编写更多的函数。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch7 类</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch7/</link>
      <pubDate>Tue, 27 Jun 2017 17:55:33 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch7/</guid>
      <description>类是面向对象编程的基础，使用类定义自己的数据类型，可以更方便的解决问题中的各种概念，使我们更容易编写、调试和修改程序。 7.1 定义抽象的数据类型 定</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch4 表达式</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch4/</link>
      <pubDate>Mon, 05 Jun 2017 17:55:33 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch4/</guid>
      <description>不管学习什么语言都会有这么一章，不管是c、java、Python，这都是会经历的一章，唉，无奈当时年少无知不止梦想是什么的我每每看到这些的时</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch6 函数</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch6/</link>
      <pubDate>Mon, 05 Jun 2017 17:55:33 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch6/</guid>
      <description>涉及到函数之后，我认为已经是基础的较后面的部分，因为这开始慢慢涉及到了一门语言的思想观念，设计的想法，以及对编程人员的要求。所以这些部分不知</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch2 变量和基本类型</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch2/</link>
      <pubDate>Sun, 04 Jun 2017 17:55:33 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch2/</guid>
      <description>数据类型决定了程序中数据和操作的意义。 2.1 基本内置类型 基本数据类型：** 算数类型 空类型（void） **,其中算数类型包括：字符、正整数、布尔值</description>
    </item>
    
    <item>
      <title>《c&#43;&#43;primer》ch3 字符串、向量和数组</title>
      <link>http://yuguocong.cn/posts/cpp_primer_ch3/</link>
      <pubDate>Sun, 04 Jun 2017 17:55:33 +0800</pubDate>
      
      <guid>http://yuguocong.cn/posts/cpp_primer_ch3/</guid>
      <description>第3章 字符串、向量和数组 3.1 命名空间的using声明 每个名字都需要独立的using声明 头文件中不应该包含using声明 因为头文件的内容会拷贝到</description>
    </item>
    
  </channel>
</rss>
