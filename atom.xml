<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mianhk&#39;s notes</title>
  
  <subtitle>这个人很懒，动不动就不想写</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-24T14:41:43.295Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mianhk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器-Nginx-一个简单的例子</title>
    <link href="http://yoursite.com/2018/01/24/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2018/01/24/服务器-Nginx-一个简单的例子/</id>
    <published>2018-01-24T14:41:26.000Z</published>
    <updated>2018-01-24T14:41:43.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx-一个简单的例子"><a href="#服务器-Nginx-一个简单的例子" class="headerlink" title="服务器-Nginx-一个简单的例子"></a>服务器-Nginx-一个简单的例子</h3><p>直接贴一个几经磨难的简单的例子吧，虽然简单，但是有些不理解的地方，就出了很多错，但是因为这些错误，在对nginx理解稍微深刻了那么一点点的同时，对Linux的操作好像也有了一点进步啊。才知道为什么大家的命令都那么长，而我总是一步步慢慢的来了，一方面不熟，另一方面确实操作的不够多啊。</p><h4 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">user mianhk;</div><div class="line">worker_processes 3;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    use epoll;</div><div class="line">    #worker_connections 768;</div><div class="line">    worker_connections 768;</div><div class="line">    # multi_accept on;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Basic Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    sendfile on;</div><div class="line">    #tcp_nopush on;</div><div class="line">    #tcp_nodelay on;</div><div class="line">    keepalive_timeout 65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line">    # server_tokens off;</div><div class="line"></div><div class="line">    # server_names_hash_bucket_size 64;</div><div class="line">    # server_name_in_redirect off;</div><div class="line"></div><div class="line">    include /etc/nginx/mime.types;</div><div class="line">    default_type application/octet-stream;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # SSL Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</div><div class="line">    #ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Logging Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    access_log /var/log/nginx/access.log;</div><div class="line">    error_log /var/log/nginx/error.log;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Gzip Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    gzip on;</div><div class="line">    gzip_disable &quot;msie6&quot;;</div><div class="line"></div><div class="line">    # gzip_vary on;</div><div class="line">    # gzip_proxied any;</div><div class="line">    # gzip_comp_level 6;</div><div class="line">    # gzip_buffers 16 8k;</div><div class="line">    # gzip_http_version 1.1;</div><div class="line">    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Virtual Host Configs</div><div class="line">    ##</div><div class="line">    ## 配置虚拟主机1</div><div class="line">    server &#123;</div><div class="line">        listen        8081;   #监听端口</div><div class="line">        server_name   myServer1;</div><div class="line">        access_log  var/myweb/server1/log/access_log;  #配置日志存放路径</div><div class="line">        error_page 404 /404.thml;   # 错误界面</div><div class="line"></div><div class="line">        location /server1/location1 &#123; #配置/server1/location1请求的location</div><div class="line">            root /var/myweb;</div><div class="line">            index index.svr1-loc1.htm;</div><div class="line">        &#125;</div><div class="line">        location /server1/location2 &#123;  #配置/server1/location2请求的location</div><div class="line">            root /var/myweb;</div><div class="line">            index index.svr1-locl2.htm;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;   #配置虚拟主机myServer2</div><div class="line">        listen     8082;</div><div class="line">        server_name 192.168.1.31;</div><div class="line">        access_log var/myweb/server2/log/access_log;</div><div class="line">        error_page 404 /404.thml;  #对错误页面定向</div><div class="line"></div><div class="line">        location /server2/location1 &#123;</div><div class="line">            root /var/myweb;</div><div class="line">            index index.svr2-loc1.htm;</div><div class="line">        &#125;</div><div class="line">        location /svr2/loc2 &#123;</div><div class="line">            alias /myweb/server2/location2/;  #对location的URI进行更改</div><div class="line">            index index.svr2-locl2.htm;</div><div class="line">        &#125;</div><div class="line">        location = /404.html &#123;  #配置错误页面转向</div><div class="line">            root /var/myweb;</div><div class="line">            index 404.html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    #include /etc/nginx/conf.d/*.conf;</div><div class="line">    #include /etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>在浏览器中输入：<code>http://111.230.231.95:8081/server1/location1/</code><img src="https://github.com/mianhk/image-save/blob/master/Linux/002/001.jpg?raw=true" alt=""><br>输入<code>http://111.230.231.95:8082/server2/location1/</code>显示：<br><img src="https://github.com/mianhk/image-save/blob/master/Linux/002/002.jpg?raw=true" alt=""></p><h4 id="出现的问题分析"><a href="#出现的问题分析" class="headerlink" title="出现的问题分析"></a>出现的问题分析</h4><ul><li><p>root目录的位置：<br>原来root的目录虽然写的是/var/myweb，但是实际发现位置是 在<code>/usr/share/nginx</code>下面，所以需要拷过去，具体这个位置是在哪里设置的，因为已经把所有其他的include都关掉了，所以可能是ubuntu下安装之后的默认目录，就像默认监听的80端口的页面其实在<code>var/www/html</code>下面一样。 导致出了各种莫名其妙的错误啊:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">root@VM-95-58-ubuntu:/etc/nginx# systemctl status nginx.service</div><div class="line">● nginx.service - A high performance web server and a reverse proxy server</div><div class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</div><div class="line">   Active: failed (Result: exit-code) since Wed 2018-01-24 22:05:09 CST; 1s ago</div><div class="line">  Process: 32576 ExecStop=/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid (code</div><div class="line">  Process: 21311 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)</div><div class="line">  Process: 3307 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=1/FAI</div><div class="line"> Main PID: 21314 (code=exited, status=0/SUCCESS)</div><div class="line"></div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: Starting A high performance web server and a reverse proxy server.</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu nginx[3307]: nginx: [emerg] open() &quot;/usr/share/nginx/var/myweb/server1/log/acc</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu nginx[3307]: nginx: configuration file /etc/nginx/nginx.conf test failed</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: nginx.service: Control process exited, code=exited status=1</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: Failed to start A high performance web server and a reverse proxy</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: nginx.service: Unit entered failed state.</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: nginx.service: Failed with result &apos;exit-code&apos;.</div></pre></td></tr></table></figure></li><li><p>另一个就是关于config文件的格式，一定要仔细写，需要加分号，然后就是最后的<code>/</code>，对于nginx的配置来说，是意义重大的，后面可能会说到这个问题，但是现在还是要写上。</p></li><li>刚刚测试，好像发现这里还有其他的问题，比如我的location2好像打不开啊，尴尬，明天再看看出了什么问题。。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx-一个简单的例子&quot;&gt;&lt;a href=&quot;#服务器-Nginx-一个简单的例子&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx-一个简单的例子&quot;&gt;&lt;/a&gt;服务器-Nginx-一个简单的例子&lt;/h3&gt;&lt;p&gt;直接贴一个几经磨难的
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx基础配置</title>
    <link href="http://yoursite.com/2018/01/24/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/01/24/服务器-Nginx基础配置/</id>
    <published>2018-01-24T12:50:05.000Z</published>
    <updated>2018-01-24T12:50:37.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx基础配置"><a href="#服务器-Nginx基础配置" class="headerlink" title="服务器-Nginx基础配置"></a>服务器-Nginx基础配置</h3><h4 id="nginx-conf文件结构"><a href="#nginx-conf文件结构" class="headerlink" title="nginx.conf文件结构"></a>nginx.conf文件结构</h4><p>Nginx的默认配置文件为：<code>nginx.conf</code>，文件一共由三个部分组成，分别为：<code>全局块、events块、http块</code>在<code>http块</code>中，包含http全局块，多个server块。在每个<code>server块</code>中，可以包含多个server块和location块。</p><p>同一模块中嵌套的配置块。各个之间不存在次序关系，也就是是同时生效的。另外，在高一等级的配置可能会被更内层括号内的设置覆盖，这个其实跟我们的继承或者函数中差不多。</p><ul><li>全局块：（从配置文件开始到events的一部分）主要影响Nginx服务器整体运行的配置指令 ，顾名思义，能够作用于全局。</li><li>evevts块：主要影响Nginx服务器与用户的网络连接。这部分对Nginx服务器性能影响较大。</li><li>http块：代理、缓存和日志定义等绝大部分功能和第三方模块的配置都在这部分。由于http块包括server块，这里用http全局块表示不包含server块的部分。</li><li>server块：和“虚拟主机”密切联系。利用虚拟主机技术可以避免为每一个要用运行的网站提供单独的Nginx服务器，也不需要为每个网站对应一组nginx进程。一个http块中可以包含多个server块，每个server块相当于一个虚拟主机，它内部可以有多台主机联合提供服务，一起对外提供在逻辑上的一组服务（或网站）。server全局块一般配置的是：虚拟主机的监听配置和本虚拟主机的名称和IP配置。</li><li>location块：location块其实是server块的一个指令，主要作用是：基于Nginx服务器接收到的字符串，对除虚拟主机名称外的字符串进行匹配，对特定的请求进行处理、地址定向、数据缓存和应答控制等功能。</li></ul><h4 id="详细配置分析"><a href="#详细配置分析" class="headerlink" title="详细配置分析"></a>详细配置分析</h4><p>接下来是一个详细解释的配置的设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">                                     #全局块开始</div><div class="line">user user [group];                       #可以开启nginx服务的用户名user和所对应的group（可选）</div><div class="line">#user nobody nobody;         #注释或者nobody可以表示任何人都能启动</div><div class="line">worker_processes number|auto;               #开启的工作进程的数量，auto则会根据系统自动</div><div class="line">pid /run/nginx.pid;                  #存储进程pid的文件，记得不止要加上路径，还要加上文件名，并且开启服务的用户需要对该文件有权限</div><div class="line"></div><div class="line">events &#123;                             #events块</div><div class="line">    worker_connections 768;          #每一个工作进程能开启的最大连接个数：总的连接个数total=worker_processes*worker_connections</div><div class="line">    # accept_mutex on;     #设置网络连接的序列化，解决“惊群”的问题（当一个网络连接到来时，多个睡眠进程被唤醒，影响系统性能）</div><div class="line">    # multi_accept on;  #允许接受多个网络连接</div><div class="line">    #use method;  #时间驱动模型的选择:select|poll|kqueue|epoll|rtsig|/dev/poll|eventport</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;                               #http块</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Basic Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    sendfile on;</div><div class="line">    tcp_nopush on;</div><div class="line">    tcp_nodelay on;</div><div class="line">    keepalive_timeout 65;   #连接超时时间</div><div class="line">    #keepalive_requests number; #单连接请求数上限</div><div class="line">    types_hash_max_size 2048;</div><div class="line">    # server_tokens off;</div><div class="line"></div><div class="line">    # server_names_hash_bucket_size 64;</div><div class="line">    # server_name_in_redirect off;</div><div class="line"></div><div class="line">    include /etc/nginx/mime.types;   #MIME-types存储了媒体资源的类型</div><div class="line">    default_type application/octet-stream; #处理前端请求的MIME类型，可在http、server、location中定义</div><div class="line"></div><div class="line">    ##</div><div class="line">    # SSL Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Logging Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    access_log /var/log/nginx/access.log;  # 日志存放文件名，该指令可以在全局块、http块和server块中，作用域不同</div><div class="line">    error_log /var/log/nginx/error.log;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Gzip Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    gzip on;</div><div class="line">    gzip_disable &quot;msie6&quot;;</div><div class="line"></div><div class="line">    # gzip_vary on;</div><div class="line">    # gzip_proxied any;</div><div class="line">    # gzip_comp_level 6;</div><div class="line">    # gzip_buffers 16 8k;</div><div class="line">    # gzip_http_version 1.1;</div><div class="line">    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Virtual Host Configs</div><div class="line">    ##</div><div class="line"></div><div class="line">    include /etc/nginx/conf.d/*.conf;   # include 引入配置文件，支持相对路径</div><div class="line">    include /etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx基础配置&quot;&gt;&lt;a href=&quot;#服务器-Nginx基础配置&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx基础配置&quot;&gt;&lt;/a&gt;服务器-Nginx基础配置&lt;/h3&gt;&lt;h4 id=&quot;nginx-conf文件结构&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx安装和基本配置</title>
    <link href="http://yoursite.com/2018/01/23/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/01/23/服务器-Nginx安装和基本配置/</id>
    <published>2018-01-23T14:25:21.000Z</published>
    <updated>2018-01-23T14:26:39.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx安装和基本配置"><a href="#服务器-Nginx安装和基本配置" class="headerlink" title="服务器-Nginx安装和基本配置"></a>服务器-Nginx安装和基本配置</h3><h4 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h4><p>没有看书上，直接在ubuntu输了一个nginx，大概是ubuntu的支持比较好，直接提醒可以安装，于是就毫不客气的装了一下就启动了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div><div class="line">sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure></p><p>接下来直接在浏览器里面打开，就能看到hello,Nginx这样欣慰 的界面了。</p><p>之后能够在文件夹<code>/etc</code>中看到我们的配置的文件：<br><img src="https://github.com/mianhk/image-save/blob/master/server/001/001.jpg?raw=true" alt=""><br>在<code>var/www/html</code>文件夹中能看到<code>index.html</code>文件，即是我们的主页文件。<br><strong>这里没有采用源码的方式安装，其实是觉得没有必要了。 </strong></p><h4 id="Nginx的启停"><a href="#Nginx的启停" class="headerlink" title="Nginx的启停"></a>Nginx的启停</h4><p>刚刚已经直接开启了Nginx了，其实关就更简单了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/nginx stop  #停止nginx</div><div class="line">sudo /etc/init.d/nginx restart # 重启nginx</div></pre></td></tr></table></figure></p><p>这里需要注意的是nginx的平滑重启：Nginx服务进程接受到信号后，首先读取新的Nginx的配置文件，如果新的配置文件语法正确，则启动新的Nginx服务，然后平缓的关闭旧的服务进程。否则，仍然使用旧的Nginx进程提供服务。</p><h4 id="Nginx服务器的升级"><a href="#Nginx服务器的升级" class="headerlink" title="Nginx服务器的升级"></a>Nginx服务器的升级</h4><p>平滑升级：Nginx服务接收到USR2信号后，首先将旧的nginx.pid文件（如果配置文件中更改过名字，也是相同的过程）添加后缀<code>.oldbin</code>，变为nginx.pid.oldbin文件；之后执行新版本Nginx服务器的二进制文件启动服务。如果新的服务启动成功，系统中将有新旧两个Nginx服务共同提供Web服务。之后，需要像旧的Nginx服务进程发送WINCH信号，使旧的Nginx服务平滑停止，并删除nginx.pid.oldbin文件。在发送WINCH信号之前，可以随时停止新的Nginx服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx安装和基本配置&quot;&gt;&lt;a href=&quot;#服务器-Nginx安装和基本配置&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx安装和基本配置&quot;&gt;&lt;/a&gt;服务器-Nginx安装和基本配置&lt;/h3&gt;&lt;h4 id=&quot;Nginx的安装&quot;
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-初识Nginx</title>
    <link href="http://yoursite.com/2018/01/23/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%88%9D%E8%AF%86Nginx/"/>
    <id>http://yoursite.com/2018/01/23/服务器-初识Nginx/</id>
    <published>2018-01-23T13:39:44.000Z</published>
    <updated>2018-01-23T13:41:25.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识Nginx"><a href="#初识Nginx" class="headerlink" title="初识Nginx"></a>初识Nginx</h3><h4 id="Nginx的历史"><a href="#Nginx的历史" class="headerlink" title="Nginx的历史"></a>Nginx的历史</h4><p>Netcraft公司，1994年在英国成立。</p><h4 id="常见服务器"><a href="#常见服务器" class="headerlink" title="常见服务器"></a>常见服务器</h4><ul><li>Apache服务器：目前最广泛使用的web服务器，由于使用了以“进程”为基础的结构，会消耗更多的系统开支。因此通常对Apache web进行扩容的时候，是增加服务器或者扩充集群节点而不是增加处理器。</li><li>Microsoft IIS：微软的，付费软件，部署成本较高。</li><li>Tomcat服务器：最初Sun公司开发，是官方推荐的Servlet和JSP容器，在中小型系统和并发访问用户不是很多的时候，可以作为轻量级应用服务器。一般应用中，通常作为Apache服务器的扩展部分，为运行JSP页面和Servlet提供服务，提供的Servlet容器是Tomcat的默认模式。Tomcat也具有处理HTML页面的功能，只是处理静态页面的能力不如Apache服务器。</li><li>Lighttpd服务器：德国开源的一个轻量级web服务器，它专门针对高性能网站，提供一种安全、快速、兼容性良好并且灵活的Web Server的环境。同时有非常低的内存开销、CPU占用率低、模块丰富。  但是最为轻量服务器，与Apache这种大型服务器相比还有差距。</li><li>Nginx</li></ul><h4 id="Nginx的功能特性"><a href="#Nginx的功能特性" class="headerlink" title="Nginx的功能特性"></a>Nginx的功能特性</h4><h5 id="基本的HTTP服务："><a href="#基本的HTTP服务：" class="headerlink" title="基本的HTTP服务："></a>基本的HTTP服务：</h5><ul><li>作为HTTP代理服务器和反向代理服务器</li><li>支持通过缓存加速访问</li><li>完成简单的负载均衡和容错</li><li>支持包过滤</li><li>支持SSL<h5 id="高级HTTP服务："><a href="#高级HTTP服务：" class="headerlink" title="高级HTTP服务："></a>高级HTTP服务：</h5></li><li>进行自定义配置</li><li>支持虚拟主机</li><li>支持URL重定向</li><li>支持网络监控</li><li>支持流媒体传输<h5 id="邮件服务："><a href="#邮件服务：" class="headerlink" title="邮件服务："></a>邮件服务：</h5></li><li>支持IMAP/POP3代理服务</li><li>支持内部SMTP代理服务</li></ul><h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h4><h5 id="HTTP代理和反向代理"><a href="#HTTP代理和反向代理" class="headerlink" title="HTTP代理和反向代理"></a>HTTP代理和反向代理</h5><p>在反向代理服务方面，Nginx服务器转发前端请求性能稳定，并且后端转发与业务配置相互分离，配置相当灵活。</p><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>负载均衡：一是将单一的重负载分担到多个网络节点做并行处理，每个节点处理结束后将结果汇总返回给用户；二是讲大量的前端并发访问或数据流量分担到多个后端网络节点上分别处理，有效减少前端用户等待响应的时间。Nginx服务器的负载均衡主要是对大量的前端访问和流量进行分流，以保证前端用户的访问效率。</p><p>Nginx服务器的负载均衡策略可以划分为两类：</p><ul><li>内置策略：轮询、加权轮询和IP hash</li><li>扩展策略：通过第三方模块实现，常见：url hash、fair</li></ul><h5 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初识Nginx&quot;&gt;&lt;a href=&quot;#初识Nginx&quot; class=&quot;headerlink&quot; title=&quot;初识Nginx&quot;&gt;&lt;/a&gt;初识Nginx&lt;/h3&gt;&lt;h4 id=&quot;Nginx的历史&quot;&gt;&lt;a href=&quot;#Nginx的历史&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux用户管理</title>
    <link href="http://yoursite.com/2018/01/23/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/01/23/Linux用户管理/</id>
    <published>2018-01-23T13:04:16.000Z</published>
    <updated>2018-01-23T13:05:01.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux账户管理"><a href="#Linux账户管理" class="headerlink" title="Linux账户管理"></a>Linux账户管理</h3><h4 id="新建账户（ubuntu）"><a href="#新建账户（ubuntu）" class="headerlink" title="新建账户（ubuntu）"></a>新建账户（ubuntu）</h4><p>新建账户比较简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd mianhk1  #mianhk1为账户名</div></pre></td></tr></table></figure></p><p>之后可以在三个文件夹看到新账户的信息：<br><img src="https://github.com/mianhk/image-save/blob/master/Linux/002/001.jpg?raw=true" alt=""><br>此时可以看到，shadow文件中，第二个存密码的位置是一个!,此时新建的账户还没有密码，当然也可以看到home目录下没有mianhk1的文件夹，此时需要先改密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd mianhk1 #修改密码</div></pre></td></tr></table></figure><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/002/002.jpg?raw=true" alt=""><br>这时候就能看到shadow文件中保存的密码了，同时，也能在home目录下看到miahk1的文件夹了。但是此时切换到mianhk1账户时，看到的仍然是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mianhk1@VM-95-58-ubuntu:/home$ ls</div><div class="line">mianhk  mianhk1</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div></pre></td></tr></table></figure></p><p>这个原因其实是无法建立bash的一些文件，原因在上图中可以看到，因为我们没有指定系统的默认bash。通过修改之后，添加默认的bash还是出现了下列的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[sudo] password for mianhk1:</div><div class="line">mianhk1 is not in the sudoers file.  This incident will be reported.</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div></pre></td></tr></table></figure></p><p>原因还没有权限，用root用户看了一下，发现原来mianhk1的所有者原来是root用户，直接修改拥有者和用户权限吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chown mianhk1 mianhk1  #修改拥有者用户</div><div class="line">chgrp mianhk1 mianhk1  #修改拥有组</div><div class="line">chmod +040 mianhk1     #修改文件夹权限</div></pre></td></tr></table></figure></p><p>之后可以通过命令查看生成的账户的信息了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@VM-95-58-ubuntu:/home# useradd -D</div><div class="line">GROUP=100           #用户组</div><div class="line">HOME=/home          #用户家目录的位置</div><div class="line">INACTIVE=-1         #密码失效日，在 shadow 内的第 7 栏</div><div class="line">EXPIRE=             #账号失效日，在 shadow 内的第 8 栏</div><div class="line">SHELL=/bin/sh       #预设的shell</div><div class="line">SKEL=/etc/skel      #用户家目录的内容数据参考目录</div><div class="line">CREATE_MAIL_SPOOL=no#是否主动帮使用者建立邮件信箱(mailbox)</div></pre></td></tr></table></figure></p><p>之后看了一下centos的，发现根本直接新建就好使了啊，<strong>^_^</strong>尴尬</p><p>中间还出了个很尴尬的事情，一不小心删了/etc/passwd 文件。。<br>没事，想想这么重要的文件肯定会有备份的，果然是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/passwd- /etc/passwd</div></pre></td></tr></table></figure></p><h4 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deluser mianhk1  #mianhk1 为账户的名字</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux账户管理&quot;&gt;&lt;a href=&quot;#Linux账户管理&quot; class=&quot;headerlink&quot; title=&quot;Linux账户管理&quot;&gt;&lt;/a&gt;Linux账户管理&lt;/h3&gt;&lt;h4 id=&quot;新建账户（ubuntu）&quot;&gt;&lt;a href=&quot;#新建账户（ubuntu）&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux 后台开发" scheme="http://yoursite.com/tags/Linux-%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务器Linux挖比特币</title>
    <link href="http://yoursite.com/2018/01/19/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E6%8C%96%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    <id>http://yoursite.com/2018/01/19/腾讯云服务器Linux挖比特币/</id>
    <published>2018-01-19T14:56:59.000Z</published>
    <updated>2018-01-19T14:57:56.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="腾讯云服务器Linux挖比特币"><a href="#腾讯云服务器Linux挖比特币" class="headerlink" title="腾讯云服务器Linux挖比特币"></a>腾讯云服务器Linux挖比特币</h3><p>毕竟又是一个周五的下午，有点等着放假，就想起来现在的挖矿，虽然现在挖矿都是专门的矿机或者是显卡之类的。但是经过计算，好像自己挖的话连电费都不够，就想试试云服务器可不可以，虽然CPU做这种傻瓜的计算问题可能不如专门的器件是吧。<br>这是我的ubuntu服务器的。</p><ul><li>注册一个矿池账号，推荐<a href="https://www.f2pool.com/" target="_blank" rel="external">https://www.f2pool.com/</a></li><li>通过ssh连接远程服务器</li><li><p>下载挖矿工具<br>这里别人推荐的地址可能有问题，或者我这个之后也会升级，所以可以直接去官网下载最新的推荐的版本就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://downloads.sourceforge.net/project/cpuminer/pooler-cpuminer-2.5.0-linux-x86_64.tar.gz</div></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xvzf ooler-cpuminer-2.5.0-linux-x86_64.tar.gz</div></pre></td></tr></table></figure></li><li><p>nohup命令后台一直运行<br>注意：不同的端口对应不同的币，一个用户名可以在后面例如：mianhk.001，mianhk.002代表不同的矿机。userpass后面是账户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 以下不同的地址对应的是不同的矿</div><div class="line">nohup ./minerd -a scrypt -o stratum+tcp://stratum.f2pool.com:3333 --userpass=账号:密码 &amp;</div><div class="line"></div><div class="line">nohup ./minerd -a scrypt -o stratum+tcp://xmr.f2pool.com:13531 --userpass=账号:密码 &amp;</div><div class="line"></div><div class="line">nohup ./minerd -a scrypt -o stratum+tcp://zec.f2pool.com:3357 --userpass=账号:密码 &amp;</div></pre></td></tr></table></figure></li></ul><p>之后，就可以打开日志文件看到在挖矿了。我们还需要在网站填上自己的比特币钱包地址。但是这个挖的数目确实有点小啊<br>  <img src="https://github.com/mianhk/image-save/blob/master/tools/001/001.png?raw=true" alt=""></p><p>之后打开腾讯云服务器可以看到CPU已经跑满了啊。<br><img src="https://github.com/mianhk/image-save/blob/master/tools/001/002.png?raw=true" alt=""></p><p>然后之后就看到网上说云服务器跑的太满的话，会被封的，那就把CPU限制一下吧。<br>步骤如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cpulimit</div><div class="line">top  # 查看pid</div><div class="line">cpulimit -p pid -l n  # n是限制的值</div></pre></td></tr></table></figure></p><p><strong>下面是centos的，因为有两台服务器，但是centos放的是vpn，平时还没装过软件呢</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install epel-release</div><div class="line">yum install cpulimit</div><div class="line">top  # 查看pid</div><div class="line">cpulimit -p pid -l n  # n是限制的值</div></pre></td></tr></table></figure></p><p>限制之后，就能明显的看到CPU占用没有满了：<br><img src="https://github.com/mianhk/image-save/blob/master/tools/001/003.jpg?raw=true" alt=""><br><img src="https://github.com/mianhk/image-save/blob/master/tools/001/004.jpg?raw=true" alt=""></p><p>哈哈，就当玩玩吧，多了解一下区块链，总得跟上节奏吧，虽然已经有点晚了的样子</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;腾讯云服务器Linux挖比特币&quot;&gt;&lt;a href=&quot;#腾讯云服务器Linux挖比特币&quot; class=&quot;headerlink&quot; title=&quot;腾讯云服务器Linux挖比特币&quot;&gt;&lt;/a&gt;腾讯云服务器Linux挖比特币&lt;/h3&gt;&lt;p&gt;毕竟又是一个周五的下午，有点等着放假
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux修改用户名和所属组</title>
    <link href="http://yoursite.com/2018/01/17/Linux%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E6%89%80%E5%B1%9E%E7%BB%84/"/>
    <id>http://yoursite.com/2018/01/17/Linux修改用户名和所属组/</id>
    <published>2018-01-17T11:48:22.000Z</published>
    <updated>2018-01-17T11:50:32.127Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux修改用户名和所属组"><a href="#Linux修改用户名和所属组" class="headerlink" title="Linux修改用户名和所属组"></a>Linux修改用户名和所属组</h3><p>腾讯云的云服务器的，初始的用户名和主机名都是分配的。主机名其实还好了，用户名总是一个ubuntu有点看的不爽，正好看到了用户管理，就在这准备改一下，mianhk显然是一个更好一点的选择是吧。_<em>^ </em> ^_</p><h4 id="更改用户名"><a href="#更改用户名" class="headerlink" title="更改用户名"></a>更改用户名</h4><h5 id="修改sudoers文件"><a href="#修改sudoers文件" class="headerlink" title="修改sudoers文件"></a>修改sudoers文件</h5><p>因为之后的操作，直接进入root用户操作。<br>将要改的名字提前赋予较高的权限，防止修改下面文件的过程中出现权限不足的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sudoers</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/001.jpg?raw=true" alt=""></p><h5 id="修改shadow文件"><a href="#修改shadow文件" class="headerlink" title="修改shadow文件"></a>修改shadow文件</h5><p>shadow文件存储与登陆有关的内容，格式如下：<br>username: passwd: lastchg: min: max: warn: inactive: expire: flag<br>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:<br>警告时间:不活动时间:失效时间:标志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadow</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/002.jpg?raw=true" alt=""></p><h5 id="修改开始目录"><a href="#修改开始目录" class="headerlink" title="修改开始目录"></a>修改开始目录</h5><p>每个用户都有一个家目录，远程登录的时候就会进入家目录。包含用户相关配置信息,例如：<img src="https://github.com/mianhk/image-save/blob/master/Linux/001/003.jpg?raw=true" alt=""><br>现在直接将这个家目录修改就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv ubuntu mianhk  # ubuntu 原来的目录</div></pre></td></tr></table></figure></p><h5 id="修改passwd文件"><a href="#修改passwd文件" class="headerlink" title="修改passwd文件"></a>修改passwd文件</h5><p>passwd的文件格式是：<br>用户名: 密码 : uid  : gid :用户描述：主目录：登陆shell<br>需要将用户描述和主目录都改成新的，不然无法读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/passwd</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/004.jpg?raw=true" alt=""></p><h5 id="修改所属组"><a href="#修改所属组" class="headerlink" title="修改所属组"></a>修改所属组</h5><p>其实这里的修改，只需要将所有原来的ubuntu所属的组替换为mianhk即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/group</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/005.jpg?raw=true" alt=""></p><h5 id="删除ubuntu"><a href="#删除ubuntu" class="headerlink" title="删除ubuntu"></a>删除ubuntu</h5><p>再次进入/etc/sudoers 中，讲ubuntu删除</p><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><p>　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux修改用户名和所属组&quot;&gt;&lt;a href=&quot;#Linux修改用户名和所属组&quot; class=&quot;headerlink&quot; title=&quot;Linux修改用户名和所属组&quot;&gt;&lt;/a&gt;Linux修改用户名和所属组&lt;/h3&gt;&lt;p&gt;腾讯云的云服务器的，初始的用户名和主机名都是
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux 后台开发" scheme="http://yoursite.com/tags/Linux-%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-36-Valid-Sudoku</title>
    <link href="http://yoursite.com/2018/01/14/LeetCode-36-Valid-Sudoku/"/>
    <id>http://yoursite.com/2018/01/14/LeetCode-36-Valid-Sudoku/</id>
    <published>2018-01-14T13:53:42.000Z</published>
    <updated>2018-01-14T13:54:13.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-36-Valid-Sudoku"><a href="#LeetCode-36-Valid-Sudoku" class="headerlink" title="LeetCode-36-Valid-Sudoku"></a>LeetCode-36-Valid-Sudoku</h3><blockquote><p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.<br>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br><a href="http://img.blog.csdn.net/20160530213836839" target="_blank" rel="external"></a></p></blockquote><p>判断一个二维数组是不是数独数组。要求是：同行同列，斜对角不能有相同的数组，这里需要定义三个数组，当然参考了一下讨论区一个大神的代码。采用行列，竖列和斜列。其中比较惊艳的是k=i/3*3+j/3;这里可以直接得到斜对角的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) &#123;</div><div class="line">        int used1[9][9]=&#123;0&#125;,used2[9][9]=&#123;0&#125;,used3[9][9]=&#123;0&#125;;</div><div class="line">        for(int i=0;i&lt;board.size();++i)&#123;</div><div class="line">            for(int j=0;j&lt;board[i].size();++j)&#123;</div><div class="line">                if(board[i][j]!=&apos;.&apos;)&#123;</div><div class="line">                    int num=board[i][j]-&apos;0&apos;-1,k=i/3*3+j/3;</div><div class="line">                    if(used1[i][num]||used2[j][num]||used3[k][num])</div><div class="line">                        return false;</div><div class="line">                    used1[i][num]=used2[j][num]=used3[k][num]=1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h4><p><a href="http://blog.csdn.net/u012050154/article/details/51541380" target="_blank" rel="external">http://blog.csdn.net/u012050154/article/details/51541380</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-36-Valid-Sudoku&quot;&gt;&lt;a href=&quot;#LeetCode-36-Valid-Sudoku&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-36-Valid-Sudoku&quot;&gt;&lt;/a&gt;LeetCode-36-Va
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-34-Search-for-a-Range</title>
    <link href="http://yoursite.com/2018/01/14/LeetCode-34-Search-for-a-Range/"/>
    <id>http://yoursite.com/2018/01/14/LeetCode-34-Search-for-a-Range/</id>
    <published>2018-01-14T13:52:38.000Z</published>
    <updated>2018-01-14T13:53:13.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-34-Search-for-a-Range"><a href="#LeetCode-34-Search-for-a-Range" class="headerlink" title="LeetCode-34-Search-for-a-Range"></a>LeetCode-34-Search-for-a-Range</h3><blockquote><p>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.<br>Your algorithm’s runtime complexity must be in the order of O(log n).<br>  If the target is not found in the array, return [-1, -1].</p></blockquote><p>在一个排序的数组中找到出现这个值的起点和重点。很容易想到的是二分查找了。复杂度为<code>nlog(n)</code>。思路如下，先二分查找，找到下界，如果下界lo的值不等于target时，直接返回{-1，-1}，否则，直接将下界添加到res中。之后重置上界，同样的方法搜索上界。注意到，<strong>由于每次循环中，我们只考虑了一个界，所以只有一个界能mid+1，否则就会出现相等的也被else处理了。写的时候就是这个问题没有考虑好，折腾了很久。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class="line">        vector&lt;int&gt; res=&#123;-1,-1&#125;;</div><div class="line">        if(nums.size()&lt;=0)</div><div class="line">            return res;</div><div class="line">        int lo=0,hi=nums.size()-1;</div><div class="line">        while(lo&lt;hi)&#123;  //找下界</div><div class="line">            int mid=(lo+hi)/2;</div><div class="line">            if(nums[mid]&lt;target)</div><div class="line">                lo=mid+1;</div><div class="line">            else</div><div class="line">                hi=mid;</div><div class="line">        &#125;</div><div class="line">        if((nums[lo]!=target))&#123;</div><div class="line">            return res;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">            res[0]=lo;</div><div class="line">        hi=nums.size()-1;</div><div class="line">        while(lo&lt;hi)&#123;  //找上界</div><div class="line">            int mid=(lo+hi)/2+1;</div><div class="line">            if(nums[mid]&gt;target)</div><div class="line">                hi=mid-1;</div><div class="line">            else</div><div class="line">                lo=mid;</div><div class="line">        &#125;</div><div class="line">        res[1]=hi;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>当然还看到有用stl的方法的，直接用lower_bound()和upper_bound()函数，速度要快一些。虽然觉得stl应该也是一样的原理写的吧。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class="line">        if (nums.empty()) return&#123; -1, -1 &#125;;</div><div class="line"></div><div class="line">    auto iter1 = lower_bound(nums.begin(), nums.end(), target);</div><div class="line">    auto iter2 = upper_bound(nums.begin(), nums.end(), target);</div><div class="line"></div><div class="line">    if (iter1 == nums.end()) return&#123; -1, -1 &#125;;</div><div class="line"></div><div class="line">    if ((*iter1) != target) return&#123; -1, -1 &#125;;</div><div class="line">    vector&lt;int&gt; tmp(2, 0);</div><div class="line">    tmp[0] = iter1 - nums.begin();</div><div class="line"></div><div class="line">    --iter2;</div><div class="line">    tmp[1] = iter2 - nums.begin();</div><div class="line">    return tmp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-34-Search-for-a-Range&quot;&gt;&lt;a href=&quot;#LeetCode-34-Search-for-a-Range&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-34-Search-for-a-Range&quot;&gt;
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-32-Longest-Valid-Parentheses</title>
    <link href="http://yoursite.com/2018/01/12/LeetCode-32-Longest-Valid-Parentheses/"/>
    <id>http://yoursite.com/2018/01/12/LeetCode-32-Longest-Valid-Parentheses/</id>
    <published>2018-01-12T09:28:31.000Z</published>
    <updated>2018-01-12T09:28:43.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-32-Longest-Valid-Parentheses"><a href="#LeetCode-32-Longest-Valid-Parentheses" class="headerlink" title="LeetCode-32-Longest-Valid-Parentheses"></a>LeetCode-32-Longest-Valid-Parentheses</h3><blockquote><p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.<br>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.<br>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p></blockquote><p>表示这是一道没有看懂题目的题，看到题目的难度是hard，但是自己的想法很简答，以为直接一个栈就可以了。。 too young啊</p><p>提交之后才知道，原来还要解决类似<code>()((()))</code>这类问题，所以这是一个动态规划的问题啊。<br>昨天看了一下动态规划，我们首先要构建D数组，如下所示的<code>vector longest</code>，负责存下当前第i个的长度。需要考虑的情况如下。<br>只有当s[i]为<code>)</code>时，才需要判断，如果它的左边是<code>(</code>或者<code>)</code>的情况。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int longestValidParentheses(string s) &#123;</div><div class="line">        if(s.length()&lt;=1)</div><div class="line">            return 0;</div><div class="line">        vector&lt;int &gt; longest(s.size(),0);</div><div class="line">        int curMax=0;</div><div class="line">        for(int i=1;i&lt;s.length();++i)&#123;</div><div class="line">            if(s[i]==&apos;)&apos;)&#123;</div><div class="line">                if(s[i-1]==&apos;(&apos;)&#123;</div><div class="line">                    longest[i]=(i-2&gt;=0?(longest[i-2]+2):2);</div><div class="line">                    curMax=curMax&gt;longest[i]?curMax:longest[i];</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    if(i-longest[i-1]-1&gt;=0&amp;&amp;s[i-longest[i-1]-1]==&apos;(&apos;)&#123;</div><div class="line">                        longest[i]=longest[i-1]+2+((i-longest[i-1]-2&gt;=0)?longest[i-longest[i-1]-2]:0);</div><div class="line">                        curMax=curMax&gt;longest[i]?curMax:longest[i];</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return curMax;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-32-Longest-Valid-Parentheses&quot;&gt;&lt;a href=&quot;#LeetCode-32-Longest-Valid-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-32-Longes
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-31-Next-Permutation</title>
    <link href="http://yoursite.com/2018/01/12/LeetCode-31-Next-Permutation/"/>
    <id>http://yoursite.com/2018/01/12/LeetCode-31-Next-Permutation/</id>
    <published>2018-01-12T09:26:20.000Z</published>
    <updated>2018-01-12T09:28:10.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-31-Next-Permutation"><a href="#LeetCode-31-Next-Permutation" class="headerlink" title="LeetCode-31-Next-Permutation"></a>LeetCode-31-Next-Permutation</h3><blockquote><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.</p></blockquote><p>这个排序主要是有两种情况，一个是类似于<code>3 1 2</code>这样的情况，直接从后往前找到第一个<code>nums[i]&lt;nums[i-1]</code>的，然后把<code>i</code>记下来，再与后面第一个小于<code>i</code>的<code>k</code>调换顺序之后，对<code>i</code>后面的进行反转排序就好了。<br>另一种情况是：已经反转成功了，类似<code>3 2 1</code>，需要直接置为最开始的状态，处理方式是，依旧从后往前找<code>i</code>,如果没有找到的话，就可以直接将序列反转即可。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int k=-1;</div><div class="line">        for(int i=nums.size()-2;i&gt;=0;--i)&#123;</div><div class="line">            if(nums[i]&lt;nums[i+1])&#123;</div><div class="line">                k=i;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(k==-1)&#123;</div><div class="line">            reverse(nums.begin(),nums.end());</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        int l=0;</div><div class="line">        for(int i=nums.size()-1;i&gt;k;--i)&#123;</div><div class="line">            if(nums[i]&gt;nums[k])&#123;</div><div class="line">                l=i;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        swap(nums[l],nums[k]);</div><div class="line">        reverse(nums.begin()+k+1,nums.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-31-Next-Permutation&quot;&gt;&lt;a href=&quot;#LeetCode-31-Next-Permutation&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-31-Next-Permutation&quot;&gt;&lt;/a&gt;Le
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-19-Remove-Nth-Node-From-End-of-List</title>
    <link href="http://yoursite.com/2018/01/12/LeetCode-19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://yoursite.com/2018/01/12/LeetCode-19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2018-01-12T09:25:23.000Z</published>
    <updated>2018-01-12T09:26:00.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a linked list, remove the nth node from the end of list and return its head.<br>For example,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</div><div class="line"></div><div class="line">   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</div></pre></td></tr></table></figure></p></blockquote><p>这个题目之前在剑指offer上就有，记得当时的方法是：采用两个指针，首先判断n的大小是否比链表的长度要大，大的话直接返回。否则采用一前一后两个指针，两个指针相差n，当前面的指针到链表末尾时，后面的指针所在的位置就是要删除的位置了。</p><p>当然，这是个很好的方法，不过看了一下后面的答案，以及前天看到的一个有点不是很明白的一个答案，才知道大家都用的是二级指针，二级指针的好处是，可以直接记住链表的头节点，而不至于总是去判断。这样显得对指针的理解就不一样了。可以看看下面的这篇文章。</p><p><a href="http://blogread.cn/it/article/6243?f=wb" target="_blank" rel="external">Linus：利用二级指针删除单向链表</a></p><p>下面是代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</div><div class="line">        ListNode **t1=&amp;head,*t2=head; //这样head一直指向的是头节点</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            t2=t2-&gt;next;</div><div class="line">        &#125;</div><div class="line">        while(t2!=nullptr)&#123;</div><div class="line">            t1=&amp;((*t1)-&gt;next);</div><div class="line">            t2=t2-&gt;next;</div><div class="line">        &#125;</div><div class="line">        *t1=(*t1)-&gt;next; //删除找到的节点</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>无奈每次提交总是有群禽兽比我的快那么多啊，我的12ms，别人的6ms。。</p><p>不过别人的代码一看好像也还好，思路都是差不多的，就是一些细节的地方注意的比较好，看来还得好好弄啊。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</div><div class="line">        int counter = 0;</div><div class="line">        if(!head || !n) &#123;</div><div class="line">            return head;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        ListNode *p = head;</div><div class="line">        ListNode **pp = &amp;head;</div><div class="line">        while(p &amp;&amp; n) &#123;</div><div class="line">            p = p-&gt;next;</div><div class="line">            n--;</div><div class="line">        &#125;</div><div class="line">        while(p) &#123;</div><div class="line">            p = p-&gt;next;</div><div class="line">            pp = &amp;((*pp)-&gt;next);</div><div class="line">        &#125;</div><div class="line">        ListNode *temp = *pp;</div><div class="line">        *pp = temp-&gt;next;</div><div class="line">        delete(temp);</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a linked list, remove the nth node from the end of list and return its head.&lt;br&gt;For example,&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-23-Merge-k-Sorted-Lists</title>
    <link href="http://yoursite.com/2018/01/11/LeetCode-23-Merge-k-Sorted-Lists/"/>
    <id>http://yoursite.com/2018/01/11/LeetCode-23-Merge-k-Sorted-Lists/</id>
    <published>2018-01-11T14:23:23.000Z</published>
    <updated>2018-01-23T13:05:09.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a>23. Merge k Sorted Lists</h3><blockquote><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p></blockquote><p>这个题乍一看只是对链表的一个排序，因为是很多个链表，所以很简单的想法就是将整个数组里面的两个链表分别进行排序。两个两个互相排序之后就能排好。这里用的是递归。当vector中的元素大于1说明还没有排完。<br>直接一下就AC了，但是一看detail，果然时间有点长。运行时间内93ms，看到别人的只需要20+。。<br>还是先记一下自己的代码 吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* merge2List(ListNode* lList,ListNode* rList)&#123;</div><div class="line">        if(lList==nullptr)</div><div class="line">            return rList;</div><div class="line">        if(rList==nullptr)</div><div class="line">            return lList;</div><div class="line">        if(lList-&gt;val&lt;rList-&gt;val)&#123;</div><div class="line">            lList-&gt;next=merge2List(lList-&gt;next,rList);</div><div class="line">            return lList;</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            rList-&gt;next=merge2List(lList,rList-&gt;next);</div><div class="line">            return rList;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</div><div class="line">        if(lists.size()==0)</div><div class="line">            return nullptr;</div><div class="line">        while(lists.size()&gt;1)&#123;</div><div class="line">            lists.push_back(merge2List(lists[0],lists[1]));</div><div class="line">            lists.erase(lists.begin());</div><div class="line">            lists.erase(lists.begin());</div><div class="line">        &#125;</div><div class="line">        return lists[0];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p> 看了一下别人的代码，用了优先队列，进行排序，没有重新写了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    class Cmp</div><div class="line">    &#123;</div><div class="line">    public:</div><div class="line">        bool operator() (ListNode *a, ListNode *b) const</div><div class="line">        &#123;</div><div class="line">            return a-&gt;val &gt; b-&gt;val;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">public:</div><div class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</div><div class="line">        priority_queue&lt;ListNode *, vector&lt;ListNode *&gt;, Cmp&gt; pq;</div><div class="line">        ListNode *head = NULL;</div><div class="line">        ListNode *cur = NULL;</div><div class="line">        int k = lists.size();</div><div class="line">        if(k == 0)</div><div class="line">        &#123;</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">        for(ListNode *list: lists)</div><div class="line">        &#123;</div><div class="line">            if(list != NULL)</div><div class="line">            &#123;</div><div class="line">                pq.push(list);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        while( !pq.empty() )</div><div class="line">        &#123;</div><div class="line">            ListNode *next = pq.top();</div><div class="line">            pq.pop();</div><div class="line">            if(next-&gt;next != NULL)</div><div class="line">            &#123;</div><div class="line">                pq.push(next-&gt;next);</div><div class="line">            &#125;</div><div class="line">            next-&gt;next = NULL;</div><div class="line">            if(head == NULL)</div><div class="line">            &#123;</div><div class="line">                head = next;</div><div class="line">                cur = head;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                cur-&gt;next = next;</div><div class="line">                cur = cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;23-Merge-k-Sorted-Lists&quot;&gt;&lt;a href=&quot;#23-Merge-k-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;23. Merge k Sorted Lists&quot;&gt;&lt;/a&gt;23. Merge k Sort
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-23-Merge-k-Sorted-Lists</title>
    <link href="http://yoursite.com/2018/01/11/%E5%88%B7%E9%A2%98/LeetCode-23-Merge-k-Sorted-Lists/"/>
    <id>http://yoursite.com/2018/01/11/刷题/LeetCode-23-Merge-k-Sorted-Lists/</id>
    <published>2018-01-11T14:23:23.000Z</published>
    <updated>2018-01-11T14:24:55.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="23-Merge-k-Sorted-Lists"><a href="#23-Merge-k-Sorted-Lists" class="headerlink" title="23. Merge k Sorted Lists"></a>23. Merge k Sorted Lists</h3><blockquote><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p></blockquote><p>这个题乍一看只是对链表的一个排序，因为是很多个链表，所以很简单的想法就是将整个数组里面的两个链表分别进行排序。两个两个互相排序之后就能排好。这里用的是递归。当vector中的元素大于1说明还没有排完。<br>直接一下就AC了，但是一看detail，果然时间有点长。运行时间内93ms，看到别人的只需要20+。。<br>还是先记一下自己的代码 吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* merge2List(ListNode* lList,ListNode* rList)&#123;</div><div class="line">        if(lList==nullptr)</div><div class="line">            return rList;</div><div class="line">        if(rList==nullptr)</div><div class="line">            return lList;</div><div class="line">        if(lList-&gt;val&lt;rList-&gt;val)&#123;</div><div class="line">            lList-&gt;next=merge2List(lList-&gt;next,rList);</div><div class="line">            return lList;</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            rList-&gt;next=merge2List(lList,rList-&gt;next);</div><div class="line">            return rList;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</div><div class="line">        if(lists.size()==0)</div><div class="line">            return nullptr;</div><div class="line">        while(lists.size()&gt;1)&#123;</div><div class="line">            lists.push_back(merge2List(lists[0],lists[1]));</div><div class="line">            lists.erase(lists.begin());</div><div class="line">            lists.erase(lists.begin());</div><div class="line">        &#125;</div><div class="line">        return lists[0];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p> 看了一下别人的代码，用了优先队列，进行排序，没有重新写了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    class Cmp</div><div class="line">    &#123;</div><div class="line">    public:</div><div class="line">        bool operator() (ListNode *a, ListNode *b) const</div><div class="line">        &#123;</div><div class="line">            return a-&gt;val &gt; b-&gt;val;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">public:</div><div class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</div><div class="line">        priority_queue&lt;ListNode *, vector&lt;ListNode *&gt;, Cmp&gt; pq;</div><div class="line">        ListNode *head = NULL;</div><div class="line">        ListNode *cur = NULL;</div><div class="line">        int k = lists.size();</div><div class="line">        if(k == 0)</div><div class="line">        &#123;</div><div class="line">            return NULL;</div><div class="line">        &#125;</div><div class="line">        for(ListNode *list: lists)</div><div class="line">        &#123;</div><div class="line">            if(list != NULL)</div><div class="line">            &#123;</div><div class="line">                pq.push(list);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        while( !pq.empty() )</div><div class="line">        &#123;</div><div class="line">            ListNode *next = pq.top();</div><div class="line">            pq.pop();</div><div class="line">            if(next-&gt;next != NULL)</div><div class="line">            &#123;</div><div class="line">                pq.push(next-&gt;next);</div><div class="line">            &#125;</div><div class="line">            next-&gt;next = NULL;</div><div class="line">            if(head == NULL)</div><div class="line">            &#123;</div><div class="line">                head = next;</div><div class="line">                cur = head;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                cur-&gt;next = next;</div><div class="line">                cur = cur-&gt;next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;23-Merge-k-Sorted-Lists&quot;&gt;&lt;a href=&quot;#23-Merge-k-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;23. Merge k Sorted Lists&quot;&gt;&lt;/a&gt;23. Merge k Sort
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-15-3Sum&amp;&amp;4Sum</title>
    <link href="http://yoursite.com/2018/01/10/%E5%88%B7%E9%A2%98/LeetCode-15-3Sum/"/>
    <id>http://yoursite.com/2018/01/10/刷题/LeetCode-15-3Sum/</id>
    <published>2018-01-10T13:57:08.000Z</published>
    <updated>2018-01-11T12:57:17.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h3><blockquote><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Note: The solution set must not contain duplicate triplets.</div><div class="line">For example, given array S = [-1, 0, 1, 2, -1, -4],</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure><p>同之前的2sum差不多，计算两个的和的方式是：为了避免重复，重新用一个set容器，解决重复的问题。但是这里的情况是，重复的一个数字是可以出现的，而且是三个数字相加的和，所以我们没法用之前的处理办法。</p><p>很容易想到的办法是，先让一个指针向前走，然后对之后的数字搜索，为了减少搜索的复杂度，我们可以先将数组进行排序，先排序后搜索，可以从O(n^2)的复杂度减小到nlog(n)，所以采用先排序。</p><p>然而这里需要注意的是，需要判断数组中有相同数字的情况。虽然结果中允许有相同的数字出现，但不允许出现完全相同的两个结果，所以需要处理这种情况。<br>具体的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        if(nums.size()&lt;=0)</div><div class="line">            return res;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        for(int i=0;i&lt;nums.size()&amp;&amp;nums[i]&lt;=0;++i)&#123;</div><div class="line">            int j=i+1,k=nums.size()-1;</div><div class="line">            while(j&lt;k)&#123;</div><div class="line">                    if(nums[i]+nums[j]+nums[k]&lt;0)</div><div class="line">                        j++;</div><div class="line">                    else if(nums[i]+nums[j]+nums[k]&gt;0)</div><div class="line">                        --k;</div><div class="line">                    else if(nums[i]+nums[j]+nums[k]==0)&#123;</div><div class="line">                        vector&lt;int&gt; temp(3,0);</div><div class="line">                        temp[0]=nums[i];</div><div class="line">                        temp[1]=nums[j];</div><div class="line">                        temp[2]=nums[k];</div><div class="line">                        res.push_back(temp);</div><div class="line">                        while(k&gt;j&amp;&amp;nums[k]==temp[2]) //去除k的重复</div><div class="line">                            k--;</div><div class="line">                        while(k&gt;j&amp;&amp;nums[j]==temp[1]) //去除j的重复</div><div class="line">                            j++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                while(i+1&lt;nums.size()&amp;&amp;nums[i+1]==nums[i])  //去除i的重复</div><div class="line">                    i++;</div><div class="line">            &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a>18. 4Sum</h3><blockquote><p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p></blockquote><p><strong>Note </strong>: The solution set must not contain duplicate quadruplets.</p><p>其实跟前面的3sum解决的办法是一样的，无非这里为了减少一点复杂度，借用了一下大家使用的方法。，在每次遍历的时候进行一点判断，以减少循环的次数。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        int n=nums.size();</div><div class="line">        if(n&lt;4)</div><div class="line">            return res;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        for(int i=0;i&lt;n-3;++i)&#123;</div><div class="line">            if(i&gt;0&amp;&amp;nums[i]==nums[i-1]) continue;</div><div class="line">            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]&gt;target) break;</div><div class="line">            if(nums[i]+nums[n-1]+nums[n-2]+nums[n-3]&lt;target) continue;</div><div class="line">            for(int j=i+1;j&lt;nums.size()-2;++j)&#123;</div><div class="line">                if(j&gt;i+1&amp;&amp;nums[j]==nums[j-1]) continue;</div><div class="line">                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]&gt;target) break;</div><div class="line">                if(nums[i]+nums[j]+nums[n-2]+nums[n-1]&lt;target) continue;</div><div class="line">                int begin=j+1,end=n-1;</div><div class="line">                while(begin&lt;end)&#123;</div><div class="line">                    int sum=nums[i]+nums[j]+nums[begin]+nums[end];</div><div class="line">                    if(sum&gt;target)</div><div class="line">                        --end;</div><div class="line">                    else if(sum&lt;target)</div><div class="line">                        ++begin;</div><div class="line">                    if(sum==target)&#123;</div><div class="line">                        vector&lt;int&gt; temp(4,0);</div><div class="line">                        temp[0]=nums[i];</div><div class="line">                        temp[1]=nums[j];</div><div class="line">                        temp[2]=nums[begin];</div><div class="line">                        temp[3]=nums[end];</div><div class="line">                        res.push_back(temp);</div><div class="line">                        while(begin&lt;end&amp;&amp;temp[2]==nums[begin])</div><div class="line">                            ++begin;</div><div class="line">                        while(begin&lt;end&amp;&amp;temp[3]==nums[end])</div><div class="line">                            --end;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;15-3Sum&quot;&gt;&lt;a href=&quot;#15-3Sum&quot; class=&quot;headerlink&quot; title=&quot;15. 3Sum&quot;&gt;&lt;/a&gt;15. 3Sum&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array S of n integers, are
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-8-String to Integer (atoi)</title>
    <link href="http://yoursite.com/2018/01/09/%E5%88%B7%E9%A2%98/LeetCode-8-String-to-Integer-atoi/"/>
    <id>http://yoursite.com/2018/01/09/刷题/LeetCode-8-String-to-Integer-atoi/</id>
    <published>2018-01-09T14:24:41.000Z</published>
    <updated>2018-01-09T14:34:23.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8-String-to-Integer-atoi"><a href="#8-String-to-Integer-atoi" class="headerlink" title="8.String to Integer (atoi)"></a>8.String to Integer (atoi)</h3><blockquote><p>Implement atoi to convert a string to an integer.</p></blockquote><p>讲字符串转化为整型。当然过程很简单，但是需要考虑的乱七八糟的情况很多，空格和正负号之类的。提交了一百次，终于过了，但是看到别人的代码还是很气呀，还是得多写才行，但是起码写的慢慢有感觉了是吧。<br>总体思路基本都是差不多的：<br>1.循环字符串，从第一个开始不为空的字符开始判断，如果是正负号，则只能有一个正负号，进行标记，数字开始。<br>2.数字开始之后，出现空格或者字母，返回已经生成的整型。<br>3.当数字大于最大的整数或者小于最小的整数的时候，应该将其置为最大或者最小。所以这里应该将结果定义为long long int ，不然当加到INT_MAX的时候，会自动+1，置为INT_MIN，应该避免这样的情况。<br>这里贴一下自己改的乱七八糟的代码吧，实在很气呀。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int myAtoi(string str) &#123;</div><div class="line">        int flag=1;</div><div class="line">        long long int res=0;</div><div class="line">        int begin=-1;</div><div class="line">        for(int i=0;i&lt;str.size();++i)&#123;</div><div class="line">            if(str[i]==&apos;-&apos;||str[i]==&apos;+&apos;)&#123;</div><div class="line">                if(begin!=-1)</div><div class="line">                    return 0;</div><div class="line">                begin=i;</div><div class="line">                flag=str[i]==&apos;-&apos;?-1:1;</div><div class="line">            &#125;</div><div class="line">            else if(str[i]&gt;=&apos;0&apos;&amp;&amp;str[i]&lt;=&apos;9&apos;)&#123;</div><div class="line">                begin=i;</div><div class="line">                res=res*10+str[i]-48;</div><div class="line">                if(res*flag&gt;INT_MAX)</div><div class="line">                    return INT_MAX;</div><div class="line">                if(res*flag&lt;INT_MIN)</div><div class="line">                    return INT_MIN;</div><div class="line">            &#125;</div><div class="line">            else if(str[i]==&apos; &apos;)&#123;</div><div class="line">                if(begin!=-1)</div><div class="line">                    return res*flag;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">                return res*flag;</div><div class="line">        &#125;</div><div class="line">        return res*flag;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>提交一看，这个时间还有点问题，就懒得自己再改了，思路都是一样的吧，就直接贴过来学习一下了，即使我觉得写的也一般呀。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int myAtoi(string str) &#123;</div><div class="line">        int i = 0;</div><div class="line">        long long res = 0;</div><div class="line">        if(str.size() == 0)</div><div class="line">            return res;</div><div class="line"></div><div class="line">        while(i &lt; str.size() &amp;&amp; str[i] == &apos; &apos;)</div><div class="line">            i++;</div><div class="line"></div><div class="line">        int flag = 1;</div><div class="line">        if(str[i] == &apos;+&apos;)</div><div class="line">            i++;</div><div class="line">        else if(str[i] == &apos;-&apos;)</div><div class="line">        &#123;</div><div class="line">            flag = -1;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        while(str[i] &gt;= &apos;0&apos; &amp;&amp; str[i] &lt;= &apos;9&apos;)</div><div class="line">        &#123;</div><div class="line">            res = res * 10 + str[i] - &apos;0&apos;;</div><div class="line">            i++;</div><div class="line">        if(res * flag &gt;= INT_MAX)</div><div class="line">            return INT_MAX;</div><div class="line">        if(res * flag &lt;= INT_MIN)</div><div class="line">            return INT_MIN;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        return res * flag;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;8-String-to-Integer-atoi&quot;&gt;&lt;a href=&quot;#8-String-to-Integer-atoi&quot; class=&quot;headerlink&quot; title=&quot;8.String to Integer (atoi)&quot;&gt;&lt;/a&gt;8.String to 
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>精剪生活</title>
    <link href="http://yoursite.com/2017/12/10/cut-life/"/>
    <id>http://yoursite.com/2017/12/10/cut-life/</id>
    <published>2017-12-10T11:57:26.000Z</published>
    <updated>2017-12-10T12:49:29.976Z</updated>
    
    <content type="html"><![CDATA[<p>好像从小的时候开始，拥有各种感兴趣的事情或者不只是好好学习就像一种美德一样充斥于我们与同龄人的自己的生活中。就像小时候打的弹珠和后面看的小说乒乓球和dota一样。哦，对，应该说是合群，或者是接地气，就是所有与同龄人正常社交所需的娱乐活动吧。所以作为一个老师口中活泼开朗的学生，这些我基本都有，可能玩的不一定好，但是so what，只要不是像“那些只爱学习的同学”一样，好像都够了。</p><p>于是，也不知道什么时候就慢慢形成了广泛的娱乐活动了。直到现在，想起自己好像啥都能参与，就像篮球里能够从1打到5的那种全能型选手，不一定有机会上场，但总是差不多合格一样。<br>想一下现在自己的娱乐：</p><ul><li>打球？篮球、羽毛球、乒乓球，都可以打一些。虽然现在打篮球确实少了很多了，一个是宿舍就我一个人去，这样就很多时候懒得去了。羽毛球呢，总觉得要是四个人比较好，但是又对天气有些要求。还有乒乓球，需要有个水平不是很厉害还愿意跟我 打的了。。。</li><li>打麻将？这个简直是好约啊，四个人可以动脑或者不动脑的室内活动，主动或者三缺一的要求，都是相当的容易，这种活动还一般安排在吃饭的后边，就像你有时候也没法拒绝吃饱之后某个茶楼的茶一样，因为即使回去也还是睡觉是吧，而且自己总是告诉自己不要把生命浪费在床上。</li><li>各种吃饭？是的，忘了多少个睡到十点的周末，大家在一边互相催着起床一边讨论中午吃什么，于是由简单的黄焖鸡变成了鸡公煲，自助、火锅。。然后就是一个白天很快就过去了。</li><li>打游戏？简直是不可或缺的一部分啊。好像之前一年已经很少玩了。直到暑假开始玩的一个垃圾手游，轩辕传奇，几乎每天要花一个多小时的时间吧，想了一下，占据了我基本每天吃完午饭到睡觉之前和晚上回到宿舍到上床的一段时间。这段时间本来就不是很长，但是却被我用的看起来更紧张了。还有偶尔同学们约的王者荣耀，我基本自己都没有打过。还有最近的荒野行动，也是周末晚上或者正好十点多的上午才会有的娱乐。</li><li>看书？当然，我还是愿意把这个算进去。毕竟看的一些闲书，不能说没用，但确实是一种娱乐了吧。占据了上床到睡觉之前的不玩手机的时间，这个时间可能更短了。</li><li>然后，实验室玩手机？这个就不多说了，想想每天的手机电量吧。</li><li>乱七八糟的折腾？额，年轻的特征吗。。没意思的东西还是少弄点了吧</li></ul><p>这样看的话其实生活好像也很正常的，但是却是感觉每天，或者周末都很忙，忙了还不知道自己干了啥。有些难受。而且这好像也是自己写的第二篇这种苦恼了，上一次也是觉得这样的周末，但是两周过去了，好像还没有好多少，可能周末确实适合这么过，但是显然不是现在。<br>接下来需要做的，就是精简生活了，不是什么活动都需要参加的是吧，也不是什么都需要自己关注的是吧，也不用总是活在一个中心。<strong> 先专注做好自己现在该做的事情，或者先想想？</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好像从小的时候开始，拥有各种感兴趣的事情或者不只是好好学习就像一种美德一样充斥于我们与同龄人的自己的生活中。就像小时候打的弹珠和后面看的小说乒乓球和dota一样。哦，对，应该说是合群，或者是接地气，就是所有与同龄人正常社交所需的娱乐活动吧。所以作为一个老师口中活泼开朗的学生
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="杂想" scheme="http://yoursite.com/tags/%E6%9D%82%E6%83%B3/"/>
    
      <category term="记录" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>牛客网-剑指offer-11</title>
    <link href="http://yoursite.com/2017/12/03/%E5%88%B7%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91-%E5%89%91%E6%8C%87offer-11/"/>
    <id>http://yoursite.com/2017/12/03/刷题/牛客网-剑指offer-11/</id>
    <published>2017-12-03T12:44:21.000Z</published>
    <updated>2017-12-03T14:00:32.524Z</updated>
    
    <content type="html"><![CDATA[<h4 id="T31：把数组排成最小的数"><a href="#T31：把数组排成最小的数" class="headerlink" title="T31：把数组排成最小的数"></a>T31：把数组排成最小的数</h4><blockquote><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p></blockquote><p>这里想到的是，要对数组里面的所有数进行一个排序：不只是排长度，还要排最高位的大小。于是可以通过c++的STL的排序，通过自己定义的一个谓语比较函数。在这个比较函数里，把整数转成string进行比较，但是想到string的长度不一样的话也没法比较字符的大小了。所以分别将两个数加在一起，前后顺序不同，这样string的长度就一样了，比较的就是顺序了。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    string PrintMinNumber(vector&lt;int&gt; numbers) &#123;</div><div class="line">        string result;</div><div class="line">        sort(numbers.begin(),numbers.end(),cmp);</div><div class="line">        for(int i=0;i!=numbers.size();++i)&#123;</div><div class="line">            result+=to_string(numbers[i]);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static bool cmp(int a,int b)&#123;</div><div class="line">        string A=to_string(a)+to_string(b);</div><div class="line">        string B=to_string(b)+to_string(a);</div><div class="line">        return A&lt;B;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h4 id="T32：丑数"><a href="#T32：丑数" class="headerlink" title="T32：丑数"></a>T32：丑数</h4><blockquote><p>把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p></blockquote><p>要求出第N个丑数，显然就要求到这N个，所以就要把所有的找出来嘛。简单的办法，就是2,3，5的倍数，但是这些倍数出来的丑数的顺序，这时候需要排序。显然不能直接对所有的都排序，那复杂度就太大了。这里一种考虑就是：比如，对于一次倍数的计算，如果2的倍数比原来的都大，那么3和5的倍数显然只会更大了。所以可以通过记录下此时分别为2,3,5倍数三个值，这样就可以减少比较的次数了。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int GetUglyNumber_Solution(int index) &#123;</div><div class="line">        if(index==0)</div><div class="line">            return 0;  //解决边界条件</div><div class="line">        vector&lt;int&gt; result(index);</div><div class="line">        result[0]=1;</div><div class="line">        int x=0,y=0,z=0,i;</div><div class="line">        for(i=1;i&lt;index;i++)&#123;</div><div class="line">            result[i]=min(result[x]*2,min(result[y]*3,result[z]*5));</div><div class="line">            if(result[i]==result[x]*2)</div><div class="line">                x++;</div><div class="line">            if(result[i]==result[y]*3)</div><div class="line">                y++;</div><div class="line">            if(result[i]==result[z]*5)</div><div class="line">                z++;</div><div class="line">        &#125;</div><div class="line">        return result[index-1];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h4 id="T33：第一个只出现一次的字符"><a href="#T33：第一个只出现一次的字符" class="headerlink" title="T33：第一个只出现一次的字符"></a>T33：第一个只出现一次的字符</h4><blockquote><p>在一个字符串(1&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置</p></blockquote><p>很容易想到的一种复杂度为O(n)的算法是采用哈希表，遍历一次，将出现的字符放在键中，出现一次即在值中加1。第二次遍历，直接查找该键对应的值，第一个为1的输出即可。当然，这里由于是字符，所以可以直接采用数组的形式。<strong> 一定要记得对数组进行初始化</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int FirstNotRepeatingChar(string str) &#123;</div><div class="line">        if(str.size()==0)</div><div class="line">            return -1;        //处理边界条件</div><div class="line">        int res[256]=&#123;0&#125;;  //局部变量，一定要初始化啊</div><div class="line">        int i=0;</div><div class="line">        for(;i!=str.size();++i)&#123;</div><div class="line">            res[(int)str[i]]++;</div><div class="line">        &#125;</div><div class="line">        for(i=0;i!=str.size();++i)&#123;</div><div class="line">            if(res[(int)str[i]]==1)</div><div class="line">                return i;</div><div class="line">        &#125;</div><div class="line">        return str.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;T31：把数组排成最小的数&quot;&gt;&lt;a href=&quot;#T31：把数组排成最小的数&quot; class=&quot;headerlink&quot; title=&quot;T31：把数组排成最小的数&quot;&gt;&lt;/a&gt;T31：把数组排成最小的数&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入一个正整数数组，把数组
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="牛客网" scheme="http://yoursite.com/tags/%E7%89%9B%E5%AE%A2%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>牛客网-剑指offer-10</title>
    <link href="http://yoursite.com/2017/12/01/%E5%88%B7%E9%A2%98/%E7%89%9B%E5%AE%A2%E7%BD%91-%E5%89%91%E6%8C%87offer-10/"/>
    <id>http://yoursite.com/2017/12/01/刷题/牛客网-剑指offer-10/</id>
    <published>2017-12-01T13:11:56.000Z</published>
    <updated>2017-12-03T14:00:30.996Z</updated>
    
    <content type="html"><![CDATA[<h4 id="T28：最小的K个数"><a href="#T28：最小的K个数" class="headerlink" title="T28：最小的K个数"></a>T28：最小的K个数</h4><blockquote><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p></blockquote><ul><li>解法一：剑指offer上给的有两种办法，一种是对数组进行排序，类似于快速排序的方式，假设基于第k个数来调整，就可以将比k小的数全放在左边，比k大的数都放在右边，于是，最后k左边的数即为最小的k个数。<br>优点：平均时间复杂度：O(n)，思路较快<br>缺点：需要修改数组</li><li>解法二：算法复杂度O(nlogk)，适合海量的数据。需要我们一个能存储k个数的容器，当容器中的数不足k个的时候，直接装进容器，当超过的时候，需要拿容器中最大的数与新的数进行比较，新数小的时候，替换已有的最大。如此，每一个新的数都需要判断，这样会增加复杂度，但是在海量数据处理的时候比较适合，因为无法一次把所有的数据都载入内存。<br>下面是解法二的代码：（没有采用multiset，直接用的vector排序的，原理一样，但是我的stl确实没有用好，下次再改吧）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; GetLeastNumbers_Solution(vector&lt;int&gt; input, int k) &#123;</div><div class="line">        //没有考虑复杂度的情况，都是直接写的</div><div class="line">        vector&lt;int&gt; result;</div><div class="line">        //判断输入为空，或者k大于input的个数的情况</div><div class="line">        if(input.size()&lt;=0||k==0||k&gt;input.size())</div><div class="line">            return result;</div><div class="line">        vector&lt;int&gt;::iterator iter=input.begin();</div><div class="line">        for(;iter!=input.end();++iter)&#123;</div><div class="line">            sort(result.begin(),result.end());</div><div class="line">            if(result.size()&lt;k)</div><div class="line">                result.push_back(*iter);</div><div class="line">            else if(*iter&lt;*(result.end()-1))&#123;</div><div class="line">                result.pop_back();</div><div class="line">                result.push_back(*iter);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h4 id="T29：连续子数组的最大和"><a href="#T29：连续子数组的最大和" class="headerlink" title="T29：连续子数组的最大和"></a>T29：连续子数组的最大和</h4><blockquote><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。你会不会被他忽悠住？(子向量的长度至少是1)</p></blockquote><p>主要是想为什么会有最大的和，一个情况是，新加上的数比原来的数都要大，就要开始考虑需不需要原来的数了。所以我们需要两个数，一个保存最大的和，用来返回，一个 保存当前的和，可以在适当的时候丢掉。  另一种情况，加入的数都比原来的小，即都是负数的时候，可能最大和只是一个最小的数；另外，当都是正数的时候也比较好解决。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int FindGreatestSumOfSubArray(vector&lt;int&gt; array) &#123;</div><div class="line">        if(array.size()==0)</div><div class="line">            return 0;</div><div class="line">        int curSum=array[0];//注意这里不能用0，因为会出现数组值全小于0的情况</div><div class="line">        int maxSum=array[0];</div><div class="line">        for(int i=1;i!=array.size();++i)&#123;</div><div class="line">            curSum+=array[i];</div><div class="line">            if(curSum&lt;array[i])</div><div class="line">                curSum=array[i];</div><div class="line">            if(maxSum&lt;curSum)</div><div class="line">                maxSum=curSum;</div><div class="line">        &#125;</div><div class="line">        return maxSum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h4 id="T30-整数中1出现的个数-从1到n整数中1出现的个数"><a href="#T30-整数中1出现的个数-从1到n整数中1出现的个数" class="headerlink" title="T30:整数中1出现的个数(从1到n整数中1出现的个数)"></a>T30:整数中1出现的个数(从1到n整数中1出现的个数)</h4><blockquote><p>题目描述：求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数</p></blockquote><p>显然，最简单的思路，从1遍历到n是吧，因为要找到每个数中1的个数。先不说这个，问题的重点是，这个1的个数怎么找。<br>于是想到的是关于1存在的规律。比如很简单的就个位数而言，从0–9，只会出现一个1。由此想到，我们可以把n分成很多段进行计算。具体怎么分段，《剑指offer》上有个方法，不过确实有点难看明白了，就没有看，自己觉得可以按照从按10的倍数来分，1,10,100之类的，不过又有点问题，每个段内1的个数不一样，因为这样的话1的个数就不好算了。不过牛客网厉害的还是多啊，思路清晰，代码简洁。自己真的需要学习的有点多。不过后来又回头看了一下《剑指offer》上其实也是这样的。<br>那就直接复述一遍具体的思路吧：根据设定的整数位置，对n进行分割。这里就直接选10了，高位是a=n/10，低位是b=n%10，循环条件直接就是n*10了，这样就可以从最后一位到最高位的遍历了。<br>这里需要考虑的就是，a的最后一位，就是高位对应的最低位。</p><ul><li>当i表示百位，且百位对应的数&gt;=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），每一次都包含100个连续的点，即共有(a%10+1)*100个点的百位为1。</li><li>当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，则共有a%10(最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，所有点加起来共有（a%10*100）+(b+1)，这些点百位对应为1。</li><li>当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）。<br>代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int NumberOf1Between1AndN_Solution(int n)</div><div class="line">    &#123;</div><div class="line">        int count=0;</div><div class="line">        //n=1的情况</div><div class="line">        if(n==1)</div><div class="line">            return 1;</div><div class="line">        //考虑的边界情况，n=10,100,1000之类的，同时循环中没有考虑n=0的情况</div><div class="line">        if(n&gt;1&amp;&amp;n%10==0)</div><div class="line">            count++;</div><div class="line">        //没有考虑n=1的情况</div><div class="line">        for(int i=1;i&lt;n;i*=10)&#123;</div><div class="line">            int a=n/i,b=n%i;</div><div class="line">            //补8的效果：当百位为0，则a/10==(a+8)/10，</div><div class="line">            //当百位&gt;=2，补8会产生进位位，效果等同于(a/10+1)</div><div class="line">            count+=(a+8)/10*i+(a%10==1)*(b+1);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return count;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;T28：最小的K个数&quot;&gt;&lt;a href=&quot;#T28：最小的K个数&quot; class=&quot;headerlink&quot; title=&quot;T28：最小的K个数&quot;&gt;&lt;/a&gt;T28：最小的K个数&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;输入n个整数，找出其中最小的K个数。例如输入4,5
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="牛客网" scheme="http://yoursite.com/tags/%E7%89%9B%E5%AE%A2%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>一个可能很熟悉的周末</title>
    <link href="http://yoursite.com/2017/11/26/random-life-1/"/>
    <id>http://yoursite.com/2017/11/26/random-life-1/</id>
    <published>2017-11-26T13:12:29.000Z</published>
    <updated>2017-11-26T14:12:16.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017-11-26-记录一个可能很熟悉的周末"><a href="#2017-11-26-记录一个可能很熟悉的周末" class="headerlink" title="2017-11-26 记录一个可能很熟悉的周末"></a>2017-11-26 记录一个可能很熟悉的周末</h3><p>这周又过去了，时间依旧是这么快啊，待在实验室跟上一周的感觉差不多，还是周日的下午，晚上才想起来来一下实验室，还是本来想周末搞个学习，却还是没有一不小心就休息过去了，非常单纯的尊重了一下周末。</p><p>先记个心里活动加流水吧，很无聊，但是还是想写一下，看一下自己的周末重播是怎样的。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">本来周五晚上就没有睡很晚，所以生物钟还是个好东西，一到周末就提醒我不要起的太早，于是醒</div><div class="line">来还是十点多了，躺在床上玩了一会游戏觉得有点罪过，就起床搞搞学习，嗯，十点多，算是个相</div><div class="line">对还不错的时间了，如果不是上周立了flag说是周末要学习一天的话，即使以前的我好像可以不分</div><div class="line">周末一样。</div><div class="line"></div><div class="line"></div><div class="line">没错，起床了就学习啊，还是先看一下游戏吧，刚刚打开就看到有人说，游戏现在可以电脑端挂着</div><div class="line">了，一想，这样就不用耽误我时间看平板了，直接电脑上从代码切过来很快的样子，毕竟这么多年</div><div class="line">的单身。于是开始准备下。想一下，这个流量。。赶紧查一查，还有一个多G，，算一下还有几天，</div><div class="line">今天才25，好像有点不够呀，还是不下了吧。不过仔细一想，下一个电脑端，多省事啊，毕竟我不</div><div class="line">是一个轻易被困难打倒的人，于是看了一下手机，还有3G流量，好像也有点不够用了啊。又想起来</div><div class="line">上个月月末的两个活动送的2G流量，看看能不能，于是赶紧一顿操作，我靠，竟然还有啊。只能不</div><div class="line">好意思安心开始下游戏了。</div><div class="line"></div><div class="line">哇，搞学习的时间终于开始了啊，额，这个宿舍环境，好像更适合看视频一点，打开教学视频，习</div><div class="line">惯的1.5倍速，连上云服务器，先操作一顿，看看上周用的vim的操作忘了没有。然后切到视频，额</div><div class="line">，这讲的也太慢了吧，完全不把我的基础当回事啊，这也讲。。 算了，切一下看看游戏下的怎么样</div><div class="line">了，19%，才这么点啊。切回去，切过来，25%，再切过来，咦，怎么不动了，难道热点断了，看一</div><div class="line">下手机，额，没有啊，==看，额，怎么错误了，怎么说。切回去把视频停一下，百度看看怎么回事。</div><div class="line">额，这垃圾游戏，百度都搜不到，额，这是啥啊，就是一个模拟器嘛，还下不下来。唉，算了，重试</div><div class="line">一遍吧。</div><div class="line"></div><div class="line">接下来是有点忧心忡忡的看着视频，一边心疼着流量啊，一边看。忍不了，切回去看看，2%,5%。。。</div><div class="line">额，40%，又不动了，又出错了。垃圾游戏，删掉。重新网上找一个。看一下手机，我靠，1G流量已经</div><div class="line">没了啊。算了，我去找个别的模拟器吧，还得搞学习呢，耽误我时间，分分钟搜到一个，赶紧下。 额</div><div class="line">，这次好像很顺利的样子，（百次切换后的十分钟。。）额，这个怎么有点不对的样子啊，头上怎么一</div><div class="line">个安卓的机器人啊，难道是只有安卓的才能用吗？这波就傻逼了。还先装的引擎，再下的游戏，额，这</div><div class="line">游戏都下了一半了，现在我是停不停啊，不会坑我吧。算了，中国有句古话说的好，来都来了是吧。。</div><div class="line">等等下完吧。</div><div class="line"></div><div class="line">终于下完了，我手机也提示2G的流量也没了。赶紧隆重的停一下视屏，装上看一看，额，怎么一个不是</div><div class="line">很熟悉的模拟器一样，上面就装了一个游戏，有点虚呀，兄弟。还是试试吧，擦，果然不可以啊，这下</div><div class="line">傻逼了。怎么说，哎，难道我老了，连这点都解决不了了。关机重启重下吧。</div><div class="line"></div><div class="line">重启！可是我的校园网没流量了啊，管他呢，先下了再说吧，出去吃饭了。。。。。。回来，赶紧看一</div><div class="line">下，哇，竟然下完了，看来西电的校园网还是有一点靠谱的嘛，装上试试，等等，这好像有点卡啊，这</div><div class="line">个，半天进不去啊。怎么他们说的可以啊，赶紧微信私聊一个人问一下，靠，他也很卡，刚刚自己还说</div><div class="line">可以的，擦。</div><div class="line"></div><div class="line">嗯，游戏总是很坑，但生活还得继续啊，周末的好天气也不忍心待在室内，难得在这个时间没有雾霾，</div><div class="line">已经快一点了，约的羽毛球和洗澡吃饭一条龙还没确定呢。赶紧找人啊，随便问一个，怎么不去？这也</div><div class="line">不去，只剩下我和这个破峰了？两个人怎么玩到四点去洗澡啊。额，再想想，于是看到师兄约篮球，要</div><div class="line">不怂恿看看？可是破峰竟然抛弃我准备先去洗澡了，但是这么好的天气，作为有点欠太阳的我是必须要</div><div class="line">出去运动一下的，那就去打篮球吧。。</div><div class="line"></div><div class="line">。。。</div><div class="line"></div><div class="line">打完球四点多，打的有点累啊，回来休息一波，也没啥事干，要不休息一下带这个破峰玩一局吧，结果</div><div class="line">洗澡就是五点多了，自己去洗个澡，买点吃的，回来还是用平板玩会游戏，吃个饭，给家里打个电话，</div><div class="line">已经七点多了，想起游戏有活动啊，上来看看，顺便看看视频，额，完全看不进去啊，还有点累啊。算</div><div class="line">了，随便看看视频之类的吧，反正不想学习。额，我的校园网没了，要不用免费网下个游戏吧，试试看</div><div class="line">怎么样，就荒野行动吧，反正最近这么火是吧，这个速度有点快啊，确定是我自己的网吗？看一下，是</div><div class="line">我的，放心不是书记的。下完了，再更新，额，怎么一兆多啊，不对啊，再看一下，果然是书记的，我</div><div class="line">靠，这就尴尬了 。。于是结果就是半个小时陪着这个破书记去搞了吃的额</div><div class="line"></div><div class="line">回来已经十点多了，游戏终于下好了，怂恿破峰下一个吧。我先去床上玩一把。于是玩到了12点了。该</div><div class="line">睡觉了，好困啊，睡吧。</div><div class="line"></div><div class="line">星期天到了，看来睡的早还是可以啊，八点多就醒了，简直是像上帝多要了两个多小时的生命啊，赶紧</div><div class="line">玩会游戏浪费一下，玩到九点，额，怎么有点困啊，算了，睡吧，昨天打球确实有点累啊，年纪大了，</div><div class="line">不能拉杆了啊。休息休息。。。已经11点了啊，赶紧起来看看，随便一收拾，又要吃饭了，唉，赶紧收</div><div class="line">拾一下衣服扔下去，然后吃个饭，去个超市回来正好收衣服，我真会过日子啊，哈哈。</div><div class="line"></div><div class="line">回来又是一点，挂好衣服，干啥了，听听歌，洗洗东西。额，快两点了啊，赶紧休息一下，三点了，想</div><div class="line">起来周末好像完全没学习啊，关键是还是入党的东西很多没填啊，还是去一下实验室吧。。</div></pre></td></tr></table></figure></p><p>终于差不多记完了，真的有点无聊，但是确实好像又好像拜托不了的周末啊，除了周内每天按时上班让人周末不想好好起床以外，还有一些确实需要做的事情，比如锻炼和洗刷，时间好像也就那些。或者再稍微加点娱乐，再加点别的赖床，晚上再睡晚一点，时间就更短了啊。</p><p>显然，时间当然没法安排的这么满，但是确实也不是一点留给该做事的时间都没有的。为什么别人都有了，而我只是看似想着学习却实际上啥都没干呢？<br>分析一下周末的时间：</p><ul><li><strong> 晚上的晚睡</strong>：没有理由的晚睡当然是透支了第二天的白天的时间，晚睡的一两个小时，直接一个上午几乎没了，然后下午再随便一玩，就觉得一天啥都没干。</li><li><strong> 无聊的折腾</strong>：有的时候很多的爱好并不是一件很好的事情，看看比赛的情况，刷个新闻，刷个朋友圈，看看游戏，再玩会游戏，直接学习时间就没了，直接体现就是在进度上。还会觉得很烦躁</li><li><strong> 当然还是有点懒啊</strong>： 谁都有不想做啥的时候，但是生活就是这样，这就不多说了。</li></ul><p>直到晚上写个人自传的时候，才想起来很多没得啥写，生活就像游戏一样，你玩的多爽杀了多少人，能给你带来的快乐，除了当时的快乐，还有之后你回头看过来，自己有多少收获，有的时候不功利是一种美德，但有时候那只能证明你太年轻了，换句话说就是傻逼了，快乐的生活还是要建立在将来看起来也仍然是快乐的不是吗。</p><h3 id="希望以后换种方式的周末吧"><a href="#希望以后换种方式的周末吧" class="headerlink" title="希望以后换种方式的周末吧"></a>希望以后换种方式的周末吧</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2017-11-26-记录一个可能很熟悉的周末&quot;&gt;&lt;a href=&quot;#2017-11-26-记录一个可能很熟悉的周末&quot; class=&quot;headerlink&quot; title=&quot;2017-11-26 记录一个可能很熟悉的周末&quot;&gt;&lt;/a&gt;2017-11-26 记录一个可能
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="杂想" scheme="http://yoursite.com/tags/%E6%9D%82%E6%83%B3/"/>
    
  </entry>
  
</feed>
