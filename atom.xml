<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mianhk&#39;s notes</title>
  
  <subtitle>这个人很懒，动不动就不想写</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-25T13:44:58.138Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mianhk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-49-Group-Anagrams</title>
    <link href="http://yoursite.com/2018/01/25/LeetCode-49-Group-Anagrams/"/>
    <id>http://yoursite.com/2018/01/25/LeetCode-49-Group-Anagrams/</id>
    <published>2018-01-25T13:44:37.000Z</published>
    <updated>2018-01-25T13:44:58.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-49-Group-Anagrams"><a href="#LeetCode-49-Group-Anagrams" class="headerlink" title="LeetCode-49-Group-Anagrams"></a>LeetCode-49-Group-Anagrams</h3><blockquote><p>Given an array of strings, group anagrams together.<br>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],</p></blockquote><p>Return:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [&quot;ate&quot;, &quot;eat&quot;,&quot;tea&quot;],</div><div class="line">  [&quot;nat&quot;,&quot;tan&quot;],</div><div class="line">  [&quot;bat&quot;]</div><div class="line">]</div></pre></td></tr></table></figure></p><p>输入一个字符串数组，输出的是：将相同字符的字符串放在一个数组的二维数组。相同字符的处理，基本就是要对字符串排序的。然后需要考虑的就是排序好的那一个字符串怎么存的问题。用的数据结构是map，string为键，对应的值是一个set或者是一个vector，存放满足要求的string，之后再用这个初始化结果数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;</div><div class="line">        unordered_map&lt;string,multiset&lt;string&gt;&gt; map_str;</div><div class="line">        for(string s:strs)&#123;</div><div class="line">            string t=s;</div><div class="line">            sort(t.begin(),t.end());</div><div class="line">            map_str[t].insert(s);</div><div class="line">        &#125;</div><div class="line">        vector&lt;vector&lt;string&gt;&gt; res;</div><div class="line">        for(auto temp:map_str)&#123;</div><div class="line">            vector&lt;string&gt; vec_str_temp(temp.second.begin(),temp.second.end());</div><div class="line">            res.push_back(vec_str_temp);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>后来发现用vector其实要好一些。只是别人这么写的，时间竟然要短一点，毕竟是用vector初始化vector？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-49-Group-Anagrams&quot;&gt;&lt;a href=&quot;#LeetCode-49-Group-Anagrams&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-49-Group-Anagrams&quot;&gt;&lt;/a&gt;LeetCode
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-48-Rotate-Image</title>
    <link href="http://yoursite.com/2018/01/25/%E5%88%B7%E9%A2%98/Leetcode-48-Rotate-Image/"/>
    <id>http://yoursite.com/2018/01/25/刷题/Leetcode-48-Rotate-Image/</id>
    <published>2018-01-25T12:44:32.000Z</published>
    <updated>2018-01-25T12:44:40.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Leetcode-48-Rotate-Image"><a href="#Leetcode-48-Rotate-Image" class="headerlink" title="Leetcode-48-Rotate-Image"></a>Leetcode-48-Rotate-Image</h3><blockquote><p>ou are given an n x n 2D matrix representing an image.<br>Rotate the image by 90 degrees (clockwise).<br>Note:<br>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p></blockquote><p>Example :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Given input matrix =</div><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [4,5,6],</div><div class="line">  [7,8,9]</div><div class="line">],</div><div class="line"></div><div class="line">rotate the input matrix in-place such that it becomes:</div><div class="line">[</div><div class="line">  [7,4,1],</div><div class="line">  [8,5,2],</div><div class="line">  [9,6,3]</div><div class="line">]</div><div class="line"></div><div class="line">Given input matrix =</div><div class="line">[</div><div class="line">  [ 5, 1, 9,11],</div><div class="line">  [ 2, 4, 8,10],</div><div class="line">  [13, 3, 6, 7],</div><div class="line">  [15,14,12,16]</div><div class="line">],</div><div class="line"></div><div class="line">rotate the input matrix in-place such that it becomes:</div><div class="line">[</div><div class="line">  [15,13, 2, 5],</div><div class="line">  [14, 3, 4, 1],</div><div class="line">  [12, 6, 8, 9],</div><div class="line">  [16, 7,10,11]</div><div class="line">]</div></pre></td></tr></table></figure></p><p>这个乍一看觉得不难，但是写的时候又不知道怎么回事，其实旋转，对于我们写程序来说，其实就是不停的调换位置，但是怎么调换是个问题。</p><p>观察发现，第一个矩阵，最角上的四个1,3,7,9。转完之后，还是这四个数字，只不过是位置变了，接下来这样的四个是：2,4,6,8.最后一个5.再看一下4x4的其实也差不多。</p><p>所以想法就是直接每次四个数字进行换，换三次，就能换回来，然后进行下一次调换。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</div><div class="line">        if(matrix.size()&lt;=0)</div><div class="line">            return;</div><div class="line">        int a=0,b=matrix.size()-1;</div><div class="line">        while(a&lt;b)&#123;</div><div class="line">            for(int i=0;i&lt;b-a;++i)&#123;</div><div class="line">                swap(matrix[a][a+i],matrix[a+i][b]);</div><div class="line">                swap(matrix[a][a+i],matrix[b][b-i]);</div><div class="line">                swap(matrix[a][a+i],matrix[b-i][a]);</div><div class="line">            &#125;</div><div class="line">            ++a;</div><div class="line">            --b;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Leetcode-48-Rotate-Image&quot;&gt;&lt;a href=&quot;#Leetcode-48-Rotate-Image&quot; class=&quot;headerlink&quot; title=&quot;Leetcode-48-Rotate-Image&quot;&gt;&lt;/a&gt;Leetcode-48-Ro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-48-Rotate-Image</title>
    <link href="http://yoursite.com/2018/01/25/Leetcode-48-Rotate-Image/"/>
    <id>http://yoursite.com/2018/01/25/Leetcode-48-Rotate-Image/</id>
    <published>2018-01-25T12:44:32.000Z</published>
    <updated>2018-01-25T12:45:24.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Leetcode-48-Rotate-Image"><a href="#Leetcode-48-Rotate-Image" class="headerlink" title="Leetcode-48-Rotate-Image"></a>Leetcode-48-Rotate-Image</h3><blockquote><p>ou are given an n x n 2D matrix representing an image.<br>Rotate the image by 90 degrees (clockwise).<br>Note:<br>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p></blockquote><p>Example :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Given input matrix =</div><div class="line">[</div><div class="line">  [1,2,3],</div><div class="line">  [4,5,6],</div><div class="line">  [7,8,9]</div><div class="line">],</div><div class="line"></div><div class="line">rotate the input matrix in-place such that it becomes:</div><div class="line">[</div><div class="line">  [7,4,1],</div><div class="line">  [8,5,2],</div><div class="line">  [9,6,3]</div><div class="line">]</div><div class="line"></div><div class="line">Given input matrix =</div><div class="line">[</div><div class="line">  [ 5, 1, 9,11],</div><div class="line">  [ 2, 4, 8,10],</div><div class="line">  [13, 3, 6, 7],</div><div class="line">  [15,14,12,16]</div><div class="line">],</div><div class="line"></div><div class="line">rotate the input matrix in-place such that it becomes:</div><div class="line">[</div><div class="line">  [15,13, 2, 5],</div><div class="line">  [14, 3, 4, 1],</div><div class="line">  [12, 6, 8, 9],</div><div class="line">  [16, 7,10,11]</div><div class="line">]</div></pre></td></tr></table></figure></p><p>这个乍一看觉得不难，但是写的时候又不知道怎么回事，其实旋转，对于我们写程序来说，其实就是不停的调换位置，但是怎么调换是个问题。</p><p>观察发现，第一个矩阵，最角上的四个1,3,7,9。转完之后，还是这四个数字，只不过是位置变了，接下来这样的四个是：2,4,6,8.最后一个5.再看一下4x4的其实也差不多。</p><p>所以想法就是直接每次四个数字进行换，换三次，就能换回来，然后进行下一次调换。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</div><div class="line">        if(matrix.size()&lt;=0)</div><div class="line">            return;</div><div class="line">        int a=0,b=matrix.size()-1;</div><div class="line">        while(a&lt;b)&#123;</div><div class="line">            for(int i=0;i&lt;b-a;++i)&#123;</div><div class="line">                swap(matrix[a][a+i],matrix[a+i][b]);</div><div class="line">                swap(matrix[a][a+i],matrix[b][b-i]);</div><div class="line">                swap(matrix[a][a+i],matrix[b-i][a]);</div><div class="line">            &#125;</div><div class="line">            ++a;</div><div class="line">            --b;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Leetcode-48-Rotate-Image&quot;&gt;&lt;a href=&quot;#Leetcode-48-Rotate-Image&quot; class=&quot;headerlink&quot; title=&quot;Leetcode-48-Rotate-Image&quot;&gt;&lt;/a&gt;Leetcode-48-Ro
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx设计架构</title>
    <link href="http://yoursite.com/2018/01/25/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2018/01/25/服务器/服务器-Nginx设计架构/</id>
    <published>2018-01-25T08:37:48.000Z</published>
    <updated>2018-01-25T08:38:08.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx设计架构"><a href="#服务器-Nginx设计架构" class="headerlink" title="服务器-Nginx设计架构"></a>服务器-Nginx设计架构</h3><h4 id="Nginx服务器架构"><a href="#Nginx服务器架构" class="headerlink" title="Nginx服务器架构"></a>Nginx服务器架构</h4><p>Nginx服务器启动后，产生一个主进程，主进程执行一系列工作后产生一个或多个工作进程。</p><p>如下图所示：Nginx服务器的结构大致分为主进程、工作进程、后端服务器和缓存。<br><img src="https://github.com/mianhk/image-save/blob/master/server/003/001.png?raw=true" alt=""></p><ul><li>主进程主要进行：Nginx配置文件解析、数据结构初始化、模块配置和注册、信号处理、网络监听生成、工作进程生成和管理。</li><li>工作进程主要进行：进程初始化、模块调用和请求处理等。</li><li>缓存索引重建及管理进程：cache模块，主要由缓存索引重建和缓存索引管理两类进程完成。缓存索引重建是在Nginx服务启动一段时间后由主进程生成，在缓存元数据重建完成后自动退出。主要工作是：根据本地磁盘上的缓存文件在内存中建立索引元数据库，启动后对本地磁盘上存放缓存文件的目录结构进行扫描，检查内存中已有的缓存你数据元是否正确，并更新索引元数据库；缓存索引管理进程一般存在于主进程的整个生命周期，负责对缓存索引进行管理。主要负责对元数据是否过期做出判断。</li></ul><h4 id="进程交互"><a href="#进程交互" class="headerlink" title="进程交互"></a>进程交互</h4><h5 id="Master-worker交互"><a href="#Master-worker交互" class="headerlink" title="Master-worker交互"></a>Master-worker交互</h5><p>主进程会建立一张工作进程表，存放所有未退出的，主进程通过一个单向管道向工作进程发送指令等信息。</p><h5 id="Worker-Worker交互"><a href="#Worker-Worker交互" class="headerlink" title="Worker-Worker交互"></a>Worker-Worker交互</h5><p>工作进程之间的交互，首先要得到彼此的信息，建立管道通信。当工作进程w1需要向w2发送指令时，首先在主进程给它的其他工作进程信息中找到w2的进程ID，然后将正确的指令写入指向w2的通道。w2捕捉到管道中的时间后，解析指令并采取相应的措施。完成worker之间的交互</p><h4 id="Run-Loops时间处理循环模型"><a href="#Run-Loops时间处理循环模型" class="headerlink" title="Run Loops时间处理循环模型"></a>Run Loops时间处理循环模型</h4><p>Run Loops指的是进程内部用来不停的调配工作，对事件进行循环处理的一种模型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx设计架构&quot;&gt;&lt;a href=&quot;#服务器-Nginx设计架构&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx设计架构&quot;&gt;&lt;/a&gt;服务器-Nginx设计架构&lt;/h3&gt;&lt;h4 id=&quot;Nginx服务器架构&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx的事件驱动模型</title>
    <link href="http://yoursite.com/2018/01/25/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/01/25/服务器/服务器-Nginx的事件驱动模型/</id>
    <published>2018-01-25T07:49:39.000Z</published>
    <updated>2018-01-25T07:49:59.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器-Nginx的事件驱动模型"><a href="#服务器-Nginx的事件驱动模型" class="headerlink" title="服务器-Nginx的事件驱动模型"></a>服务器-Nginx的事件驱动模型</h2><h3 id="什么是事件驱动模型"><a href="#什么是事件驱动模型" class="headerlink" title="什么是事件驱动模型"></a>什么是事件驱动模型</h3><p>事件驱动概念：在持续的事物管理过程中，由当前时间节点上出现的事件引起的调用可用资源执行相关任务，解决问题，防止事物堆积的一种策略。<br>一般由：事件收集器、事件发送器和事件处理器组成。</p><h3 id="事件驱动处理库"><a href="#事件驱动处理库" class="headerlink" title="事件驱动处理库"></a>事件驱动处理库</h3><p>又称为多路IO复用方法：主要包括以下几种：</p><h4 id="select库"><a href="#select库" class="headerlink" title="select库"></a>select库</h4><ol><li>创建所关注事件的描述符集合，每个描述符，可以关注读事件、写事件以及异常发生事件。</li><li>调用底层的select函数，等待事件发生。</li><li>轮询所有事件描述符集合中的每一个事件描述符，检查是否有相应的事件发生，如果有，就进行处理。<h4 id="poll库"><a href="#poll库" class="headerlink" title="poll库"></a>poll库</h4>Linux下平台的基本事件驱动模型。基本工作方式与select库相同。<br>区别在于：select库需要为读事件、写事件和异常事件分别创建一个描述符集合，因此在最后轮询的时候，需要分别轮询三个集合。而poll库只需要创建一个集合。轮询的时候同时检查三种事件是否发生。<h4 id="epoll库"><a href="#epoll库" class="headerlink" title="epoll库"></a>epoll库</h4>Nginx服务器支持的高性能事件驱动库。主要的改动是：把描述符列表的管理交由内核负责，一旦有某种事件发生，内核把发生的事件的描述列表通知给进程，这样就避免了轮询整个描述符列表。</li><li>epoll库通过相关调用通知内核创建一个有N个描述符的事件列表。然后给这些描述符设置关注的事件，并添加到内核的事件列表中去。</li><li>完成设置之后，epoll库就开始等待内核通知事件发生。一旦发生，内核将发生事件的描述符上报给epoll库。<h4 id="rtsig模型"><a href="#rtsig模型" class="headerlink" title="rtsig模型"></a>rtsig模型</h4>Real-time signal，实时信号。使用rtsig时，工作进程会通过系统内核建立一个rtsig队列用于存放标记事件发生的信号。每个事件发生时，系统内核就会产生一个信号存放在rtsig队列中等待工作进程的处理。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务器-Nginx的事件驱动模型&quot;&gt;&lt;a href=&quot;#服务器-Nginx的事件驱动模型&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx的事件驱动模型&quot;&gt;&lt;/a&gt;服务器-Nginx的事件驱动模型&lt;/h2&gt;&lt;h3 id=&quot;什么是事件驱动模型
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx的Web请求处理机制</title>
    <link href="http://yoursite.com/2018/01/25/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E7%9A%84Web%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/01/25/服务器/服务器-Nginx的Web请求处理机制/</id>
    <published>2018-01-25T03:53:23.000Z</published>
    <updated>2018-01-25T03:53:45.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器-Nginx的Web请求处理机制"><a href="#服务器-Nginx的Web请求处理机制" class="headerlink" title="服务器-Nginx的Web请求处理机制"></a>服务器-Nginx的Web请求处理机制</h2><h3 id="并行处理请求的三种方式"><a href="#并行处理请求的三种方式" class="headerlink" title="并行处理请求的三种方式"></a>并行处理请求的三种方式</h3><p>web服务器和客户端是一对多的关系，所以web服务器要能同时为多个客户端提供服务。一般有三种方式：多进程方式、多线程方式和异步方式。</p><h4 id="多进程方式"><a href="#多进程方式" class="headerlink" title="多进程方式"></a>多进程方式</h4><p>服务器每接收到一个客户端时，就由服务器主进程生成一个子进程与该客户端交互 ，直到连接断开，子进程结束。</p><ul><li>优点：设计和实现相对简单、子进程之间相互独立，处理客户端请求的过程彼此不干扰，一个有问题不会影响其他的。保证了稳定性。子进程退出时，资源会被系统回收，不会留下垃圾。</li><li>缺点：每生成一个子进程，都要进行内存复制的操作，在资源和时间上会有额外的开销。<br>Apache采用的“预生成进程”可以稍微解决大并发请求，但是本质是多进程，无法解决多并发的问题。<h5 id="多线程方式"><a href="#多线程方式" class="headerlink" title="多线程方式"></a>多线程方式</h5>服务器每接收到一个客户端时，会由服务器主进程派生一个线程出来和该客户端进行交互。</li><li>优点：产生一个线程的开销要小于一个进程，比较规范，利于协作。</li><li>缺点：多个线程在一个内存空间中，彼此互相影响，对内存的管理增加了出错的风险。<h4 id="异步方式"><a href="#异步方式" class="headerlink" title="异步方式"></a>异步方式</h4><h5 id="同步、异步与阻塞、非阻塞"><a href="#同步、异步与阻塞、非阻塞" class="headerlink" title="同步、异步与阻塞、非阻塞"></a>同步、异步与阻塞、非阻塞</h5><strong>同步和异步描述的是通信模式的概念</strong><br>同步：发送方发送请求后，需要等待接收到接收方发回的响应后，才接着发送下一个请求。所有的请求在服务器端得到同步，发送方和接收方对请求的处理步调是一致的。<br>异步：发送方发送请求后，不等待接收方响应这个请求，就继续发送下一个请求。所有来自发送方的请求形成一个队列，接收方处理完后通知发送方。</li></ul><p><strong>阻塞和非阻塞描述的是进程处理调用的方式，在网络通信中，主要指的是网络套接字socket的阻塞和非阻塞方式，socket实质上就是IO操作</strong><br>阻塞：调用结果返回之前，当前的线程从运行状态被挂起，一直等到调用结果返回之后，才进入就绪状态，获取CPU继续执行。<br>非阻塞：调用结果返回之前，线程不会被挂起，而是立即返回执行下一个周期。</p><p>所以共有四种方式：</p><ul><li>同步阻塞：发送方发送请求后，一直等待响应；接收方处理请求时不能立即等到结果的时候，就会一直等待返回结果，才响应发送方，期间不能执行任何其他工作。</li><li>同步非阻塞：发送方发送请求后，一直等待响应；接收方处理请求时不能立即等到结果的时候，就会立即返回，去做别的事情，但是由于没有得到结果，也不响应发送方，发送方一直等待。</li><li>异步阻塞：发送方发送请求后，不等待响应；接收方处理请求时不能立即等到结果的时候，就会一直等待返回结果，才响应发送方，期间不能执行任何其他工作。</li><li>异步非阻塞：发送方发送请求后，不等待响应；接收方处理请求时不能立即等到结果的时候，就会立即返回，去做别的事情，但是由于没有得到结果，也不响应发送方，发送方一直等待。</li></ul><h5 id="Nginx如何处理请求"><a href="#Nginx如何处理请求" class="headerlink" title="Nginx如何处理请求"></a>Nginx如何处理请求</h5><p>Nginx采用的是异步非阻塞的方式。采用Master-work模型（其实实际也有single的单进程模式，但是性能较差，很少使用）。每个工作进程采用异步非阻塞的方式。<br>Nginx服务器的工作进程调用IO后，就去进行其他工作，当IO调用返回，会通知工作进程。接下来就是怎么通知给工作进程了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务器-Nginx的Web请求处理机制&quot;&gt;&lt;a href=&quot;#服务器-Nginx的Web请求处理机制&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx的Web请求处理机制&quot;&gt;&lt;/a&gt;服务器-Nginx的Web请求处理机制&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx模块化结构</title>
    <link href="http://yoursite.com/2018/01/25/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/01/25/服务器/服务器-Nginx模块化结构/</id>
    <published>2018-01-25T03:52:30.000Z</published>
    <updated>2018-01-25T03:53:06.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx模块化结构"><a href="#服务器-Nginx模块化结构" class="headerlink" title="服务器-Nginx模块化结构"></a>服务器-Nginx模块化结构</h3><p>习惯上将Nginx分为：核心模块、标准模块、可选HTTP模块、邮件服务模块和第三方模块五大类。</p><h4 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h4><p>包含对两部分功能的支持：</p><ul><li>主体功能：进程管理、权限控制、错误日志记录、配置解析等</li><li>用于响应请求必需的功能：事件驱动机制、正则表达式解析等<h4 id="标准HTTP模块"><a href="#标准HTTP模块" class="headerlink" title="标准HTTP模块"></a>标准HTTP模块</h4>对应基本的HTTP服务<h4 id="可选HTTP模块"><a href="#可选HTTP模块" class="headerlink" title="可选HTTP模块"></a>可选HTTP模块</h4>快速编译中默认不编译，需要使用的话需要自己加上–with-XXX的参数声明。<h4 id="邮件服务模块"><a href="#邮件服务模块" class="headerlink" title="邮件服务模块"></a>邮件服务模块</h4>Nginx的主要服务之一，快速编译时也不会编译<h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h4></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx模块化结构&quot;&gt;&lt;a href=&quot;#服务器-Nginx模块化结构&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx模块化结构&quot;&gt;&lt;/a&gt;服务器-Nginx模块化结构&lt;/h3&gt;&lt;p&gt;习惯上将Nginx分为：核心模块、标准模块、
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx-一个简单的例子</title>
    <link href="http://yoursite.com/2018/01/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2018/01/24/服务器/服务器-Nginx-一个简单的例子/</id>
    <published>2018-01-24T14:41:26.000Z</published>
    <updated>2018-01-25T00:52:41.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx-一个简单的例子"><a href="#服务器-Nginx-一个简单的例子" class="headerlink" title="服务器-Nginx-一个简单的例子"></a>服务器-Nginx-一个简单的例子</h3><p>直接贴一个几经磨难的简单的例子吧，虽然简单，但是有些不理解的地方，就出了很多错，但是因为这些错误，在对nginx理解稍微深刻了那么一点点的同时，对Linux的操作好像也有了一点进步啊。才知道为什么大家的命令都那么长，而我总是一步步慢慢的来了，一方面不熟，另一方面确实操作的不够多啊。</p><h4 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">user mianhk;</div><div class="line">worker_processes 3;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    use epoll;</div><div class="line">    #worker_connections 768;</div><div class="line">    worker_connections 768;</div><div class="line">    # multi_accept on;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Basic Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    sendfile on;</div><div class="line">    #tcp_nopush on;</div><div class="line">    #tcp_nodelay on;</div><div class="line">    keepalive_timeout 65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line">    # server_tokens off;</div><div class="line"></div><div class="line">    # server_names_hash_bucket_size 64;</div><div class="line">    # server_name_in_redirect off;</div><div class="line"></div><div class="line">    include /etc/nginx/mime.types;</div><div class="line">    default_type application/octet-stream;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # SSL Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</div><div class="line">    #ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Logging Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    access_log /var/log/nginx/access.log;</div><div class="line">    error_log /var/log/nginx/error.log;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Gzip Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    gzip on;</div><div class="line">    gzip_disable &quot;msie6&quot;;</div><div class="line"></div><div class="line">    # gzip_vary on;</div><div class="line">    # gzip_proxied any;</div><div class="line">    # gzip_comp_level 6;</div><div class="line">    # gzip_buffers 16 8k;</div><div class="line">    # gzip_http_version 1.1;</div><div class="line">    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Virtual Host Configs</div><div class="line">    ##</div><div class="line">    ## 配置虚拟主机1</div><div class="line">    server &#123;</div><div class="line">        listen        8081;   #监听端口</div><div class="line">        server_name   myServer1;</div><div class="line">        access_log  var/myweb/server1/log/access_log;  #配置日志存放路径</div><div class="line">        error_page 404 /404.thml;   # 错误界面</div><div class="line"></div><div class="line">        location /server1/location1 &#123; #配置/server1/location1请求的location</div><div class="line">            root /var/myweb;</div><div class="line">            index index.svr1-loc1.htm;</div><div class="line">        &#125;</div><div class="line">        location /server1/location2 &#123;  #配置/server1/location2请求的location</div><div class="line">            root /var/myweb;</div><div class="line">            index index.svr1-locl2.htm;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;   #配置虚拟主机myServer2</div><div class="line">        listen     8082;</div><div class="line">        server_name 192.168.1.31;</div><div class="line">        access_log var/myweb/server2/log/access_log;</div><div class="line">        error_page 404 /404.thml;  #对错误页面定向</div><div class="line"></div><div class="line">        location /server2/location1 &#123;</div><div class="line">            root /var/myweb;</div><div class="line">            index index.svr2-loc1.htm;</div><div class="line">        &#125;</div><div class="line">        location /svr2/loc2 &#123;</div><div class="line">            alias /myweb/server2/location2/;  #对location的URI进行更改</div><div class="line">            index index.svr2-locl2.htm;</div><div class="line">        &#125;</div><div class="line">        location = /404.html &#123;  #配置错误页面转向</div><div class="line">            root /var/myweb;</div><div class="line">            index 404.html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    #include /etc/nginx/conf.d/*.conf;</div><div class="line">    #include /etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>在浏览器中输入：<code>http://111.230.231.95:8081/server1/location1/</code><img src="https://github.com/mianhk/image-save/blob/master/server/002/001.jpg?raw=true" alt=""><br>输入<code>http://111.230.231.95:8082/server2/location1/</code>显示：<br><img src="https://github.com/mianhk/image-save/blob/master/server/002/002.jpg?raw=true" alt=""></p><h4 id="出现的问题分析"><a href="#出现的问题分析" class="headerlink" title="出现的问题分析"></a>出现的问题分析</h4><ul><li><p>root目录的位置：<br>原来root的目录虽然写的是/var/myweb，但是实际发现位置是 在<code>/usr/share/nginx</code>下面，所以需要拷过去，具体这个位置是在哪里设置的，因为已经把所有其他的include都关掉了，所以可能是ubuntu下安装之后的默认目录，就像默认监听的80端口的页面其实在<code>var/www/html</code>下面一样。 导致出了各种莫名其妙的错误啊:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">root@VM-95-58-ubuntu:/etc/nginx# systemctl status nginx.service</div><div class="line">● nginx.service - A high performance web server and a reverse proxy server</div><div class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</div><div class="line">   Active: failed (Result: exit-code) since Wed 2018-01-24 22:05:09 CST; 1s ago</div><div class="line">  Process: 32576 ExecStop=/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid (code</div><div class="line">  Process: 21311 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)</div><div class="line">  Process: 3307 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=1/FAI</div><div class="line"> Main PID: 21314 (code=exited, status=0/SUCCESS)</div><div class="line"></div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: Starting A high performance web server and a reverse proxy server.</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu nginx[3307]: nginx: [emerg] open() &quot;/usr/share/nginx/var/myweb/server1/log/acc</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu nginx[3307]: nginx: configuration file /etc/nginx/nginx.conf test failed</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: nginx.service: Control process exited, code=exited status=1</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: Failed to start A high performance web server and a reverse proxy</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: nginx.service: Unit entered failed state.</div><div class="line">Jan 24 22:05:09 VM-95-58-ubuntu systemd[1]: nginx.service: Failed with result &apos;exit-code&apos;.</div></pre></td></tr></table></figure></li><li><p>另一个就是关于config文件的格式，一定要仔细写，需要加分号，然后就是最后的<code>/</code>，对于nginx的配置来说，是意义重大的，后面可能会说到这个问题，但是现在还是要写上。</p></li><li>刚刚测试，好像发现这里还有其他的问题，比如我的location2好像打不开啊，尴尬，明天再看看出了什么问题。。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx-一个简单的例子&quot;&gt;&lt;a href=&quot;#服务器-Nginx-一个简单的例子&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx-一个简单的例子&quot;&gt;&lt;/a&gt;服务器-Nginx-一个简单的例子&lt;/h3&gt;&lt;p&gt;直接贴一个几经磨难的
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx基础配置</title>
    <link href="http://yoursite.com/2018/01/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/01/24/服务器/服务器-Nginx基础配置/</id>
    <published>2018-01-24T12:50:05.000Z</published>
    <updated>2018-01-24T12:50:37.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx基础配置"><a href="#服务器-Nginx基础配置" class="headerlink" title="服务器-Nginx基础配置"></a>服务器-Nginx基础配置</h3><h4 id="nginx-conf文件结构"><a href="#nginx-conf文件结构" class="headerlink" title="nginx.conf文件结构"></a>nginx.conf文件结构</h4><p>Nginx的默认配置文件为：<code>nginx.conf</code>，文件一共由三个部分组成，分别为：<code>全局块、events块、http块</code>在<code>http块</code>中，包含http全局块，多个server块。在每个<code>server块</code>中，可以包含多个server块和location块。</p><p>同一模块中嵌套的配置块。各个之间不存在次序关系，也就是是同时生效的。另外，在高一等级的配置可能会被更内层括号内的设置覆盖，这个其实跟我们的继承或者函数中差不多。</p><ul><li>全局块：（从配置文件开始到events的一部分）主要影响Nginx服务器整体运行的配置指令 ，顾名思义，能够作用于全局。</li><li>evevts块：主要影响Nginx服务器与用户的网络连接。这部分对Nginx服务器性能影响较大。</li><li>http块：代理、缓存和日志定义等绝大部分功能和第三方模块的配置都在这部分。由于http块包括server块，这里用http全局块表示不包含server块的部分。</li><li>server块：和“虚拟主机”密切联系。利用虚拟主机技术可以避免为每一个要用运行的网站提供单独的Nginx服务器，也不需要为每个网站对应一组nginx进程。一个http块中可以包含多个server块，每个server块相当于一个虚拟主机，它内部可以有多台主机联合提供服务，一起对外提供在逻辑上的一组服务（或网站）。server全局块一般配置的是：虚拟主机的监听配置和本虚拟主机的名称和IP配置。</li><li>location块：location块其实是server块的一个指令，主要作用是：基于Nginx服务器接收到的字符串，对除虚拟主机名称外的字符串进行匹配，对特定的请求进行处理、地址定向、数据缓存和应答控制等功能。</li></ul><h4 id="详细配置分析"><a href="#详细配置分析" class="headerlink" title="详细配置分析"></a>详细配置分析</h4><p>接下来是一个详细解释的配置的设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">                                     #全局块开始</div><div class="line">user user [group];                       #可以开启nginx服务的用户名user和所对应的group（可选）</div><div class="line">#user nobody nobody;         #注释或者nobody可以表示任何人都能启动</div><div class="line">worker_processes number|auto;               #开启的工作进程的数量，auto则会根据系统自动</div><div class="line">pid /run/nginx.pid;                  #存储进程pid的文件，记得不止要加上路径，还要加上文件名，并且开启服务的用户需要对该文件有权限</div><div class="line"></div><div class="line">events &#123;                             #events块</div><div class="line">    worker_connections 768;          #每一个工作进程能开启的最大连接个数：总的连接个数total=worker_processes*worker_connections</div><div class="line">    # accept_mutex on;     #设置网络连接的序列化，解决“惊群”的问题（当一个网络连接到来时，多个睡眠进程被唤醒，影响系统性能）</div><div class="line">    # multi_accept on;  #允许接受多个网络连接</div><div class="line">    #use method;  #时间驱动模型的选择:select|poll|kqueue|epoll|rtsig|/dev/poll|eventport</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;                               #http块</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Basic Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    sendfile on;</div><div class="line">    tcp_nopush on;</div><div class="line">    tcp_nodelay on;</div><div class="line">    keepalive_timeout 65;   #连接超时时间</div><div class="line">    #keepalive_requests number; #单连接请求数上限</div><div class="line">    types_hash_max_size 2048;</div><div class="line">    # server_tokens off;</div><div class="line"></div><div class="line">    # server_names_hash_bucket_size 64;</div><div class="line">    # server_name_in_redirect off;</div><div class="line"></div><div class="line">    include /etc/nginx/mime.types;   #MIME-types存储了媒体资源的类型</div><div class="line">    default_type application/octet-stream; #处理前端请求的MIME类型，可在http、server、location中定义</div><div class="line"></div><div class="line">    ##</div><div class="line">    # SSL Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Logging Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    access_log /var/log/nginx/access.log;  # 日志存放文件名，该指令可以在全局块、http块和server块中，作用域不同</div><div class="line">    error_log /var/log/nginx/error.log;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Gzip Settings</div><div class="line">    ##</div><div class="line"></div><div class="line">    gzip on;</div><div class="line">    gzip_disable &quot;msie6&quot;;</div><div class="line"></div><div class="line">    # gzip_vary on;</div><div class="line">    # gzip_proxied any;</div><div class="line">    # gzip_comp_level 6;</div><div class="line">    # gzip_buffers 16 8k;</div><div class="line">    # gzip_http_version 1.1;</div><div class="line">    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">    ##</div><div class="line">    # Virtual Host Configs</div><div class="line">    ##</div><div class="line"></div><div class="line">    include /etc/nginx/conf.d/*.conf;   # include 引入配置文件，支持相对路径</div><div class="line">    include /etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx基础配置&quot;&gt;&lt;a href=&quot;#服务器-Nginx基础配置&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx基础配置&quot;&gt;&lt;/a&gt;服务器-Nginx基础配置&lt;/h3&gt;&lt;h4 id=&quot;nginx-conf文件结构&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-Nginx安装和基本配置</title>
    <link href="http://yoursite.com/2018/01/23/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-Nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/01/23/服务器/服务器-Nginx安装和基本配置/</id>
    <published>2018-01-23T14:25:21.000Z</published>
    <updated>2018-01-23T14:26:39.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器-Nginx安装和基本配置"><a href="#服务器-Nginx安装和基本配置" class="headerlink" title="服务器-Nginx安装和基本配置"></a>服务器-Nginx安装和基本配置</h3><h4 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h4><p>没有看书上，直接在ubuntu输了一个nginx，大概是ubuntu的支持比较好，直接提醒可以安装，于是就毫不客气的装了一下就启动了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div><div class="line">sudo /etc/init.d/nginx start</div></pre></td></tr></table></figure></p><p>接下来直接在浏览器里面打开，就能看到hello,Nginx这样欣慰 的界面了。</p><p>之后能够在文件夹<code>/etc</code>中看到我们的配置的文件：<br><img src="https://github.com/mianhk/image-save/blob/master/server/001/001.jpg?raw=true" alt=""><br>在<code>var/www/html</code>文件夹中能看到<code>index.html</code>文件，即是我们的主页文件。<br><strong>这里没有采用源码的方式安装，其实是觉得没有必要了。 </strong></p><h4 id="Nginx的启停"><a href="#Nginx的启停" class="headerlink" title="Nginx的启停"></a>Nginx的启停</h4><p>刚刚已经直接开启了Nginx了，其实关就更简单了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/nginx stop  #停止nginx</div><div class="line">sudo /etc/init.d/nginx restart # 重启nginx</div></pre></td></tr></table></figure></p><p>这里需要注意的是nginx的平滑重启：Nginx服务进程接受到信号后，首先读取新的Nginx的配置文件，如果新的配置文件语法正确，则启动新的Nginx服务，然后平缓的关闭旧的服务进程。否则，仍然使用旧的Nginx进程提供服务。</p><h4 id="Nginx服务器的升级"><a href="#Nginx服务器的升级" class="headerlink" title="Nginx服务器的升级"></a>Nginx服务器的升级</h4><p>平滑升级：Nginx服务接收到USR2信号后，首先将旧的nginx.pid文件（如果配置文件中更改过名字，也是相同的过程）添加后缀<code>.oldbin</code>，变为nginx.pid.oldbin文件；之后执行新版本Nginx服务器的二进制文件启动服务。如果新的服务启动成功，系统中将有新旧两个Nginx服务共同提供Web服务。之后，需要像旧的Nginx服务进程发送WINCH信号，使旧的Nginx服务平滑停止，并删除nginx.pid.oldbin文件。在发送WINCH信号之前，可以随时停止新的Nginx服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务器-Nginx安装和基本配置&quot;&gt;&lt;a href=&quot;#服务器-Nginx安装和基本配置&quot; class=&quot;headerlink&quot; title=&quot;服务器-Nginx安装和基本配置&quot;&gt;&lt;/a&gt;服务器-Nginx安装和基本配置&lt;/h3&gt;&lt;h4 id=&quot;Nginx的安装&quot;
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>服务器-初识Nginx</title>
    <link href="http://yoursite.com/2018/01/23/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%88%9D%E8%AF%86Nginx/"/>
    <id>http://yoursite.com/2018/01/23/服务器/服务器-初识Nginx/</id>
    <published>2018-01-23T13:39:44.000Z</published>
    <updated>2018-01-23T13:41:25.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识Nginx"><a href="#初识Nginx" class="headerlink" title="初识Nginx"></a>初识Nginx</h3><h4 id="Nginx的历史"><a href="#Nginx的历史" class="headerlink" title="Nginx的历史"></a>Nginx的历史</h4><p>Netcraft公司，1994年在英国成立。</p><h4 id="常见服务器"><a href="#常见服务器" class="headerlink" title="常见服务器"></a>常见服务器</h4><ul><li>Apache服务器：目前最广泛使用的web服务器，由于使用了以“进程”为基础的结构，会消耗更多的系统开支。因此通常对Apache web进行扩容的时候，是增加服务器或者扩充集群节点而不是增加处理器。</li><li>Microsoft IIS：微软的，付费软件，部署成本较高。</li><li>Tomcat服务器：最初Sun公司开发，是官方推荐的Servlet和JSP容器，在中小型系统和并发访问用户不是很多的时候，可以作为轻量级应用服务器。一般应用中，通常作为Apache服务器的扩展部分，为运行JSP页面和Servlet提供服务，提供的Servlet容器是Tomcat的默认模式。Tomcat也具有处理HTML页面的功能，只是处理静态页面的能力不如Apache服务器。</li><li>Lighttpd服务器：德国开源的一个轻量级web服务器，它专门针对高性能网站，提供一种安全、快速、兼容性良好并且灵活的Web Server的环境。同时有非常低的内存开销、CPU占用率低、模块丰富。  但是最为轻量服务器，与Apache这种大型服务器相比还有差距。</li><li>Nginx</li></ul><h4 id="Nginx的功能特性"><a href="#Nginx的功能特性" class="headerlink" title="Nginx的功能特性"></a>Nginx的功能特性</h4><h5 id="基本的HTTP服务："><a href="#基本的HTTP服务：" class="headerlink" title="基本的HTTP服务："></a>基本的HTTP服务：</h5><ul><li>作为HTTP代理服务器和反向代理服务器</li><li>支持通过缓存加速访问</li><li>完成简单的负载均衡和容错</li><li>支持包过滤</li><li>支持SSL<h5 id="高级HTTP服务："><a href="#高级HTTP服务：" class="headerlink" title="高级HTTP服务："></a>高级HTTP服务：</h5></li><li>进行自定义配置</li><li>支持虚拟主机</li><li>支持URL重定向</li><li>支持网络监控</li><li>支持流媒体传输<h5 id="邮件服务："><a href="#邮件服务：" class="headerlink" title="邮件服务："></a>邮件服务：</h5></li><li>支持IMAP/POP3代理服务</li><li>支持内部SMTP代理服务</li></ul><h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h4><h5 id="HTTP代理和反向代理"><a href="#HTTP代理和反向代理" class="headerlink" title="HTTP代理和反向代理"></a>HTTP代理和反向代理</h5><p>在反向代理服务方面，Nginx服务器转发前端请求性能稳定，并且后端转发与业务配置相互分离，配置相当灵活。</p><h5 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h5><p>负载均衡：一是将单一的重负载分担到多个网络节点做并行处理，每个节点处理结束后将结果汇总返回给用户；二是讲大量的前端并发访问或数据流量分担到多个后端网络节点上分别处理，有效减少前端用户等待响应的时间。Nginx服务器的负载均衡主要是对大量的前端访问和流量进行分流，以保证前端用户的访问效率。</p><p>Nginx服务器的负载均衡策略可以划分为两类：</p><ul><li>内置策略：轮询、加权轮询和IP hash</li><li>扩展策略：通过第三方模块实现，常见：url hash、fair</li></ul><h5 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初识Nginx&quot;&gt;&lt;a href=&quot;#初识Nginx&quot; class=&quot;headerlink&quot; title=&quot;初识Nginx&quot;&gt;&lt;/a&gt;初识Nginx&lt;/h3&gt;&lt;h4 id=&quot;Nginx的历史&quot;&gt;&lt;a href=&quot;#Nginx的历史&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="后台开发 Linux Nginx" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91-Linux-Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux用户管理</title>
    <link href="http://yoursite.com/2018/01/23/Linux/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/01/23/Linux/Linux用户管理/</id>
    <published>2018-01-23T13:04:16.000Z</published>
    <updated>2018-01-25T13:46:14.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux账户管理"><a href="#Linux账户管理" class="headerlink" title="Linux账户管理"></a>Linux账户管理</h3><h4 id="新建账户（ubuntu）"><a href="#新建账户（ubuntu）" class="headerlink" title="新建账户（ubuntu）"></a>新建账户（ubuntu）</h4><p>新建账户比较简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd mianhk1  #mianhk1为账户名</div></pre></td></tr></table></figure></p><p>之后可以在三个文件夹看到新账户的信息：<br><img src="https://github.com/mianhk/image-save/blob/master/Linux/002/001.jpg?raw=true" alt=""><br>此时可以看到，shadow文件中，第二个存密码的位置是一个!,此时新建的账户还没有密码，当然也可以看到home目录下没有mianhk1的文件夹，此时需要先改密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd mianhk1 #修改密码</div></pre></td></tr></table></figure><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/002/002.jpg?raw=true" alt=""><br>这时候就能看到shadow文件中保存的密码了，同时，也能在home目录下看到miahk1的文件夹了。但是此时切换到mianhk1账户时，看到的仍然是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mianhk1@VM-95-58-ubuntu:/home$ ls</div><div class="line">mianhk  mianhk1</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div></pre></td></tr></table></figure></p><p>这个原因其实是无法建立bash的一些文件，原因在上图中可以看到，因为我们没有指定系统的默认bash。通过修改之后，添加默认的bash还是出现了下列的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[sudo] password for mianhk1:</div><div class="line">mianhk1 is not in the sudoers file.  This incident will be reported.</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div><div class="line">bash: history: /home/mianhk1/.bash_history: cannot create: Permission denied</div></pre></td></tr></table></figure></p><p>原因还没有权限，用root用户看了一下，发现原来mianhk1的所有者原来是root用户，直接修改拥有者和用户权限吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chown mianhk1 mianhk1  #修改拥有者用户</div><div class="line">chgrp mianhk1 mianhk1  #修改拥有组</div><div class="line">chmod +040 mianhk1     #修改文件夹权限</div></pre></td></tr></table></figure></p><p>之后可以通过命令查看生成的账户的信息了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@VM-95-58-ubuntu:/home# useradd -D</div><div class="line">GROUP=100           #用户组</div><div class="line">HOME=/home          #用户家目录的位置</div><div class="line">INACTIVE=-1         #密码失效日，在 shadow 内的第 7 栏</div><div class="line">EXPIRE=             #账号失效日，在 shadow 内的第 8 栏</div><div class="line">SHELL=/bin/sh       #预设的shell</div><div class="line">SKEL=/etc/skel      #用户家目录的内容数据参考目录</div><div class="line">CREATE_MAIL_SPOOL=no#是否主动帮使用者建立邮件信箱(mailbox)</div></pre></td></tr></table></figure></p><p>之后看了一下centos的，发现根本直接新建就好使了啊，<strong>^_^</strong>尴尬</p><p>中间还出了个很尴尬的事情，一不小心删了/etc/passwd 文件。。<br>没事，想想这么重要的文件肯定会有备份的，果然是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/passwd- /etc/passwd</div></pre></td></tr></table></figure></p><h4 id="删除账户"><a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deluser mianhk1  #mianhk1 为账户的名字</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux账户管理&quot;&gt;&lt;a href=&quot;#Linux账户管理&quot; class=&quot;headerlink&quot; title=&quot;Linux账户管理&quot;&gt;&lt;/a&gt;Linux账户管理&lt;/h3&gt;&lt;h4 id=&quot;新建账户（ubuntu）&quot;&gt;&lt;a href=&quot;#新建账户（ubuntu）&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="后台开发" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务器Linux挖比特币</title>
    <link href="http://yoursite.com/2018/01/19/%E7%94%9F%E6%B4%BB/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E6%8C%96%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    <id>http://yoursite.com/2018/01/19/生活/腾讯云服务器Linux挖比特币/</id>
    <published>2018-01-19T14:56:59.000Z</published>
    <updated>2018-01-19T14:57:56.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="腾讯云服务器Linux挖比特币"><a href="#腾讯云服务器Linux挖比特币" class="headerlink" title="腾讯云服务器Linux挖比特币"></a>腾讯云服务器Linux挖比特币</h3><p>毕竟又是一个周五的下午，有点等着放假，就想起来现在的挖矿，虽然现在挖矿都是专门的矿机或者是显卡之类的。但是经过计算，好像自己挖的话连电费都不够，就想试试云服务器可不可以，虽然CPU做这种傻瓜的计算问题可能不如专门的器件是吧。<br>这是我的ubuntu服务器的。</p><ul><li>注册一个矿池账号，推荐<a href="https://www.f2pool.com/" target="_blank" rel="external">https://www.f2pool.com/</a></li><li>通过ssh连接远程服务器</li><li><p>下载挖矿工具<br>这里别人推荐的地址可能有问题，或者我这个之后也会升级，所以可以直接去官网下载最新的推荐的版本就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://downloads.sourceforge.net/project/cpuminer/pooler-cpuminer-2.5.0-linux-x86_64.tar.gz</div></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xvzf ooler-cpuminer-2.5.0-linux-x86_64.tar.gz</div></pre></td></tr></table></figure></li><li><p>nohup命令后台一直运行<br>注意：不同的端口对应不同的币，一个用户名可以在后面例如：mianhk.001，mianhk.002代表不同的矿机。userpass后面是账户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 以下不同的地址对应的是不同的矿</div><div class="line">nohup ./minerd -a scrypt -o stratum+tcp://stratum.f2pool.com:3333 --userpass=账号:密码 &amp;</div><div class="line"></div><div class="line">nohup ./minerd -a scrypt -o stratum+tcp://xmr.f2pool.com:13531 --userpass=账号:密码 &amp;</div><div class="line"></div><div class="line">nohup ./minerd -a scrypt -o stratum+tcp://zec.f2pool.com:3357 --userpass=账号:密码 &amp;</div></pre></td></tr></table></figure></li></ul><p>之后，就可以打开日志文件看到在挖矿了。我们还需要在网站填上自己的比特币钱包地址。但是这个挖的数目确实有点小啊<br>  <img src="https://github.com/mianhk/image-save/blob/master/tools/001/001.png?raw=true" alt=""></p><p>之后打开腾讯云服务器可以看到CPU已经跑满了啊。<br><img src="https://github.com/mianhk/image-save/blob/master/tools/001/002.png?raw=true" alt=""></p><p>然后之后就看到网上说云服务器跑的太满的话，会被封的，那就把CPU限制一下吧。<br>步骤如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cpulimit</div><div class="line">top  # 查看pid</div><div class="line">cpulimit -p pid -l n  # n是限制的值</div></pre></td></tr></table></figure></p><p><strong>下面是centos的，因为有两台服务器，但是centos放的是vpn，平时还没装过软件呢</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install epel-release</div><div class="line">yum install cpulimit</div><div class="line">top  # 查看pid</div><div class="line">cpulimit -p pid -l n  # n是限制的值</div></pre></td></tr></table></figure></p><p>限制之后，就能明显的看到CPU占用没有满了：<br><img src="https://github.com/mianhk/image-save/blob/master/tools/001/003.jpg?raw=true" alt=""><br><img src="https://github.com/mianhk/image-save/blob/master/tools/001/004.jpg?raw=true" alt=""></p><p>哈哈，就当玩玩吧，多了解一下区块链，总得跟上节奏吧，虽然已经有点晚了的样子</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;腾讯云服务器Linux挖比特币&quot;&gt;&lt;a href=&quot;#腾讯云服务器Linux挖比特币&quot; class=&quot;headerlink&quot; title=&quot;腾讯云服务器Linux挖比特币&quot;&gt;&lt;/a&gt;腾讯云服务器Linux挖比特币&lt;/h3&gt;&lt;p&gt;毕竟又是一个周五的下午，有点等着放假
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux修改用户名和所属组</title>
    <link href="http://yoursite.com/2018/01/17/Linux/Linux%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E6%89%80%E5%B1%9E%E7%BB%84/"/>
    <id>http://yoursite.com/2018/01/17/Linux/Linux修改用户名和所属组/</id>
    <published>2018-01-17T11:48:22.000Z</published>
    <updated>2018-01-25T13:46:11.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux修改用户名和所属组"><a href="#Linux修改用户名和所属组" class="headerlink" title="Linux修改用户名和所属组"></a>Linux修改用户名和所属组</h3><p>腾讯云的云服务器的，初始的用户名和主机名都是分配的。主机名其实还好了，用户名总是一个ubuntu有点看的不爽，正好看到了用户管理，就在这准备改一下，mianhk显然是一个更好一点的选择是吧。_<em>^ </em> ^_</p><h4 id="更改用户名"><a href="#更改用户名" class="headerlink" title="更改用户名"></a>更改用户名</h4><h5 id="修改sudoers文件"><a href="#修改sudoers文件" class="headerlink" title="修改sudoers文件"></a>修改sudoers文件</h5><p>因为之后的操作，直接进入root用户操作。<br>将要改的名字提前赋予较高的权限，防止修改下面文件的过程中出现权限不足的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sudoers</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/001.jpg?raw=true" alt=""></p><h5 id="修改shadow文件"><a href="#修改shadow文件" class="headerlink" title="修改shadow文件"></a>修改shadow文件</h5><p>shadow文件存储与登陆有关的内容，格式如下：<br>username: passwd: lastchg: min: max: warn: inactive: expire: flag<br>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:<br>警告时间:不活动时间:失效时间:标志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadow</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/002.jpg?raw=true" alt=""></p><h5 id="修改开始目录"><a href="#修改开始目录" class="headerlink" title="修改开始目录"></a>修改开始目录</h5><p>每个用户都有一个家目录，远程登录的时候就会进入家目录。包含用户相关配置信息,例如：<img src="https://github.com/mianhk/image-save/blob/master/Linux/001/003.jpg?raw=true" alt=""><br>现在直接将这个家目录修改就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv ubuntu mianhk  # ubuntu 原来的目录</div></pre></td></tr></table></figure></p><h5 id="修改passwd文件"><a href="#修改passwd文件" class="headerlink" title="修改passwd文件"></a>修改passwd文件</h5><p>passwd的文件格式是：<br>用户名: 密码 : uid  : gid :用户描述：主目录：登陆shell<br>需要将用户描述和主目录都改成新的，不然无法读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/passwd</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/004.jpg?raw=true" alt=""></p><h5 id="修改所属组"><a href="#修改所属组" class="headerlink" title="修改所属组"></a>修改所属组</h5><p>其实这里的修改，只需要将所有原来的ubuntu所属的组替换为mianhk即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/group</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/005.jpg?raw=true" alt=""></p><h5 id="删除ubuntu"><a href="#删除ubuntu" class="headerlink" title="删除ubuntu"></a>删除ubuntu</h5><p>再次进入/etc/sudoers 中，讲ubuntu删除</p><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><p>　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux修改用户名和所属组&quot;&gt;&lt;a href=&quot;#Linux修改用户名和所属组&quot; class=&quot;headerlink&quot; title=&quot;Linux修改用户名和所属组&quot;&gt;&lt;/a&gt;Linux修改用户名和所属组&lt;/h3&gt;&lt;p&gt;腾讯云的云服务器的，初始的用户名和主机名都是
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="后台开发" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux修改用户名和所属组</title>
    <link href="http://yoursite.com/2018/01/17/Linux%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E6%89%80%E5%B1%9E%E7%BB%84/"/>
    <id>http://yoursite.com/2018/01/17/Linux修改用户名和所属组/</id>
    <published>2018-01-17T11:48:22.000Z</published>
    <updated>2018-01-25T13:45:34.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux修改用户名和所属组"><a href="#Linux修改用户名和所属组" class="headerlink" title="Linux修改用户名和所属组"></a>Linux修改用户名和所属组</h3><p>腾讯云的云服务器的，初始的用户名和主机名都是分配的。主机名其实还好了，用户名总是一个ubuntu有点看的不爽，正好看到了用户管理，就在这准备改一下，mianhk显然是一个更好一点的选择是吧。_<em>^ </em> ^_</p><h4 id="更改用户名"><a href="#更改用户名" class="headerlink" title="更改用户名"></a>更改用户名</h4><h5 id="修改sudoers文件"><a href="#修改sudoers文件" class="headerlink" title="修改sudoers文件"></a>修改sudoers文件</h5><p>因为之后的操作，直接进入root用户操作。<br>将要改的名字提前赋予较高的权限，防止修改下面文件的过程中出现权限不足的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sudoers</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/001.jpg?raw=true" alt=""></p><h5 id="修改shadow文件"><a href="#修改shadow文件" class="headerlink" title="修改shadow文件"></a>修改shadow文件</h5><p>shadow文件存储与登陆有关的内容，格式如下：<br>username: passwd: lastchg: min: max: warn: inactive: expire: flag<br>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:<br>警告时间:不活动时间:失效时间:标志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/shadow</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/002.jpg?raw=true" alt=""></p><h5 id="修改开始目录"><a href="#修改开始目录" class="headerlink" title="修改开始目录"></a>修改开始目录</h5><p>每个用户都有一个家目录，远程登录的时候就会进入家目录。包含用户相关配置信息,例如：<img src="https://github.com/mianhk/image-save/blob/master/Linux/001/003.jpg?raw=true" alt=""><br>现在直接将这个家目录修改就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv ubuntu mianhk  # ubuntu 原来的目录</div></pre></td></tr></table></figure></p><h5 id="修改passwd文件"><a href="#修改passwd文件" class="headerlink" title="修改passwd文件"></a>修改passwd文件</h5><p>passwd的文件格式是：<br>用户名: 密码 : uid  : gid :用户描述：主目录：登陆shell<br>需要将用户描述和主目录都改成新的，不然无法读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/passwd</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/004.jpg?raw=true" alt=""></p><h5 id="修改所属组"><a href="#修改所属组" class="headerlink" title="修改所属组"></a>修改所属组</h5><p>其实这里的修改，只需要将所有原来的ubuntu所属的组替换为mianhk即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/group</div></pre></td></tr></table></figure></p><p><img src="https://github.com/mianhk/image-save/blob/master/Linux/001/005.jpg?raw=true" alt=""></p><h5 id="删除ubuntu"><a href="#删除ubuntu" class="headerlink" title="删除ubuntu"></a>删除ubuntu</h5><p>再次进入/etc/sudoers 中，讲ubuntu删除</p><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><p>　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux修改用户名和所属组&quot;&gt;&lt;a href=&quot;#Linux修改用户名和所属组&quot; class=&quot;headerlink&quot; title=&quot;Linux修改用户名和所属组&quot;&gt;&lt;/a&gt;Linux修改用户名和所属组&lt;/h3&gt;&lt;p&gt;腾讯云的云服务器的，初始的用户名和主机名都是
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="后台开发" scheme="http://yoursite.com/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-36-Valid-Sudoku</title>
    <link href="http://yoursite.com/2018/01/14/%E5%88%B7%E9%A2%98/LeetCode-36-Valid-Sudoku/"/>
    <id>http://yoursite.com/2018/01/14/刷题/LeetCode-36-Valid-Sudoku/</id>
    <published>2018-01-14T13:53:42.000Z</published>
    <updated>2018-01-14T13:54:13.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-36-Valid-Sudoku"><a href="#LeetCode-36-Valid-Sudoku" class="headerlink" title="LeetCode-36-Valid-Sudoku"></a>LeetCode-36-Valid-Sudoku</h3><blockquote><p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.<br>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br><a href="http://img.blog.csdn.net/20160530213836839" target="_blank" rel="external"></a></p></blockquote><p>判断一个二维数组是不是数独数组。要求是：同行同列，斜对角不能有相同的数组，这里需要定义三个数组，当然参考了一下讨论区一个大神的代码。采用行列，竖列和斜列。其中比较惊艳的是k=i/3*3+j/3;这里可以直接得到斜对角的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) &#123;</div><div class="line">        int used1[9][9]=&#123;0&#125;,used2[9][9]=&#123;0&#125;,used3[9][9]=&#123;0&#125;;</div><div class="line">        for(int i=0;i&lt;board.size();++i)&#123;</div><div class="line">            for(int j=0;j&lt;board[i].size();++j)&#123;</div><div class="line">                if(board[i][j]!=&apos;.&apos;)&#123;</div><div class="line">                    int num=board[i][j]-&apos;0&apos;-1,k=i/3*3+j/3;</div><div class="line">                    if(used1[i][num]||used2[j][num]||used3[k][num])</div><div class="line">                        return false;</div><div class="line">                    used1[i][num]=used2[j][num]=used3[k][num]=1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h4><p><a href="http://blog.csdn.net/u012050154/article/details/51541380" target="_blank" rel="external">http://blog.csdn.net/u012050154/article/details/51541380</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-36-Valid-Sudoku&quot;&gt;&lt;a href=&quot;#LeetCode-36-Valid-Sudoku&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-36-Valid-Sudoku&quot;&gt;&lt;/a&gt;LeetCode-36-Va
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-34-Search-for-a-Range</title>
    <link href="http://yoursite.com/2018/01/14/%E5%88%B7%E9%A2%98/LeetCode-34-Search-for-a-Range/"/>
    <id>http://yoursite.com/2018/01/14/刷题/LeetCode-34-Search-for-a-Range/</id>
    <published>2018-01-14T13:52:38.000Z</published>
    <updated>2018-01-14T13:53:13.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-34-Search-for-a-Range"><a href="#LeetCode-34-Search-for-a-Range" class="headerlink" title="LeetCode-34-Search-for-a-Range"></a>LeetCode-34-Search-for-a-Range</h3><blockquote><p>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.<br>Your algorithm’s runtime complexity must be in the order of O(log n).<br>  If the target is not found in the array, return [-1, -1].</p></blockquote><p>在一个排序的数组中找到出现这个值的起点和重点。很容易想到的是二分查找了。复杂度为<code>nlog(n)</code>。思路如下，先二分查找，找到下界，如果下界lo的值不等于target时，直接返回{-1，-1}，否则，直接将下界添加到res中。之后重置上界，同样的方法搜索上界。注意到，<strong>由于每次循环中，我们只考虑了一个界，所以只有一个界能mid+1，否则就会出现相等的也被else处理了。写的时候就是这个问题没有考虑好，折腾了很久。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class="line">        vector&lt;int&gt; res=&#123;-1,-1&#125;;</div><div class="line">        if(nums.size()&lt;=0)</div><div class="line">            return res;</div><div class="line">        int lo=0,hi=nums.size()-1;</div><div class="line">        while(lo&lt;hi)&#123;  //找下界</div><div class="line">            int mid=(lo+hi)/2;</div><div class="line">            if(nums[mid]&lt;target)</div><div class="line">                lo=mid+1;</div><div class="line">            else</div><div class="line">                hi=mid;</div><div class="line">        &#125;</div><div class="line">        if((nums[lo]!=target))&#123;</div><div class="line">            return res;</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">            res[0]=lo;</div><div class="line">        hi=nums.size()-1;</div><div class="line">        while(lo&lt;hi)&#123;  //找上界</div><div class="line">            int mid=(lo+hi)/2+1;</div><div class="line">            if(nums[mid]&gt;target)</div><div class="line">                hi=mid-1;</div><div class="line">            else</div><div class="line">                lo=mid;</div><div class="line">        &#125;</div><div class="line">        res[1]=hi;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>当然还看到有用stl的方法的，直接用lower_bound()和upper_bound()函数，速度要快一些。虽然觉得stl应该也是一样的原理写的吧。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class="line">        if (nums.empty()) return&#123; -1, -1 &#125;;</div><div class="line"></div><div class="line">    auto iter1 = lower_bound(nums.begin(), nums.end(), target);</div><div class="line">    auto iter2 = upper_bound(nums.begin(), nums.end(), target);</div><div class="line"></div><div class="line">    if (iter1 == nums.end()) return&#123; -1, -1 &#125;;</div><div class="line"></div><div class="line">    if ((*iter1) != target) return&#123; -1, -1 &#125;;</div><div class="line">    vector&lt;int&gt; tmp(2, 0);</div><div class="line">    tmp[0] = iter1 - nums.begin();</div><div class="line"></div><div class="line">    --iter2;</div><div class="line">    tmp[1] = iter2 - nums.begin();</div><div class="line">    return tmp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-34-Search-for-a-Range&quot;&gt;&lt;a href=&quot;#LeetCode-34-Search-for-a-Range&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-34-Search-for-a-Range&quot;&gt;
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-32-Longest-Valid-Parentheses</title>
    <link href="http://yoursite.com/2018/01/12/%E5%88%B7%E9%A2%98/LeetCode-32-Longest-Valid-Parentheses/"/>
    <id>http://yoursite.com/2018/01/12/刷题/LeetCode-32-Longest-Valid-Parentheses/</id>
    <published>2018-01-12T09:28:31.000Z</published>
    <updated>2018-01-12T09:28:43.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-32-Longest-Valid-Parentheses"><a href="#LeetCode-32-Longest-Valid-Parentheses" class="headerlink" title="LeetCode-32-Longest-Valid-Parentheses"></a>LeetCode-32-Longest-Valid-Parentheses</h3><blockquote><p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.<br>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.<br>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p></blockquote><p>表示这是一道没有看懂题目的题，看到题目的难度是hard，但是自己的想法很简答，以为直接一个栈就可以了。。 too young啊</p><p>提交之后才知道，原来还要解决类似<code>()((()))</code>这类问题，所以这是一个动态规划的问题啊。<br>昨天看了一下动态规划，我们首先要构建D数组，如下所示的<code>vector longest</code>，负责存下当前第i个的长度。需要考虑的情况如下。<br>只有当s[i]为<code>)</code>时，才需要判断，如果它的左边是<code>(</code>或者<code>)</code>的情况。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int longestValidParentheses(string s) &#123;</div><div class="line">        if(s.length()&lt;=1)</div><div class="line">            return 0;</div><div class="line">        vector&lt;int &gt; longest(s.size(),0);</div><div class="line">        int curMax=0;</div><div class="line">        for(int i=1;i&lt;s.length();++i)&#123;</div><div class="line">            if(s[i]==&apos;)&apos;)&#123;</div><div class="line">                if(s[i-1]==&apos;(&apos;)&#123;</div><div class="line">                    longest[i]=(i-2&gt;=0?(longest[i-2]+2):2);</div><div class="line">                    curMax=curMax&gt;longest[i]?curMax:longest[i];</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    if(i-longest[i-1]-1&gt;=0&amp;&amp;s[i-longest[i-1]-1]==&apos;(&apos;)&#123;</div><div class="line">                        longest[i]=longest[i-1]+2+((i-longest[i-1]-2&gt;=0)?longest[i-longest[i-1]-2]:0);</div><div class="line">                        curMax=curMax&gt;longest[i]?curMax:longest[i];</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return curMax;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-32-Longest-Valid-Parentheses&quot;&gt;&lt;a href=&quot;#LeetCode-32-Longest-Valid-Parentheses&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-32-Longes
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-31-Next-Permutation</title>
    <link href="http://yoursite.com/2018/01/12/%E5%88%B7%E9%A2%98/LeetCode-31-Next-Permutation/"/>
    <id>http://yoursite.com/2018/01/12/刷题/LeetCode-31-Next-Permutation/</id>
    <published>2018-01-12T09:26:20.000Z</published>
    <updated>2018-01-12T09:28:10.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="LeetCode-31-Next-Permutation"><a href="#LeetCode-31-Next-Permutation" class="headerlink" title="LeetCode-31-Next-Permutation"></a>LeetCode-31-Next-Permutation</h3><blockquote><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.<br>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).<br>The replacement must be in-place, do not allocate extra memory.</p></blockquote><p>这个排序主要是有两种情况，一个是类似于<code>3 1 2</code>这样的情况，直接从后往前找到第一个<code>nums[i]&lt;nums[i-1]</code>的，然后把<code>i</code>记下来，再与后面第一个小于<code>i</code>的<code>k</code>调换顺序之后，对<code>i</code>后面的进行反转排序就好了。<br>另一种情况是：已经反转成功了，类似<code>3 2 1</code>，需要直接置为最开始的状态，处理方式是，依旧从后往前找<code>i</code>,如果没有找到的话，就可以直接将序列反转即可。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int k=-1;</div><div class="line">        for(int i=nums.size()-2;i&gt;=0;--i)&#123;</div><div class="line">            if(nums[i]&lt;nums[i+1])&#123;</div><div class="line">                k=i;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(k==-1)&#123;</div><div class="line">            reverse(nums.begin(),nums.end());</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        int l=0;</div><div class="line">        for(int i=nums.size()-1;i&gt;k;--i)&#123;</div><div class="line">            if(nums[i]&gt;nums[k])&#123;</div><div class="line">                l=i;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        swap(nums[l],nums[k]);</div><div class="line">        reverse(nums.begin()+k+1,nums.end());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;LeetCode-31-Next-Permutation&quot;&gt;&lt;a href=&quot;#LeetCode-31-Next-Permutation&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-31-Next-Permutation&quot;&gt;&lt;/a&gt;Le
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-19-Remove-Nth-Node-From-End-of-List</title>
    <link href="http://yoursite.com/2018/01/12/%E5%88%B7%E9%A2%98/LeetCode-19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://yoursite.com/2018/01/12/刷题/LeetCode-19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2018-01-12T09:25:23.000Z</published>
    <updated>2018-01-12T09:26:00.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given a linked list, remove the nth node from the end of list and return its head.<br>For example,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</div><div class="line"></div><div class="line">   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</div></pre></td></tr></table></figure></p></blockquote><p>这个题目之前在剑指offer上就有，记得当时的方法是：采用两个指针，首先判断n的大小是否比链表的长度要大，大的话直接返回。否则采用一前一后两个指针，两个指针相差n，当前面的指针到链表末尾时，后面的指针所在的位置就是要删除的位置了。</p><p>当然，这是个很好的方法，不过看了一下后面的答案，以及前天看到的一个有点不是很明白的一个答案，才知道大家都用的是二级指针，二级指针的好处是，可以直接记住链表的头节点，而不至于总是去判断。这样显得对指针的理解就不一样了。可以看看下面的这篇文章。</p><p><a href="http://blogread.cn/it/article/6243?f=wb" target="_blank" rel="external">Linus：利用二级指针删除单向链表</a></p><p>下面是代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</div><div class="line">        ListNode **t1=&amp;head,*t2=head; //这样head一直指向的是头节点</div><div class="line">        for(int i=0;i&lt;n;++i)&#123;</div><div class="line">            t2=t2-&gt;next;</div><div class="line">        &#125;</div><div class="line">        while(t2!=nullptr)&#123;</div><div class="line">            t1=&amp;((*t1)-&gt;next);</div><div class="line">            t2=t2-&gt;next;</div><div class="line">        &#125;</div><div class="line">        *t1=(*t1)-&gt;next; //删除找到的节点</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>无奈每次提交总是有群禽兽比我的快那么多啊，我的12ms，别人的6ms。。</p><p>不过别人的代码一看好像也还好，思路都是差不多的，就是一些细节的地方注意的比较好，看来还得好好弄啊。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</div><div class="line">        int counter = 0;</div><div class="line">        if(!head || !n) &#123;</div><div class="line">            return head;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        ListNode *p = head;</div><div class="line">        ListNode **pp = &amp;head;</div><div class="line">        while(p &amp;&amp; n) &#123;</div><div class="line">            p = p-&gt;next;</div><div class="line">            n--;</div><div class="line">        &#125;</div><div class="line">        while(p) &#123;</div><div class="line">            p = p-&gt;next;</div><div class="line">            pp = &amp;((*pp)-&gt;next);</div><div class="line">        &#125;</div><div class="line">        ListNode *temp = *pp;</div><div class="line">        *pp = temp-&gt;next;</div><div class="line">        delete(temp);</div><div class="line">        return head;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given a linked list, remove the nth node from the end of list and return its head.&lt;br&gt;For example,&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="刷题" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
