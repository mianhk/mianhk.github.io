[
  {
    "title": "无标题",
    "description": "UNIONUNION使用规则：UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔（因此，如果组合4条SELECT语句，将要使用3个UNION关键字）UNION中的每个查询必须包含相同的列、表达式或聚集函数列数据类型必须兼容：类型不必完全相同，但必须是DBMS可...",
    "created_at": "2019-05-08T01:36:53.000Z",
    "updated_at": "2019-05-08T08:08:43.000Z",
    "published_at": null,
    "format": "lake",
    "slug": "lf8gfx",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "一会就删的标题",
    "description": "title: MySQL学习总结2-表连接date: 2019-1-16 11:27:21categories: MySQLtags: [MySQL,学习]在关系型数据库里面，每个实体有自己的一张表，所有属性都是这张表的字段，表与表之间根据关联字段&quot;连接&quot;在一起。   什么...",
    "created_at": "2019-05-07T09:08:06.000Z",
    "updated_at": "2019-05-07T09:54:50.000Z",
    "published_at": "2019-05-07T09:54:50.000Z",
    "format": "lake",
    "slug": "kc2v6z",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "title: MySQL学习总结2-表连接<br />date: 2019-1-16 11:27:21<br />categories: MySQL<br />tags: [MySQL,学习]\n\n---\n\n> 在关系型数据库里面，每个实体有自己的一张表，所有属性都是这张表的字段，表与表之间根据关联字段\"连接\"在一起。   \n\n\n\n\n<a name=\"d7333afa\"></a>\n# 什么是连接\n\n**两张表根据关联字段，组合成一个数据集。当两张表的关联字段不匹配时，例如表A和表B，处理方式为：**\n\n- 只返回两张表匹配的记录，内连接（inner join）。\n- 返回匹配的记录，以及表 A 多余的记录，左连接（left join）。\n- 返回匹配的记录，以及表 B 多余的记录，右连接（right join）。\n- 返回匹配的记录，以及表 A 和表 B 各自的多余记录，全连接（full join）。\n\n这里看到了阮一峰老师的一个总结，引用了图片：<br />             ![](https://cdn.nlark.com/yuque/0/2019/jpeg/187932/1548247519305-bff75e42-9992-499e-9c1b-d75b9e56fe13.jpeg#align=left&display=inline&height=295&originHeight=295&originWidth=602&size=0&status=done&width=602)\n\n<a name=\"80bb3ed3\"></a>\n# 内连接（inner join）\n\n- MySQL默认的连接就是内连接，可以省略inner。\n- 有条件的内连接：\n\nwhere：数据过滤，理解上，数据交叉连接完成后再进行过滤。<br />on：在连接时，就对数据进行判断。<br />using：要求负责连接的两个实体之间的字段名称一致。<br />     在有同名字段时，使用using，通用条件时，使用on，在数据过滤时（不是连接的过滤）时，使用where。\n<a name=\"382f77cb\"></a>\n# 外连接（outer join）\n连接的数据不真实存在。意思是外连接的两个表，存在单个表中没有的数据。\n<a name=\"81255524\"></a>\n## 左连接（left join）\n在连接时，出现了左边表连接不到右边表的情况，则左边表的数据会被保留，而右边表的数据连接不到左表的情况，会被抛弃。\n<a name=\"92bb0331\"></a>\n## 右连接（right join）\n在连接时，出现了左边表连接不到右边表的情况，则数据会被抛弃，而右边表的数据连接不到左表的情况，会被保留。\n<a name=\"c078d866\"></a>\n## 全连接（full join）\n"
  },
  {
    "title": "语雀编写，自动部署博客",
    "description": "相关的坑总结：Postman的使用这个是怪自己http没有学好了，Get请求是加在Head上的，搞了半天，觉得不太会用。获取repo的ID，本来还看了官方的api，觉得就是这么回事，但还是搞了半天，直接在服务器上curl了一下，但总是各种返回不成功。Referrence:https://seg...",
    "created_at": "2019-05-07T07:33:41.000Z",
    "updated_at": "2019-05-07T09:46:58.000Z",
    "published_at": null,
    "format": "lake",
    "slug": "mwklk2",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "go语言学习-极客时间",
    "description": "title: go语言学习-极客时间date: 2019-05-07 11:25:46categories: Gotags: [Go,学习]第一个go程序go语言主函数没有返回值，需要使用os包， os.exit() ，也不能直接函数传参。变量、常量和其他语言的区别赋值可以自动类型推断： a:...",
    "created_at": "2019-04-28T13:34:33.000Z",
    "updated_at": "2019-05-07T09:07:41.000Z",
    "published_at": "2019-05-07T09:07:41.000Z",
    "format": "lake",
    "slug": "pkq8u1",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "title: go语言学习-极客时间<br />date: 2019-05-07 11:25:46<br />categories: Go<br />tags: [Go,学习]\n\n---\n\n<a name=\"GHSXx\"></a>\n# 第一个go程序\n\n- go语言主函数没有返回值，需要使用os包， `os.exit()` ，也不能直接函数传参。\n\n<a name=\"ZC31x\"></a>\n# 变量、常量和其他语言的区别\n\n- 赋值可以自动类型推断： `a:=1` ，怎么方便怎么来就行\n- 快速连续赋值\n\n```\nconst (\n\tMonday=itoa+1\n  Tuesday\n  Wednesday\n)\n\nconst(\n\tOpen=1<<itoa\n  Close\n  Pending\n)\n```\n\n\n<a name=\"0WEDs\"></a>\n# 运算符\n\n- 算数运算符：没有前置的++、--\n- 比较运算符：用 `==` 比较时，相同维数的数组可以比较\n- 逻辑运算符\n- 位运算符： `&^` ：按位清零\n\n```\n1 &^ 0 --1\n1&^ 1 --0\n0&^1 --0\n0&^0 --0\n```\n<a name=\"SEhok\"></a>\n# 条件和循环\n\n- 循环：只支持 `for` ，并且没有括号，while条件的写法为\n\n```go\nfor n<5{\n\tn++\n  fmt.Println(n)\n}\n```\n\n- 条件：条件一定要是个布尔值或表达式。支持在if语句中对变量赋值\n- switch条件：条件表达式不限制为常量或者整数；单个case中，可以出现多个结果选项，使用逗号分隔；不需要break；可以不设定switch之后的条件表达式\n<a name=\"gwMfp\"></a>\n# 数组和切片\n<a name=\"zr8tw\"></a>\n## 数组\n\n- 数组的声明：声明同时初始化：`arr3:=[...]int{1,3,4,5} `  \n-  数组的遍历\n- 数组截取：a[index_begin(包含),index_end(不包含)]\n<a name=\"49EoL\"></a>\n## 切片\n\n- 切片的声明方式：与数组的声明有点相似\n```go\nvar s0 []int\ns1:=[]int{}\ns2:=[]int{1,2,3}\ns2:=make([]int,2,4)  //([]type,len,cap)  len个元素会被初始化为零值，\n                       cap中其它未初始化的元素不能访问\n```\n\n\n- 切片的增长方式：类似于c++的vector。\n- 切片共享存储结构：切片截取后，计算cap得到的结果。其实切片截取，指向的是内部共享的切片存储空间。所以修改截取的切片的数据，其他截取的相同区域也会发生改变。这是一个容易出错的问题。\n<a name=\"1gHlK\"></a>\n## 切片和数组的区别\n\n- 容量是否可伸缩\n- 是否可以进行比较\n<a name=\"on0MB\"></a>\n# Map基础\n\n- Map声明方式\n\n```go\nm:=map[string]int{\"one\":1,\"two\":2,\"three\":3}\nm1:=map[string]int{}\nm1[\"one\"]=1\nm2:=make(map[string]int,10)  //10表示初始化的cap,不需要初始化len\n```\n\n- 元素访问：当访问的key不存在时，仍然会返回零值，编程时需要根据nil来判断元素是否存在\n<a name=\"hmFCq\"></a>\n# Map与工厂模式\n\n- Map的value可以是一个方法\n- 与Go的Dock type接口方式一起，可以方便的实现单一方法对象的工厂模式\n- Go内置集合中没有Set，可以通过map实现` mySet:=**map**[int]bool{} `   \n<a name=\"3XQVx\"></a>\n# 字符串\n\n- string是数据类型，不是引用或指针类型。零值不是空，而是空字符串。\n- string是只读的byte slice，不能重复赋值。len函数可以表示它所包含的byte数\n- string的byte数组可以存放任何数据\n<a name=\"aSMYD\"></a>\n## Unicode和UTF-8\n\n- Unicode是一种字符集（code point）\n- UTF-8是Unicode的存储实现（转换为）\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1556503870325-262231e2-8b69-42ab-8711-83d68d74069e.png#align=left&display=inline&height=270&name=image.png&originHeight=398&originWidth=671&size=46907&status=done&width=456)\n\n<a name=\"gy3wV\"></a>\n# Go语言的函数\n\n- 函数可以返回多个值\n- 所有参数都是值传递：slice，map，channel会有传引用的错觉\n- 函数可以作为变量的值\n- 函数可以作为参数和返回值\n\n<a name=\"5TwaL\"></a>\n# 可变参数及defer\n\n- 延迟执行函数：defer。类似于其他语言中的finally，主要作用是最后关闭一些资源或者关闭一些锁\n\n<a name=\"QNCoJ\"></a>\n# 行为的定义和实现\n\n<a name=\"8hlP5\"></a>\n## 封装数据和行为\n\n```go\ntype Employee struct{\n\tId string\n  Name string\n  Age int\n}\n实例的创建和初始化\ne:=Employee{\"0\",\"Bob\",20}\ne1:=Employee{Name:\"Mike\",Age:30}\ne2:=new(Employee)  //这里返回的是实例的指针\ne2.Id=\"2\"  //通过实例的指针访问指针不需要“->”\n```\n\n<a name=\"0w95L\"></a>\n## 行为（方法）定义\n\n```go\nfunc (e Employee)String1() string{\n\treturn fmt.Sprintf(\"ID:%s-Name:%s-Age:%d\",e.Id,e.Name,e.Age)\n}\n\n//推荐使用的方式，类似于c++的引用\nfunc (e *Employee)String() string{\n\treturn fmt.Sprintf(\"ID:%s-Name:%s-Age:%d\",e.Id,e.Name,e.Age)\n}\n```\n\n<a name=\"sTcmz\"></a>\n# Go语言的相关接口\n<a name=\"VSi4q\"></a>\n## Duck Type\n方法签名是一样的，就认为是这样的\n\n- 接口是非入侵性的，实现不依赖于接口定义\n- 接口的定义可以包含在接口使用者包内\n<a name=\"8FFfL\"></a>\n## 接口变量\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1556508509894-85f1967f-80e0-4a9e-9db7-a2b01ba96f30.png#align=left&display=inline&height=338&name=image.png&originHeight=338&originWidth=701&size=40266&status=done&width=701)\n\n\n<a name=\"cvQdN\"></a>\n## 自定义类型\n\n```go\ntype IntConv func (op int) int\n```\n\n<a name=\"70UD5\"></a>\n# 扩展与复用\n\n<a name=\"1sY91\"></a>\n# 不一样的接口类型，一样的多态\n\n<a name=\"j94PF\"></a>\n## 空接口与断言\n\n- 空接口可以表示任何类型\n- 通过断言来将空接口转换为制定类型 `v,ok:=p.(int) //ok=true时为转换成功` \n\n<a name=\"xDFda\"></a>\n## Go接口最佳实践\n\n- 倾向于使用小的接口定义，很多接口只包含一个方法。实现的负担较小。\n\n```go\nType Reader interface{\n\tRead(p []byte)(n int,err error)\n}\nType Writer interface{\n\tWrite(p []byte)(n int,err error)\n}\n```\n\n\n- 较大的接口定义，可以由多个小接口定义组合而成。\n\n```go\nType ReadWrite interface{\n\tReader\n  Writer\n}\n```\n\n- 只依赖于必要功能的最小接口，方法才能更多的被复用\n\n```go\nfunc StoreData(reader Reader) error{}\n```\n\n<a name=\"KwICQ\"></a>\n# 编写好的错误处理\n\n- 没有异常机制\n- error类型实现了error接口\n- 可以通过errors.New来快速创建错误实例\n<a name=\"ZeszK\"></a>\n# panic和recover\n<a name=\"W2cvc\"></a>\n## panic\n\n- panic用于不可恢复的错误\n- panic退出前会执行defer指定的内容\n<a name=\"hUDIy\"></a>\n## panic vs os.Exit\n\n- os.Exit退出时不会调用defer指定的函数\n- os.Exit退出时不会输出当前调用栈信息\n<a name=\"htxUf\"></a>\n## recover\n\n```\ndefer func(){\n\tif err:=recover();err!=nil{\n  \t//恢复错误\n  }\n}()\n```\n\n- 不要强制恢复错误，有的时候“Let it crash”可能更好，让程序重启来恢复。\n\n<a name=\"GXKen\"></a>\n# 构建可复用的模块（包）\n<a name=\"Ps2yh\"></a>\n## package\n\n- 基本复用模块单元：以**首字母大写**来表名可被包外代码访问\n- 代码在package可以和所在的目录了不一致（相对于Java而言）\n- 同一目录里的Go代码的package要保持一致\n<a name=\"32DTD\"></a>\n## init方法\n\n- 在main被执行前，所有依赖的package的init方法都会被执行\n- 不同包的init函数按照包导入的依赖关系决定执行顺序\n- 每个包可以有多个init函数\n- 包的每个源文件也可以有多个init函数，比较特殊\n<a name=\"CPKNr\"></a>\n## go get\n\n- 通过go get来获取远程依赖\n\n```\ngo get -u 强制从网络更新远程依赖\n```\n\n- 注意代码在Github上的组织形式，以适应go get：直接以代码路径开始，不要有src\n\n<a name=\"uCTgI\"></a>\n# 依赖管理\n<a name=\"na3Of\"></a>\n## Go未解决的依赖问题\n\n- 同一环境下，不同项目使用同一包的不同版本\n- 无法管理对包的特定版本的依赖\n<a name=\"X32MI\"></a>\n## vendor路径\nGo1.5 release版本，vendor目录被添加到除了GOPATH和GOROOT以外的依赖目录查找方案。查找依赖包路径的解决方案：\n\n1. 当前包下的vendor目录\n1. 向上级目录查找，直到找到src下的vendor目录\n1. 在GOPATH下面查找依赖包\n1. 在GOROOT目录下查找\n\n其他第三方依赖管理工具：godep，glide，**dep**<br />**\n<a name=\"L5ePp\"></a>\n# 协程机制\n<a name=\"Ph7TU\"></a>\n## 线程vs协程\n\n- 创建时默认的stack大小：JAVA 1M vs Goroutine 2K\n- 和KSE（Kernel Space Entity）：java Thread是1:1；GO M:N\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1556704202218-7913c997-6b91-48e2-9dc6-49b057a39342.png#align=left&display=inline&height=432&name=image.png&originHeight=432&originWidth=618&size=110172&status=done&width=618)\n\n\n<a name=\"30Cx3\"></a>\n# 共享内存并发机制\n<a name=\"OFEOj\"></a>\n## Lock\n<a name=\"OKldk\"></a>\n## WaitGroup\n相当于Java的join\n<a name=\"49kQI\"></a>\n# CSP并发机制\n<a name=\"58HdC\"></a>\n## CSP vs Actor\n\n- 和Actor的直接通讯不同，CSP模式是通过Channel进行通讯的，更松耦合一些\n- Go中Channel是有容量限制并且独立于处理Goroutine，而如Erlang，Actor模式中的mailbox容量是无限的，接收进程也总是被动地处理消息。\n<a name=\"xvZt3\"></a>\n## Channel\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1556705599268-5d3769a6-8c93-4827-a9c2-525810d0cc3a.png#align=left&display=inline&height=910&name=image.png&originHeight=910&originWidth=1703&size=565338&status=done&width=1703)<br />两种情况：一种是一直等待，一种Buffered Channel ，更松耦合的Channel，消息发送方可以在容量没满的时候一直放，满了之后需要等待。对于接收方来说，只要Channel内有消息就可以一直接收。\n\n<a name=\"2SBcu\"></a>\n# 多路选择和超时\n<a name=\"sLxEu\"></a>\n## select\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1556712290363-e32d5fa7-eb01-4d32-8fed-14ae04a0042d.png#align=left&display=inline&height=301&name=image.png&originHeight=301&originWidth=861&size=79632&status=done&width=861)<br />运行到select时，当任一个事件准备好了，就可以对应响应。当不想一直等待某事件时，可以进行超时控制。\n\n<a name=\"SkpQa\"></a>\n# channel的关闭和广播\n解决怎么知道channel数据完了的问题\n<a name=\"qC5Nf\"></a>\n## channel的关闭\n\n- 向关闭的channel发送数据，会导致panic\n- v,ok<-ch；ok为bool值，true表示正常接收，false表示通道关闭\n- 所有的channel接收者都会在channel关闭时，立即从阻塞等待中返回且上述ok值为false。这个广播机制常被利用，进行向多个订阅者发送信号，如：退出信号。\n\n<a name=\"BOlOq\"></a>\n# 任务的取消\n\n<a name=\"PIyuM\"></a>\n# Context与任务取消\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557062963366-c9338325-f390-4dce-ae1d-f0874f9612ba.png#align=left&display=inline&height=372&name=image.png&originHeight=298&originWidth=786&size=58395&status=done&width=982.4999853596094)\n\n<a name=\"444Se\"></a>\n## Context\n\n- 根Context：通过context.Background()创建\n- 子Context：context.WithCancel(parentContext)创建\n- ctx,cancel：context.WithCancel(context.Background())\n- 当前Context被取消时，基于他的子context也会被取消\n- 接收取消通知<-ctx.Done()\n\n还有一些其他的方法\n\n<a name=\"jDWbp\"></a>\n# 典型并发任务\n<a name=\"2KmYh\"></a>\n## 只运行一次（常见的并发任务）\n在常见的多任务环境下，只执行一次。单例模式（懒汉式，线程安全）\n\n```go\ntype Singleton struct {\n\n}\n\nvar singleInstance *Singleton\nvar once sync.Once\n\nfunc GetSingletonObj() *Singleton{\n\tonce.Do(func() {    //传入创建方法\n\t\tfmt.Println(\"Create Obj\")\n\t\tsingleInstance=new(Singleton)\n\t})\n\treturn singleInstance\n}\n\n```\n\n<a name=\"kGIsw\"></a>\n## 所需任意任务完成\n<a name=\"YYXIC\"></a>\n## 所有任务完成\n<a name=\"jgefL\"></a>\n## 对象池\n数据库连接，网络连接，经常将这些对象池化，避免重复创建。\n<a name=\"tAhWo\"></a>\n## sync.pool对象缓存\n从名字来看，像是go语言提供的池。其实是对象的缓存<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557066107461-3144bf63-f63c-4522-b25d-af4bd721daab.png#align=left&display=inline&height=517&name=image.png&originHeight=414&originWidth=846&size=118933&status=done&width=1057.4999842420223)\n\n- 如果私有对象不存在则保存为私有对象\n- 如果私有对象存在，就放入当前Processor子池的共享池中\n\n使用：<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557066277648-e57411da-71d5-4673-93bc-a82e0315284b.png#align=left&display=inline&height=341&name=image.png&originHeight=273&originWidth=497&size=37422&status=done&width=621.2499907426537)\n\n**sync.pool对象的生命周期---**sync.pool不能作为对象池的原因\n\n- GC会清除sync.pool缓存的对象\n- sync.pool对象的缓存有效期为下一次GC之前\n\n总结：\n\n- 适合于通过复用，降低复杂对象的创建和GC代价\n- 协程安全，会有锁的开销\n- 声明周期受GC影响，不适合于做连接池等，需自己管理生命周期资源的池化\n- 所以具体要看锁的开销大，还是初始化的开销大\n\n<a name=\"UbsS7\"></a>\n# 测试\n<a name=\"FECf9\"></a>\n## 单元测试\n表格测试\n<a name=\"cOhz8\"></a>\n### 内置单元测试框架\n\n- Fail，Error：该测试失败，该测试继续，其他测试继续执行\n- FailNow，Fatal：该测试失败，该测试中止，其他测试继续执行\n\n代码覆盖率\n<a name=\"Z0rO4\"></a>\n## Benchmark\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557067837101-3bdadb6b-821f-4dbd-9b3a-c9efe304bc7a.png#align=left&display=inline&height=491&name=image.png&originHeight=393&originWidth=679&size=77590&status=done&width=848.7499873526397)<br />以Benchmark开头，参数类型稍有不同。<br />通过ResetTimer和StopTimer将测试代码隔开\n\n命令行下运行：\n\n\n<a name=\"o10fu\"></a>\n## BBD\nBehavior Driven Development<br />常用框架：goconvey\n\n<a name=\"1pJFI\"></a>\n## 反射编程\n\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557107233067-f50d5086-e384-46cc-bd5e-0a2446ec3d8f.png#align=left&display=inline&height=390&name=image.png&originHeight=312&originWidth=820&size=64732&status=done&width=1024.99998472631)\n\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557107389241-fb6b5237-7e73-48e9-83a9-e6c6ae45f6aa.png#align=left&display=inline&height=356&name=image.png&originHeight=285&originWidth=755&size=35453&status=done&width=943.7499859370294)\n\n\n\n\n<a name=\"yvkPS\"></a>\n## 万能程序\nDeepEqual<br />比较切片和map<br />与配置相关的，要求灵活性和复用性时，可以<br />反射的\n\n<a name=\"KEsq1\"></a>\n## 不安全编程\nunsafe，一般涉及到库的交互，与c语言交互。<br />“不安全”行为危险性：Go语言中不支持强制类型转换。下列操作看似可以，实际不能转换，而且实际使用起来很危险。\n\n```\ni:=10\nf:=*(*floa64)(unsafe.Pointer(&i))\n```\n\n场景2：用到内置的Atomic操作，指针原子操作，并发读写\n\n<a name=\"KmB4n\"></a>\n# 架构模式\n<a name=\"dsFK1\"></a>\n## Pipe-Filter架构\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557108759332-46d3b8e2-5573-419b-80b6-63cfbf5feaa1.png#align=left&display=inline&height=510&name=image.png&originHeight=408&originWidth=782&size=86362&status=done&width=977.4999854341152)\n\n- 非常适合与数据处理及数据分析系统![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557108843135-278143cd-9e6a-4b4f-ae49-b800e98a261c.png#align=left&display=inline&height=474&name=image.png&originHeight=379&originWidth=690&size=86777&status=done&width=862.4999871477487)\n<a name=\"UVtCE\"></a>\n## micro kernel\n特点：易于拓展，错误隔离，保持架构一致性<br />要点：\n\n- 内核包含公共流程或通用逻辑\n- 将可变成或可扩展部分规划为扩展点\n- 抽象扩展点行为，定义接口\n- 利用插件进行扩展\n\n生产过程任务的开发\n<a name=\"N5rRp\"></a>\n## 内置json解析\n远程过程调用等过程中，会用json，以及在配置文件中，很多使用json\n\n\n<a name=\"RFIdh\"></a>\n## easyjson\ngo内置的，一般适用于配置文件解析，对于qps较高，运用了反射，效率较低。尽量使用高性能的json解析\n\n<a name=\"wincH\"></a>\n## HTTP服务\n![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557111353880-2f261975-45c5-4dcd-9281-44ac48f2fbcb.png#align=left&display=inline&height=442&name=image.png&originHeight=354&originWidth=862&size=103367&status=done&width=1077.499983943999)<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/187932/1557111366213-f5138ca3-fd5f-4da1-992a-f68e1681d3ff.png#align=left&display=inline&height=445&name=image.png&originHeight=356&originWidth=771&size=101595&status=done&width=963.7499856390061)\n\n\n<a name=\"s0G6x\"></a>\n## 构建Restful服务\n更好的router，httprouter<br />面向资源的架构（Resource Oriented Architecture）\n\n<a name=\"TpHAz\"></a>\n## 性能分析工具\n\n\n\n\n\n\n学习函数式编程：《计算机程序的构造和解释》functional programming<br />《Restful Web Service》<br />《Go程序设计语言》<br />《面向模式的软件架构》1,2,3本\n"
  },
  {
    "title": "MySQL相关概念总结",
    "description": "title: MySQL相关概念总结date: 2019-1-20 11:27:21categories: MySQLtags: [MySQL,学习]三大范式第一范式（1NF）：无重复的列。要求：表所有的属性不可再分。如果不符合第一范式，则不符合关系模型的定义。第二范式（2NF）：属性完全依赖...",
    "created_at": "2019-01-25T01:56:46.000Z",
    "updated_at": "2019-01-25T03:11:19.000Z",
    "published_at": "2019-01-25T03:11:19.000Z",
    "format": "lake",
    "slug": "xxehz0",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "\ntitle: MySQL相关概念总结<br />date: 2019-1-20 11:27:21<br />categories: MySQL<br />tags: [MySQL,学习]\n\n---\n\n<a name=\"a3cad0da\"></a>\n# 三大范式\n**第一范式（1NF）：**无重复的列。<br />要求：表所有的属性不可再分。<br />如果不符合第一范式，则不符合关系模型的定义。<br />**第二范式（2NF）：**属性完全依赖于主键 [ 消除部分子函数依赖 ]。<br />要求：在满足1NF前提，每一行能够唯一标识，不存在非主键字段。<br />常用方法可以增加一个单字段的主键。<br />**第三范式（3NF）**：属性不依赖于其它非主属性 [ 消除传递依赖 ]。<br />要求：在满足2NF前提，不出现类似于A->B->C的情况，这样的传递依赖可以分为两个表，分别保存。\n\n通用的原则：\n\n- 每个实体都有一个表。\n- 为每一个关系（二维表）增加一个逻辑主键作为标识。\n- 出现二维表对应的关系，采用1:1, 1:N, M:n的形式将关联关系设计。\n\n\n<a name=\"a3fb37fb\"></a>\n# MySQL日志类型\n**错误日志**：记录启动、运行或停止mysqld时出现的问题<br />**查询日志**：记录建立的客户端连接和执行的所有语句（包括错误的）<br />**二进制日志**：记录所有更改数据的语句、还用于主从复制<br />**慢日志**：记录所有执行时间超过long_query_time秒的所有查询\n\n<a name=\"b271e427\"></a>\n# 索引\n索引：对数据库表中一或多个列的值进行排序的结构，是帮助MySQL高效获取数据的数据结构，可以 加快检索表中的数据，而不必扫描整个数据库。<br />缺点是：需要占用额外的空间，并且需要定期维护，每条记录的INSERT,DELETE,UPDATE操作可能付出更多的磁盘IO。同时不必要的索引反而会使查询速度变慢。<br />索引查询的适用的情况：基于一个范围的检索，一般查询返回结果集小于表中记录数的30%。基于非唯一性索引的检索。<br />数据库几个基本的索引类型：普通索引、唯一索引、主键索引、全文索引\n\n<a name=\"9f82401d\"></a>\n# 事务\n事务：并发控制的基本单位，是一个操作序列，这些操作要么都执行，要么都不执行，是一个不可分割的工作单位。\n\n<a name=\"eea69b18\"></a>\n## 事务的隔离级别\n分为四个级别：  <br />未提交读:允许脏读，可能读到其他会话没有提交的数据。<br />已提交读:只能读到已经提交的数据。ORACAL等多数数据库的默认隔离级别。   <br />可重复读:可重复读，同一事务内的查询都是和事务开始时一致的，Innodb的默认隔离级别。  <br />串行读：完全串行化的读，每次读都需要获得表级共享锁，读写相互会阻塞。<br />  <br />对应：脏读、不可重复读、幻读情况为：<br />脏读：当一个事务正在访问数据，并且对数据进行了修改，这个修改还没提交到数据库。另一个事务也访问这个数据，使用了这个数据。  <br />不可重复读：一个事务内，多次读同一数据。这个事务还没结束时，另一个事务也访问这个数据，导致第一个事务两次访问的数据不一样。  <br />幻读：第一个事务对表中的每一行数据进行了修改，同时第二个事务也访问这个表中的数据，这种修改是向表中插入而来一行数据，那么以后就会发生操作第一个事物的用户表中发现表中还有没修改的数据行，像是产生了幻觉。<br />[MySQL 四种事务隔离级的说明](https://www.cnblogs.com/zhoujinyi/p/3437475.html)\n\n<a name=\"cc200018\"></a>\n# DROP、DELETE与TRUNCATE\nDROP：不仅删除表的数据，还删除表的结构。<br />DELETE和TRUNCATE只删除表的数据不删除表的结构。<br />删除速度：DROP> DELETE>TRUNCATE<br />适用场景：当不需要一张表的时候，适用DROP；删除部分数据行的时候，用DELETE，并且使用where子句；保留表而删除所有数据的时候用TRUNCATE。\n\n<a name=\"3f113298\"></a>\n# 存储引擎\nMySQL目前用的比较多的两种，是Innodb和Myisam\n\n<br />"
  },
  {
    "title": "MySQL学习总结2-表连接",
    "description": "title: MySQL学习总结2-表连接date: 2019-1-16 11:27:21categories: MySQLtags: [MySQL,学习]在关系型数据库里面，每个实体有自己的一张表，所有属性都是这张表的字段，表与表之间根据关联字段&quot;连接&quot;在一起。   什么...",
    "created_at": "2019-01-23T12:23:55.000Z",
    "updated_at": "2019-05-07T09:08:05.000Z",
    "published_at": "2019-05-07T07:28:17.000Z",
    "format": "lake",
    "slug": "vguflv",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "\ntitle: MySQL学习总结2-表连接<br />date: 2019-1-16 11:27:21<br />categories: MySQL<br />tags: [MySQL,学习]\n\n---\n\n> 在关系型数据库里面，每个实体有自己的一张表，所有属性都是这张表的字段，表与表之间根据关联字段\"连接\"在一起。   \n\n\n\n\n<a name=\"d7333afa\"></a>\n# 什么是连接\n\n**两张表根据关联字段，组合成一个数据集。当两张表的关联字段不匹配时，例如表A和表B，处理方式为：**\n\n- 只返回两张表匹配的记录，内连接（inner join）。\n- 返回匹配的记录，以及表 A 多余的记录，左连接（left join）。\n- 返回匹配的记录，以及表 B 多余的记录，右连接（right join）。\n- 返回匹配的记录，以及表 A 和表 B 各自的多余记录，全连接（full join）。\n\n这里看到了阮一峰老师的一个总结，引用了图片：<br />             ![](https://cdn.nlark.com/yuque/0/2019/jpeg/187932/1548247519305-bff75e42-9992-499e-9c1b-d75b9e56fe13.jpeg#align=left&display=inline&height=295&originHeight=295&originWidth=602&size=0&status=done&width=602)\n\n<a name=\"80bb3ed3\"></a>\n# 内连接（inner join）\n\n- MySQL默认的连接就是内连接，可以省略inner。\n- 有条件的内连接：\n\nwhere：数据过滤，理解上，数据交叉连接完成后再进行过滤。<br />on：在连接时，就对数据进行判断。<br />using：要求负责连接的两个实体之间的字段名称一致。<br />     在有同名字段时，使用using，通用条件时，使用on，在数据过滤时（不是连接的过滤）时，使用where。\n<a name=\"382f77cb\"></a>\n# 外连接（outer join）\n连接的数据不真实存在。意思是外连接的两个表，存在单个表中没有的数据。\n<a name=\"81255524\"></a>\n## 左连接（left join）\n在连接时，出现了左边表连接不到右边表的情况，则左边表的数据会被保留，而右边表的数据连接不到左表的情况，会被抛弃。\n<a name=\"92bb0331\"></a>\n## 右连接（right join）\n在连接时，出现了左边表连接不到右边表的情况，则数据会被抛弃，而右边表的数据连接不到左表的情况，会被保留。\n<a name=\"c078d866\"></a>\n## 全连接（full join）\n"
  },
  {
    "title": "MySQL学习总结1-基础",
    "description": "title: MySQL学习总结1-基础date: 2019-1-7 11:27:21categories: MySQLtags: [MySQL,学习]数据库和SQLSQL(Structured Query Language)：结构化查询语言。包括DDL（Data Definition Lan...",
    "created_at": "2019-01-14T13:18:27.000Z",
    "updated_at": "2019-01-25T03:11:21.000Z",
    "published_at": "2019-01-25T03:11:21.000Z",
    "format": "lake",
    "slug": "olb7zi",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "\ntitle: MySQL学习总结1-基础<br />date: 2019-1-7 11:27:21<br />categories: MySQL<br />tags: [MySQL,学习]\n\n---\n\n<a name=\"2599e25c\"></a>\n# 数据库和SQL\n\nSQL(Structured\nQuery Language)：结构化查询语言。包括DDL（Data Definition Language数据定义语言）、DML（Data Management Language数据管理语言）、DCL（Data Control Language数据库控制语言）。其中DML包括：DQL（Data Query Language数据查询语言）和DML（Data Management Language数据管理语言），一般来说，数据查询和管理都称为数据管理语言。  <br />   \n<a name=\"04ee1961\"></a>\n# [安装]()\n<a name=\"0796ba76\"></a>\n# 基础\n<a name=\"DML\"></a>\n## DML\n<a name=\"1475e8cb\"></a>\n### 数据库操作\n```sql\n# 数据库创建\nCREATE database db_name;   # 创建数据库\nCREATE database db_name if not exits;  \n\n# 数据库查询\nSHOW databases;   # 查看当前存在的数据库\nSHOW CREATE DATABASE db_name;  # 查看数据库创建的语言，显示结果为\n\n# 选择数据库\nUSE database;  # 操作表时会使用默认的数据库，所以需要先使用USE表示使用的是哪一个数据库\n\n# 查看数据库中表\nSHOW TABLES [like 'pattern_%']; # 可以使用通配符匹配\n\n# 数据库删除\nDROP database db_name;   #还有其他的两种，记得区分结果\n\n# 数据库修改\nALTER database db_name;  \n\n# 数据库权限修改\nGRANT ALL ON db_name.* TO 'your_mysql_name'@'your_client_host'; # \n```\n\n<a name=\"a91cd0c0\"></a>\n### 表操作\n\n```sql\n# 表创建\nCREATE TABLE tbl_name (列结构)[表选项]\nCREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20), \n                   species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);\n\n\n\n\n\n# 从外部导入数据到表\nLOAD DATA LOCAL INFILE '/path/pet.txt' INTO TABLE pet\n       LINES TERMINATED BY '\\r\\n';  # 从本地导入，分隔符为\"\\r\\n\"\n\n# 插入数据到表\nINSERT INTO pet\n       VALUES ('Puffball','Diane','hamster','f','1999-03-30',NULL); # 如果设置了NOT NULL，则需要\n       在插入数据的时候该项有值\n \n # 修改列定义\n ALTER TABLE tbl_name[ADD|DROP|CHANGE|MODIFY] #添加|删除|重命名|修改\n \n # 修改表选项\n ALTER TABLE tbl_name 新的表选型\n ALTER TABLE pet CHARACTER SET UTF8;\n```\n\n<a name=\"5246d2c8\"></a>\n### 数据操作\n\n```sql\n# 创建数据\nINSERT INTO tbl_name (field_list) VALUES (values); #\n# 获取数据\nSELECT field_list FROM tbl_name conditions;\nSELECT field_list FROM tbl_name WHERE conditions LIKE 'a%'; # %为通配符\nSELECT field_list FROM tbl_name WHERE REGEXP_LIKE(field_name,regex); # 使用正则表达式匹配\n# 删除数据\nDELETE FROM tbl_name conditions;\n# 修改数据\nUPDATE tbl_name SET field=new_value, conditions;\n```\n\n<a name=\"f7513baf\"></a>\n## Mysql数据类型\n<a name=\"069eee27\"></a>\n### 整型:默认有符号，无符号要指定unsigned\nTINYINT:1字节 无符号：-128---127  有符号： 0---255<br />SMALLINT:2字节 无符号：-32768---32767 有符号：0-65536<br />MEDIUMINT：3字节<br />INT：4字节<br />BIGINT:8字节<br />可以听过类似INT(2)表示显示的宽度，显示宽度不影响数值的范围，只是为了表示\n\n<a name=\"a0a0a581\"></a>\n### 小数\n**浮点数： ** 可以通过**TYPE(M,D)**控制数值位数，M为所有的数值位数，D为小数位数<br />float：单精度浮点数，默认精度位数为6左右<br />double：双精度浮点数，默认精度16左右<br />** 定点数： DECIMAL(M,D) **同样的M为所有的数值位数，D为小数位数，M默认为10，D默认为0\n\n<a name=\"11fea612\"></a>\n### 日期和时间\n\n| DATATIME | 8 | YYYY-MM-DD HH:MM:SS |  |\n| :---: | :---: | :---: | :---: |\n| TIMESTAMP | 4 | YYYY-MM-DD HH:MM:SS  | 从1970年开始 |\n| DATE | 3 | YYYY-MM-DD |  |\n| TIME | 3 | HH:MM:SS |  |\n| YEAR | 1 | YYYY | 范围为1901-2155 |\n\n<a name=\"cc4dd1da\"></a>\n### 字符串\n**CHAR(M) :**表示固定长度。M表示允许的字符串长度,限制了字符串的长度<br />**VARCHAR(M): **可变长度 。M表示允许的最大长度，在内存中表示，需要多一个字节保存字符串的总长度，因此如果有时候不是很需要改变长度的话，尽量用固定长度的CHAR\n\n<a name=\"20d99b02\"></a>\n## 列属性\n<a name=\"475cdfca\"></a>\n### 主键\n可以唯一标识某条记录的字段或字段的集合。通常的做法是，设计每个表存在一个可以唯一标识的主键字段，最好利用与实体信息不相关的属性，作为唯一标识，与业务逻辑不发生关系，只用来记录标识，例如ID。<br />设置方式：在字段上设置或者定义完字段后再定义\n```sql\n# 在字段上设置\nCREATE TABLE pet (\n  id INT PRIMARY KEY,NAME VARCHAR (5));\n# 定义完字段后再设置\nCREATE TABLE pet1 (\n\tid INT,NAME VARCHAR (5),PRIMARY KEY (id));\n```\n\n<a name=\"32f9b134\"></a>\n### 自动增长\n为每条记录提供唯一的标识，每次插入记录时，某个字段的值都自动加1，使用auto_increment标识。要求需要整型和索引。在插入数据的时候，可以选择插入null也可以不插入。  <br />自动增长的初始值默认是1，也可以通过 auto_increment n 重新设置从n开始增长。<br />也可以手动插入自动增长的值，但是如果是主键的话，不能重复。\n<a name=\"1bbbb204\"></a>\n# 注意事项\n\n- 数据库语言关键字一般用大写，虽然大小写都可以，但是为了区分。\n- 数据库名的大小写取决于系统，所以操作的时候尽量有自己的规范，进行大小写区分。\n- NULL是区别于0或者' '的\n"
  },
  {
    "title": "git同步含有git的文件夹及问题解决",
    "description": "title: git同步含有git的文件夹及问题解决date: 2018-12-29 11:27:21tags: [git]categories: 工具同步含有git的文件夹真的有点烦，由于没有注意同步结果，只是一直在看travis构建结果，结果半天没有发现问题，后来发现了也不知道怎么解决，看...",
    "created_at": "2018-12-29T03:14:29.000Z",
    "updated_at": "2019-01-25T03:05:16.000Z",
    "published_at": "2019-01-25T03:05:16.000Z",
    "format": "asl",
    "slug": "ropym1",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "\ntitle: git同步含有git的文件夹及问题解决<br />date: 2018-12-29 11:27:21<br />tags: [git]<br />categories: 工具\n\n---\n同步含有git的文件夹真的有点烦，由于没有注意同步结果，只是一直在看travis构建结果，结果半天没有发现问题，后来发现了也不知道怎么解决，看远程仓库的代码是一个关联的文件夹形式，表示这是一个git的文件夹，但是点不开，本地的也没有上传。  <br /><!--more-->\n\n<a name=\"hqeqeb\"></a>\n# [](#hqeqeb)首先删除.git文件\n<a name=\"ot75aa\"></a>\n# [](#ot75aa)删除git缓存\n```bash\ngit rm --cached directory\ngit add directory\n```\n详细见[Stack Overflow](https://stackoverflow.com/questions/24472596/git-fatal-pathspec-is-in-submodule) 的解释，当然是要首先把文件夹删掉，然后重新add。  \n<a name=\"7ntczy\"></a>\n# [](#7ntczy)小总结\n已经不是第一次出现这种问题了，但是上次依然没有发现，还是记录一下吧。\n\n"
  },
  {
    "title": "我的博客模板",
    "description": "title:  CentOS7安装并使用MySQLdate: 2018-12-9 21:57:59update: 2018-12-9 21:57:59categories: MySQLtags: [MySQL,学习]\rMySQL在CentOS上的安装和使用  &lt;!--more--&gt;",
    "created_at": "2018-12-24T13:10:06.000Z",
    "updated_at": "2018-12-24T13:10:18.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "gezny7",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "无标题",
    "description": "",
    "created_at": "2018-12-24T12:55:59.000Z",
    "updated_at": "2018-12-24T12:55:59.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "mkc05u",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "2018年终总结",
    "description": "categories: lifetags: [生活,总结]\r2018年总结。  &lt;!--more--&gt;  2018已经到了尾声了，还从来没好好总结一年，该养成及时总结反思的习惯。  学习找工作相关的内容：编程语言C++/Python/Shell脚本等，计算机网络、数据库、操作系统、...",
    "created_at": "2018-12-16T11:02:22.000Z",
    "updated_at": "2018-12-26T08:11:46.000Z",
    "published_at": "2018-12-26T08:11:46.000Z",
    "format": "asl",
    "slug": "ws11rq",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "categories: life<br />tags: [生活,总结]\r\n\n---\n> 2018年总结。  \n\n\n<!--more-->  \n> 2018已经到了尾声了，还从来没好好总结一年，该养成及时总结反思的习惯。  \n\n\n<a name=\"lghdzp\"></a>\n# [](#lghdzp)学习\n\n- 找工作相关的内容：编程语言C++/Python/Shell脚本等，计算机网络、数据库、操作系统、服务器Nginx都有了一定的学习和总结，但是还是理论的较多一些，实践倒是有，但是还远远不够。\n\n- 跟着github上写了个C++的web服务器，不过还是有很多不明白，只是面试的时候能讲一讲。\n\n- 另外找完工作后，开始要学习Go语言，还有数据库的基础，其实总觉得数据库自己掌握的还是很少，而且以后就是DBA了，更要把基础打劳一点。\n\n\n<a name=\"l5cvuw\"></a>\n# [](#l5cvuw)工作\n首先今年最重要的就是找工作了，说实话，找工作的策略并不是很好，但是也是跟自己的复习有关系吧，对于数据结构和算法，看了很多，自己也刷了很多题，但是一些复杂的算法，以及广度还是不够，所以在面试的时候遇到难点的算法题就很虚。另外就是找工作的策略上，海投的时候投了很多，以至于找工作的很多的精力都花在了不想去的公司上，而好几个大公司都没有准备好。  <br />  <br />拿到的Offer还是很乱的，国企、研究所、互联网基本上都有。总结下Offer有：  <br />国企银行：银联、招银网络  <br />研究所：航天804、中电20所、中电54所、中船重工701  <br />互联网：老虎证券、竞技世界、vipkid、好未来、新思科技、oppo、海康威视、大华、小米等  <br />最后看其实找到的工作也不是很好，其实也有个原因是小米很早给了意向就不是很想找了，很多面试都没去。策略有些问题，不过最后的结果也还不错，能回武汉工作。当然找工作的过程其实也有很大的收获，不只是技术上的，还有心理上的。  <br />   <br />关于实验室的工作，就还是那样，感觉自己的态度有一些问题，就是太不重视了，总是以老板为驱动，总想着自己以后也不从事这方面，就比较不在意，这样就有些问题。  \n\n<a name=\"n3x4yo\"></a>\n# [](#n3x4yo)生活\n关于身体健康。减肥这个事情，说了很多遍，也有的时候能坚持，但是还是一直保重的状态。而且年底马上就要去当伴郎了，作为伴郎里最胖的一个，压力很大呀。今年看来希望渺茫了，把flag留给明年吧。  <br />    <br />关于读书。最近也都很久没看了。今年除了找工作看的一些专业书外，别的都看的很少了，需要加强呀。  <br />   <br />关于感情。跟亲爱的在一起了，到今天也已经300天了，时间过得很快，异地恋其实在一起的时间也不是很多，刚刚到一个月，但是互相很能为对方着想，有问题积极解决，保持几乎每天都开视频。不过关于两人的相处，还有很多需要慢慢改进。也剩明年半年的异地了，期待明年。  <br />   <br />关于家人朋友。爷爷今年去世了，享年85岁。小时候爸妈不在家，基本上爷爷奶奶从小把我带大，远在西安的我没能看到最后一面，虽然知道这一天总是会来，但是觉得太快了，以后再也没有过年在家吃饭的时候还叫上我一起陪着喝个白酒的了，喝了酒又开始讲自己小时候躲日本鬼子，年轻的时候修长江大桥了，讲以前穷日子的时候了。。你总是在长大，只是时间让你感觉长大的方式不再那么温柔了。\n\n<a name=\"97pbzi\"></a>\n# [](#97pbzi)流水\n\n- 2.24 开始跟亲爱的在一起\n\n- 3月，开始准备miniweb\n\n- 4月，参加华为的比赛，但是没有进64  \n\n- 7月，爷爷\n\n- 8-9月，找工作\n\n\n<a name=\"fuxcyt\"></a>\n# [](#fuxcyt)总结\n总之，关于2018年，是失去也是收获的一年，但是不管怎么样，那都是这一年的自己，也需要更好的总结来让新的一年变得更好。  \n\n- 保持专注和思考。一直觉得认真是自己的优势之一，但是今年却感觉做很多事情的时候，不是很能专注，做事的效率不是很高了。另一个是抓住重点，时间有限，尽量做更有价值的事情，把时间看做重要的成本。这永远是核心竞争力的保证。   \n\n- 学会沟通。通过谈恋爱，以前觉得自己是一个很爱说话的人，很喜欢开玩笑的人，但现在发现自己不是一个很会沟通的人。现在发现这两个还是有区别的，笑的再好，不会沟通，问题还在那，只不过暂时忘了而已。  \n\n- 学会自律。自律才能自由，用自己的想法约束自己的行为，这才是更高程度的自由，而不是想吃就吃，想玩就玩。  \n\n- 提高自己。身体上，精神上。看书和锻炼，\n\n\n<a name=\"1gvqgu\"></a>\n# [](#1gvqgu)2019计划\n一年之计在于春，先提前订点小目标吧。等年底了再来看。  \n\n- 看50本书，包括专业书和业余书。专业书主要是接下来工作需要的，数据库和Go语言方面。业余书主要关注历史和经济。  \n\n- 锻炼身体。把肚子减下去，要在130一下了吧，咳咳。  \n\n\n"
  },
  {
    "title": "信息爆炸时代的自我约束",
    "description": "",
    "created_at": "2018-12-12T11:52:52.000Z",
    "updated_at": "2018-12-12T12:08:46.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "nb89bz",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "CentOS7安装并使用MySQL",
    "description": "title:  CentOS7安装并使用MySQLdate: 2018-12-9 21:57:59update: 2018-12-9 21:57:59categories: MySQLtags: [MySQL,学习]\rMySQL在CentOS上的安装和使用  &lt;!--more--&gt;...",
    "created_at": "2018-12-07T09:41:58.000Z",
    "updated_at": "2018-12-26T02:36:07.000Z",
    "published_at": "2018-12-23T12:01:24.000Z",
    "format": "asl",
    "slug": "afzlb7",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "title:  CentOS7安装并使用MySQL<br />date: 2018-12-9 21:57:59<br />update: 2018-12-9 21:57:59<br />categories: MySQL<br />tags: [MySQL,学习]\r\n\n---\n> MySQL在CentOS上的安装和使用  \n\n\n<!--more-->  \n<a name=\"nvr1gq\"></a>\n# [](#nvr1gq)yum安装\n1.首先找到官网yum的地址：[https://dev.mysql.com/downloads/repo/yum/](https://dev.mysql.com/downloads/repo/yum/)，找到redhat的版本 ``` **Red Hat Enterprise Linux 7 / Oracle Linux 7 (Architecture Independent), RPM Package **`,并复制download的地址，然后下载下来：\n```bash\nwget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm\n```\n\n2.进行rpm解包并安装mysql-server\n```bash\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum update\nyum install mysql-server\n```\n3.修改权限\n```bash\nchown mysql:mysql -R /var/lib/mysql\n```\n4.然后就可以启动mysql了。。\n```bash\nsystemctl start mysqld\n```\n\n<a name=\"1qgpbs\"></a>\n# [](#1qgpbs)遇到的问题记录\n当然，看着上面好像很爽，很快的样子，但是没想到接下来坑还是很多的。都有点怀疑自己了，到现在装个mysql还这么多问题。关键是，网上的解决办法，都是什么乱七八糟的。 \n<a name=\"117oeg\"></a>\n## [](#117oeg)1.状态查看-灰色\n```powershell\n➜  ~ systemctl status mysqld\n● mysqld.service - MySQL Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: inactive (dead)\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n\n➜  ~ ps ajx | grep mysql\n 1768  1784  1784  1784 ?           -1 Ssl    999   0:19 mysqld\n```\n1.看了一下版本号，没错是8.0：\n```bash\n➜  ~ mysqladmin --version\nmysqladmin  Ver 8.0.13 for Linux on x86_64 (MySQL Community Server - GPL)\n```\n2.然后mysql连一波，出问题，连不上：\n```bash\n➜  ~ mysql\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)\n```\n看样子是没有这个socket，应该是位置不对，于是`sudo find / -name mysql.sock `赶紧搜一下，什么都没有，没有办法，重启一下试试吧。<br />3.重启\n```bash\n➜  ~ sudo systemctl restart mysqld\nJob for mysqld.service failed because the control process exited with error code. See \"systemctl status mysqld.service\" and \"journalctl -xe\" for details.\n```\n不行，换种方式重启看看：\n```bash\n➜  ~ service mysqld start\nRedirecting to /bin/systemctl start mysqld.service\n==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===\nAuthentication is required to manage system services or units.\nAuthenticating as: root\nPassword: \npolkit-agent-helper-1: pam_authenticate failed: Authentication failure\n==== AUTHENTICATION FAILED ===\nFailed to start mysqld.service: Access denied\nSee system logs and 'systemctl status mysqld.service' for details.\n```\n\n<a name=\"5wg9re\"></a>\n## [](#5wg9re)2.错误：ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)\n这个错误网上找了一下，有看起来还可以的处理:[http://blog.51cto.com/pengjc/1861088](http://blog.51cto.com/pengjc/1861088) 。但是实际上我打开都没有这个文件，搜也没有搜到，于是放弃，这个问题应该不算个问题，先放着解决别的。  \n<a name=\"e6syft\"></a>\n## [](#e6syft)3.错误：Job for mysqld.service failed because the control process exited with error code. See \"systemctl status mysqld.service\" and \"journalctl -xe\" for details.\n看了一下网上的解决办法，说是由于权限的问题：[https://www.cnblogs.com/ivictor/p/5146247.html](https://www.cnblogs.com/ivictor/p/5146247.html) ，通过命令`chown mysql.mysql /var/run/mysqld/`，但是问题还是没有解决。  <br />看了一下[stackoverflow](https://stackoverflow.com/questions/42317139/job-for-mysqld-service-failed-see-systemctl-status-mysqld-service)上面的说法，先通过`tail -f /var/log/mysqld.log`查看一下,，但是我的这个问题不是因为没有权限，\n```bash\n➜  ~  tail /var/log/mysqld.log\n2018-12-07T09:13:21.651467Z 0 [ERROR] [MY-010119] [Server] Aborting\n2018-12-07T09:13:21.655750Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.0.13)  MySQL Community Server - GPL.\n2018-12-07T09:15:40.466437Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.13) starting as process 12759\n2018-12-07T09:15:40.965670Z 0 [ERROR] [MY-012681] [InnoDB] mmap(137428992 bytes) failed; errno 12\n2018-12-07T09:15:40.965740Z 1 [ERROR] [MY-012956] [InnoDB] Cannot allocate memory for the buffer pool\n2018-12-07T09:15:40.965766Z 1 [ERROR] [MY-012930] [InnoDB] Plugin initialization aborted with error Generic error.\n2018-12-07T09:15:40.965794Z 1 [ERROR] [MY-010334] [Server] Failed to initialize DD Storage Engine\n2018-12-07T09:15:40.965949Z 0 [ERROR] [MY-010020] [Server] Data Dictionary initialization failed.\n2018-12-07T09:15:40.965977Z 0 [ERROR] [MY-010119] [Server] Aborting\n2018-12-07T09:15:40.966835Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.0.13)  MySQL Community Server - GPL.\n```\n搜了一下这个问题：<br />`[ERROR] [MY-012681] [InnoDB] mmap(137428992 bytes) failed; errno 12`<br />看样子是内存映射出错，再通过命令`journalctl -xe`看一下,同时也找到了原因：原来是**swap分区是0(https://blog.csdn.net/sxyandapp/article/details/77091007),于是一阵操作：**\n```bash\n➜  ~ free -m\n/dev/vda1            /                    ext4       noatime,acl,user_xattr 1 1\n              total        used        free      shared  buff/cache   available\nMem:            992         516         304           0         171         321\nSwap:             0           0           0\n\n➜  ~ dd if=/dev/zero of=/swap bs=1M count=512\ndd: failed to open ‘/swap’: Permission denied\n\n➜  ~ sudo dd if=/dev/zero of=/swap bs=1M count=512\n512+0 records in\n512+0 records out\n536870912 bytes (537 MB) copied, 4.01658 s, 134 MB/s\n\n➜  ~ sudo mkswap /swap \nSetting up swapspace version 1, size = 524284 KiB\nno label, UUID=9bbac588-e6ee-4b1c-a398-4ac460ad476a\n\n➜  ~ sudo swapon /swap \nswapon: /swap: insecure permissions 0644, 0600 suggested.\n\n➜  ~ free -m                \n              total        used        free      shared  buff/cache   available\nMem:            992         516          64           0         410         317\nSwap:           511           0         511\n\n\nvi /etc/fstab\n#在其中添加如下一行,保证下次系统启动后，此swap分区被自动加载，需要修改系统的fstab文件\n/swap swap swap defaults 0 0\n```\n之后再重启就好了。\n<a name=\"75lwvk\"></a>\n## [](#75lwvk)错误3：登录问题error: 'Access denied for user 'root'@'localhost' (using password: NO)'\n这个其实是密码的问题，没有设置密码的时候，mysql会生成一个临时的密码，通过命令：\n```bash\n➜  ~ sudo grep 'temporary password' /var/log/mysqld.log\n2018-12-07T09:08:22.908621Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: TdqPeZ-n;4Ah\n```\n可以看到生成的临时密码，然后用临时密码登录即可。\n\n<a name=\"wt3kod\"></a>\n## [](#wt3kod)修改密码的问题\n可能因为8.0的版本，修改的密码不能过于简单，并且命令好像也有些不一样了，用的是``\n```bash\nALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';\n```\n\n看到一个别人的回答：<br />![](https://cdn.nlark.com/yuque/0/2018/png/187932/1544177770052-39cd9fe0-1c11-4059-be21-08de2d19446b.png#width=695)<br />应该是后面才改的？\n\n<a name=\"69ioxf\"></a>\n# [](#69ioxf)外网连接mysql\n由于两台服务器的版本有点不一样，修改外网连接也有点不一样。\n<a name=\"zvrisn\"></a>\n## [](#zvrisn)[MySQL5.7](https://blog.csdn.net/w20228396/article/details/70143500) \n1.修改配置文件\n```bash\n#修改配置文件\nsudo vi /etc/mysql/mysql.conf.d/mysqld.cnf   # bind-address=127.0.0.1 修改成 bind-address=0.0.0.0\n\n# 重启服务\nservice mysql restart\n\n# 添加远程连接mysql的账号\n> grant all on *.* to root@'%' identified by '123456';\n> flush privileges;\n# \n*.*          第一个*表示库，第二个*表示表; *.*对全部数据库的全部表授权，so.ok 表示只对so这个库中的ok表授权\nroot        表示要给哪个用户授权，这个用户可以是存在的用户，也可以是不存在的\n'%'          表示允许远程连接的IP地址，%代表允许所有IP连接\n```\n\n<a name=\"d0cydb\"></a>\n## [](#d0cydb)[MySQL8.0](https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0) \n8.0的版本总结的对权限的管理严格很多，毕竟数据很重要，只有安全才能放心。尝试过上述方式，但是连接不上。最终在Stack Overflow上找到了办法。\n```bash\nCREATE USER 'root'@'%' IDENTIFIED BY 'root';\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;\n```\n但是修改之后还是会有问题，出现了2059错误：   <br />![](https://cdn.nlark.com/yuque/0/2018/png/187932/1544449883818-59e9985f-7a74-47f5-954e-4e8aa80ced7c.png#width=586)<br />解决方式可以采用修改密码为简单密码：\n```bash\nSET GLOBAL validate_password.policy=0;\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '12345678';\n```\n<a name=\"gwwwfv\"></a>\n# [](#gwwwfv)总结\n总之，感觉之前windows和ubuntu下都没有这么麻烦，这里总结一下吧，感觉以后会用的很多，不想踩坑了。\n\n<a name=\"ex7rxf\"></a>\n# [](#ex7rxf)参考：\n[MySQL8.0.11连接错误2059解决方法](https://juejin.im/entry/5af5d2786fb9a07aaf3547cc) <br />[How to grant all privileges to root user in MySQL 8.0](https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0)<br />[centos mysql初探 -- 配置、基本操作及问题](https://www.cnblogs.com/echo-coding/p/9172636.html)\n\n\n\n"
  },
  {
    "title": "云服务器工具安装",
    "description": "",
    "created_at": "2018-12-07T03:15:36.000Z",
    "updated_at": "2018-12-07T09:41:41.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "sqofpv",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "go语言问题",
    "description": "",
    "created_at": "2018-12-05T11:08:04.000Z",
    "updated_at": "2018-12-12T01:50:14.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "qga31w",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "Go语言学习笔记",
    "description": "Go语言解决的问题高性能+快的开发速度1.开发速度：编译器只会关注被直接引用的库，而不用遍历依赖链中所有依赖的库。很多 Go 程序可以在 1 秒内编译完。  2.并发：goroutine很像线程，但是它占用的内存远少于线程，使用它需要的代码更少。通道（ channel）是一种内置的数据结构，可...",
    "created_at": "2018-12-01T02:43:16.000Z",
    "updated_at": "2018-12-26T13:30:13.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "xz596r",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "无标题",
    "description": "",
    "created_at": "2018-12-01T02:42:59.000Z",
    "updated_at": "2018-12-01T02:42:59.000Z",
    "published_at": null,
    "format": "asl",
    "slug": "gyryh3",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": ""
  },
  {
    "title": "使用语雀编辑器写静态博客",
    "description": "title:  使用语雀编辑器写静态博客date: 2018-11-14 22:27:10\rupdate: 2018-11-14 22:27:10categories: 工具tags: [Hexo,折腾,语雀]\r\r\r---本来以为已经是最后一次折腾了，但是总是生活不停，折腾不止，觉得本地文件管...",
    "created_at": "2018-11-14T13:53:08.000Z",
    "updated_at": "2018-12-24T11:33:13.000Z",
    "published_at": "2018-12-24T11:33:13.000Z",
    "format": "asl",
    "slug": "eg7hkp",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "title:  使用语雀编辑器写静态博客<br />date: 2018-11-14 22:27:10\r<br />update: 2018-11-14 22:27:10<br />categories: 工具<br />tags: [Hexo,折腾,语雀]\r<br />\r<br />\r<br />---\n> 本来以为已经是最后一次折腾了，但是总是生活不停，折腾不止，觉得本地文件管起来还是有点麻烦，看到语雀markdown又做的这么好，前几天还准备拿它当云笔记用，但是据说底层存的都是md格式，有的时候又还是不太方便，不过做编辑器来说确实很爽了，自带图床，还有github上开源的一个接口。   \n\n\n<!--more-->\n\n<a name=\"s7pfan\"></a>\n# [](#s7pfan)准备工作\n<a name=\"p3r4ex\"></a>\n## [](#p3r4ex)更新node.js和npm\n刚刚来就是坑，不过还是准备从正常的步骤开始说吧，就是博客基于的是nodejs，很多包的安装都是采用npm统一管理的，因为有些插件需要使用新的版本，所以需要先更新一下，这里只说一下windows下面的操作。\n<a name=\"p7w2ix\"></a>\n### [](#p7w2ix)更新node.js\nwindow下并没有网上说的乱七八糟的命令行更新方式，直接在[官网](http://nodejs.cn/)下载最新的安装包就可以。然后安装在之前的位置进行覆盖就可以更新了。更新之后通过命令:\n```git\n$node -v\nv10.13.0\n```\n<a name=\"85nlcu\"></a>\n### [](#85nlcu)更新npm\n通过命令：\n```git\n$npm install -g npm\n\n#更新后的版本可以看到\n$npm -v\n6.4.1\n```\n<a name=\"wng1dw\"></a>\n### [](#wng1dw)更新包\n可以使用命令查看可以更新的包:\n```git\n$npm outdated         #查看需要更新的包：\nPackage                 Current  Wanted  Latest  Location\nhexo-helper-live2d      MISSING   3.1.0   3.1.0  hexo-site\nhexo                      3.3.9   3.8.0   3.8.0  hexo-site\nhexo-douban              0.2.14  0.2.16   1.0.6  hexo-site\nhexo-generator-archive    0.1.4   0.1.5   0.1.5  hexo-site\nhexo-generator-search     2.2.5   2.3.0   2.3.0  hexo-site\nhexo-renderer-ejs         0.2.0   0.2.0   0.3.1  hexo-site\nhexo-renderer-marked     0.2.11  0.2.11   0.3.2  hexo-site\nhexo-server               0.2.2   0.2.2   0.3.3  hexo-site\n$npm install --save  #\n```\n之后修改`package.json`文件，修改到对应的版本。然后执行命令，进行更新：\n```\n$npm install --save\n```\n<a name=\"f2134cf5\"></a>\n## [](#安装语雀文章下载插件)安装语雀文章下载插件\n首先这里鸣谢开源的插件：[[yuque-hexo](https://github.com/x-cold/yuque-hexo)](https://github.com/x-cold/yuque-hexo)，通过工具可以将语雀知识库中的文件同步到本地，大部分功能和步骤在仓库中都有些，但是自己做的时候还是踩了坑，这里就还是写一下吧。\n<a name=\"z8p4qn\"></a>\n### [](#z8p4qn)1.创建语雀知识库\n打开[语雀](https://www.yuque.com/) 创建自己的博客知识库，并且要**设置成公开的。可以在设置中看到链接如下：**<br />![](https://cdn.nlark.com/yuque/0/2018/png/187932/1542204775155-271c9311-4643-4ccd-8692-24ab7351e0cb.png#width=375)<br />同时打开[blog知识库](https://www.yuque.com/mianhk/gaqqwc):[https://www.yuque.com/mianhk/gaqqwc](https://www.yuque.com/mianhk/gaqqwc)可以打开知识库。\n<a name=\"p1gbwg\"></a>\n### [](#p1gbwg)2.在本地安装yuque-hexo\n```git\nnpm i -g yuque-hexo\n```\n<a name=\"2nybfh\"></a>\n### [](#2nybfh)3.配置package.json\n```\n\"scripts\": {\n    \"clean\": \"npm run clean:yuque && hexo clean\",\n    \"clean:yuque\": \"DEBUG=yuque-hexo.* yuque-hexo clean\",\n    \"deploy\": \"hexo deploy\",\n    \"publish\": \"npm run clean && npm run deploy\",\n    \"dev\": \"hexo s\",\n    \"sync\": \"DEBUG=yuque-hexo.* yuque-hexo sync\",\n    \"reset\": \"npm run clean:yuque && npm run sync\"\n  },   \n  \"yuqueConfig\": {\n    \"baseUrl\": \"https://www.yuque.com/api/v2\",    #这是语雀的永久链接，直接复制就可以\n    \"login\": \"mianhk\",                      #用户名，上个链接的第一个下划线\n    \"repo\": \"gaqqwc\",                      #知识库链接，第二个下划线\n    \"mdNameFormat\": \"slug\",               #导出本地的文件名为随机的数字，比直接的中文title要好看，\n                                                可以直接用了\n    \"postPath\": \"source/_posts/yuque\"     #存在本地文件夹的位置\n  }\n```\n\n<a name=\"0rl2so\"></a>\n### [](#0rl2so)4.删除和同步文章\n```\n#删除文章\n$yuque-clean\n[INFO] yuque-hexo clean start.\n[INFO] remove yuque posts: F:\\blog\\mianhk.github.io\\source\\_posts\\yuque\\\n[INFO] remove yuque local file: F:\\blog\\mianhk.github.io\\yuque.json\n[INFO] yuque-hexo clean finished.\n\n#同步文章\n$yuque-hexo sync\n[INFO] yuque-hexo sync start.\n[INFO] remove yuque posts: F:\\blog\\mianhk.github.io\\source\\_posts\\yuque\\\n[INFO] loading config: F:\\blog\\mianhk.github.io\\package.json\n[INFO] downloading articles: {\"baseUrl\":\"https://www.yuque.com/api/v2\",\"login\":\"mianhk\",\"repo\":\"gaqqwc\",\"mdNameFormat\":\"slug\",\"postPath\":\"source/_posts/yuque\"}\n[INFO] reading from local file: F:\\blog\\mianhk.github.io\\yuque.json\n[INFO] download article body: 11月生活小结\n[INFO] download articls done!\n[INFO] writing to local file: F:\\blog\\mianhk.github.io\\yuque.json\n[INFO] create posts director (if it not exists): F:\\blog\\mianhk.github.io\\source\\_posts\\yuque\n[INFO] generate post file: F:\\blog\\mianhk.github.io\\source\\_posts\\yuque\\xzxhcv.md\n[INFO] yuque-hexo sync finished.\n```\n\n<a name=\"enltgy\"></a>\n### [](#enltgy)5.修改文章的title和tag等\n还是跟之前的格式直接写即可。\n```makedown\ntitle:  \ndate: \nupdate: \ncategories: \ntags: []\n```\n\n<a name=\"974chn\"></a>\n### [](#974chn)6.部署博客\n\n<a name=\"mzmxge\"></a>\n# [](#mzmxge)记录一些坑\n\n- 知识库一定要是公开的\n\n- windows下更新nodejs不能用n，即使强制使用了也还是无法更新\n\n- 新版本的npm。如果改了package.json，且package.json和lock文件不同，那么执行`npm i`时npm会根据package中的版本号以及语义含义去下载最新的包，并更新至lock。\n\n\n\n<a name=\"vpz7ep\"></a>\n## [](#vpz7ep)Reference:\n\n- [https://github.com/x-cold/yuque-hexo](https://github.com/x-cold/yuque-hexo)\n\n- [https://luan.ma/post/yuque2blog/](https://luan.ma/post/yuque2blog/)\n\n- [https://www.zhihu.com/question/62331583](https://www.zhihu.com/question/62331583)\n\n- [将 Hexo 升级到 v3.5.0](https://tommy.net.cn/2018/02/26/upgrade-hexo-to-v3-5-0/) \n\n- [Demo Json](https://github.com/x-cold/blog/blob/master/package.json#L26) \n\n\n"
  },
  {
    "title": "11月生活小结",
    "description": "title:  11月生活小结date: 2018-11-05 20:04:46\rupdate: 2018-11-05 20:04:50\rcategories: 随笔\rtags: [随笔,生活,日常总结]\r最近又到了生活有点不知道干什么的时候，有的时候觉得自己对什么都很有信心，有的时候又觉得什...",
    "created_at": "2018-11-05T11:00:51.000Z",
    "updated_at": "2018-11-14T13:50:15.000Z",
    "published_at": "2018-11-14T13:50:15.000Z",
    "format": "asl",
    "slug": "xzxhcv",
    "last_editor": {
      "id": 187932,
      "type": "User",
      "login": "mianhk",
      "name": "mianhk",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "followers_count": 3,
      "following_count": 4,
      "created_at": "2018-10-10T13:47:18.000Z",
      "updated_at": "2019-05-01T07:47:16.000Z",
      "_serializer": "v2.user"
    },
    "body": "title:  11月生活小结<br />date: 2018-11-05 20:04:46\r<br />update: 2018-11-05 20:04:50\r<br />categories: 随笔\r<br />tags: [随笔,生活,日常总结]\r\n\n---\n\n> 最近又到了生活有点不知道干什么的时候，有的时候觉得自己对什么都很有信心，有的时候又觉得什么都做不好。想起来以前总是站在自己的角度看一些事情，看自己。直到现在有时候看看，自己的问题，一直放在那，并没有好多少，只不过我像对待其他人一样宽容的对待了自己。\n\n\n![](https://cdn.nlark.com/yuque/0/2018/png/187932/1541420058802-2a13e83c-eb31-4adb-9ce0-5b8443a9ff3b.png#width=596)\n<a name=\"b8zftw\"></a>\n## [](#b8zftw)专注的做自己该做的事情\n发现自己原来一直是个喜欢折腾的人，平时折腾Linux，折腾chrome的插件，学一些东西的时候，好像总是把关注点搞错了。先以几件事举个例子吧。 \n<a name=\"g7awld\"></a>\n### [](#g7awld)学习C++\n比如学个语言，C++，先在网上搜Windows下 C好用的编辑器，嗯，找到了Dev C，觉得还挺好的，确实，直接编译就能运行，而且还是gcc的编译，也比较符合现在吧，总比那些VC6.0要好。然后写了一段，刷题的时候发现怎么有的时候中文粘贴会有问题，垃圾，赶紧换一个。  \n\n于是就看到了网上的很多说vim搭建IDE很酷，而且vim自己也用过，自己也恰好有台云服务器，自己要做的也是Linux下的C++开发，也恰好可以练习一些比如gcc工具链呀，写写Makefile呀，嗯，于是网上找了一堆vim的配置，配置的很酷，找了很多，各种修改，甚至白天都没心思干活了也要搞好，中午回宿舍开着电脑马上开始弄，到了后面折腾的都累了，在github上找到了一个别人配好的，看了一下界面，唉，算了就这个吧。于是vim下一阵操作，还学了配置的一些快捷键：诸如切换窗口，切换文件，语法错误之类的，还有即时运行之类的操作。就像下面这样。。\n\n![](https://cdn.nlark.com/yuque/0/2018/png/187932/1541417270624-4fa02e68-1d4c-4852-8be2-24498600aff1.png#width=504)\n\n过段时间发现，这个云服务器下面写代码还是不太好，1M的小水管，有的时候会卡，这就很难受了，而且说得联系Makefile那些，其实能练的也比较少，一般都是直接make一下文件就好了，或者是一个写好的Makefile直接全编译了。于是又转回了Windows，试了一下宇宙IDE--VS，果然不一样，先下个最新版吧，2017怎么这么大呀，算了，换2015吧，额，2015好像也有点大，要不就试试2013吧，这个大小好像还凑和，于是下载下来，一顿折腾，终于可以写了，唉，这个怎么每次还要加pause才行呀，而且这个小黑框输入也太难受了，而且打开一下这么大，算了，溜了溜了。\n\n又看到Idea家的跨平台的Clion，因为之前用过idea，所以觉得还不错，现代的IDE，那就用用看吧，但是这个环境，还要配置<br />MINGW64呀，算了，配置吧，网上一大堆了，虽然有些有坑，虽然有的时候网速很慢，但是没事，我能克服困难。。于是就用了这个，确实还挺好看的，用着也还算顺手吧，赶紧把主题呀，各种呀配置一下呀，哦，还有vim，这么好用的工具。试了一段时间写项目确实不错，做个小项目，写起来还可以的。但是是要在Linux下编译的呀，于是又找到了ftp工具。。。\n\n讲道理到这应该也差不多了，但是，Clion每次打开也是很大了，总感觉不是很方便，要不还是？ 哦，最近正好出了一个编辑器还挺好用的，网上看着各种推荐，vscode，网上都说还可以，微软做的，我试试吧。哎，做编辑器确实可以，平时写个算法之类的呀。于是又是各种插件折腾，对了，再弄个c++的编译环境吧，但是这个编译也有点慢呀，算了，忍忍吧。\n\n上面大概是这一年多以来学习C++过程的坑了，不知道很多Programmer是不是也跟我一样，但是回头想想真的花了很多乱七八糟的时间来做一些无关紧要的事情，其实就是没有抓住重点吧。\n\n<a name=\"drb7hh\"></a>\n### [](#drb7hh)服务器和博客的折腾\n因为一直有台服务器，为了不用开虚拟机就做Linux操作，自己在上面的折腾也算是蛮多吧，从最开始想跑个微信（一个github上的项目），然后折腾vim，折腾挖矿（收益当然是不用说，但是当时感觉还不错），后面又折腾Jupyter notebook，tmux，zsh，也是花费了不少的时间，但是结果是，关于真正技术方面的，反而学到的比较少。\n\n<a name=\"h5c2dp\"></a>\n## [](#h5c2dp)What's Next\n有的时候自己也在想这些原因，以前可能也会有些这样，但是至少能在一方面能够保持很好的一个学习状态，但是直到最近，可能也是找完了工作吧，心态也有些放松了，所以就更。但是，真正的自由，是在自律的条件下的。<br />所以计划和要求也还是要有的：\n\n- 学习MySQL和Go语言\n\n- 每周至少一篇技术博客\n\n- 上班时间，就干该干的事情\n\n- 玩的时候，一定不要想着学习\n\n- 不吃夜宵\n\n\n"
  }
]